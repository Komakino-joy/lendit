{"ast":null,"code":"import { all, call, takeLatest, put } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { API_URL } from '../../services/api';\nimport SiteMemberActionTypes from './site-member.types';\nimport { registrationFailure, registrationSuccess } from './site-member.actions'; // fetch(`${API_URL}/members/register`, {\n//     method: \"post\",\n//     headers: { \"Content-Type\": \"application/json\" },\n//     body: JSON.stringify({\n//       fname: fname,\n//       lname: lname,\n//       email: email,\n//       password: password,\n//     }),\n//   })\n//     // * Handling incorrect credentials\n//     .then((response) => response.json())\n//     .then((member) => {\n//       if (member.id) {\n//         history.push(\"/signin\");\n//       } else {\n//         alert.show('Unable to register' , { type: \"error\" , position:\"top center\"})\n//       }\n//     });\n\nexport function* register({\n  payload: {\n    fname,\n    lname,\n    email,\n    password\n  }\n}) {\n  console.log('helloooooo');\n\n  try {\n    const user = yield axios({\n      method: 'post',\n      url: `${API_URL}/members/register`,\n      data: {\n        fname: fname,\n        lname: lname,\n        email: email,\n        password: password\n      }\n    });\n    console.log(user);\n    yield put(registrationSuccess(user));\n  } catch (error) {\n    yield put(registrationFailure(error));\n  }\n}\n;\nexport function* onRegistrationStart() {\n  yield takeLatest(SiteMemberActionTypes.REGISTER_SUCCESS, register);\n}\n;\nexport function* siteMemberSagas() {\n  yield all([call(onRegistrationStart)]);\n}\n;","map":{"version":3,"sources":["C:/Users/bryan.alvarez/Documents/webdev/git/lendit/lendit/src/redux/site-member/site-member.sagas.js"],"names":["all","call","takeLatest","put","axios","API_URL","SiteMemberActionTypes","registrationFailure","registrationSuccess","register","payload","fname","lname","email","password","console","log","user","method","url","data","error","onRegistrationStart","REGISTER_SUCCESS","siteMemberSagas"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,QAA2C,oBAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,OAAT,QAAwB,oBAAxB;AAEA,OAAOC,qBAAP,MAAkC,qBAAlC;AAEA,SACIC,mBADJ,EAEIC,mBAFJ,QAGO,uBAHP,C,CAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA,OAAO,UAAUC,QAAV,CAAmB;AAACC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA,KAAT;AAAgBC,IAAAA,KAAhB;AAAuBC,IAAAA;AAAvB;AAAV,CAAnB,EAAiE;AACpEC,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;;AACA,MAAG;AACC,UAAMC,IAAI,GAAG,MAAOb,KAAK,CAAC;AACFc,MAAAA,MAAM,EAAE,MADN;AAEFC,MAAAA,GAAG,EAAG,GAAEd,OAAQ,mBAFd;AAGFe,MAAAA,IAAI,EAAC;AACDT,QAAAA,KAAK,EAAEA,KADN;AAEDC,QAAAA,KAAK,EAAEA,KAFN;AAGDC,QAAAA,KAAK,EAAEA,KAHN;AAIDC,QAAAA,QAAQ,EAAEA;AAJT;AAHH,KAAD,CAAzB;AAUoBC,IAAAA,OAAO,CAACC,GAAR,CAAYC,IAAZ;AACpB,UAAMd,GAAG,CAACK,mBAAmB,CAACS,IAAD,CAApB,CAAT;AACH,GAbD,CAaC,OAAMI,KAAN,EAAY;AACT,UAAMlB,GAAG,CAACI,mBAAmB,CAACc,KAAD,CAApB,CAAT;AACH;AACJ;AAAA;AAED,OAAO,UAAUC,mBAAV,GAAgC;AACnC,QAAMpB,UAAU,CAACI,qBAAqB,CAACiB,gBAAvB,EAAyCd,QAAzC,CAAhB;AACH;AAAA;AAED,OAAO,UAAUe,eAAV,GAA4B;AAC/B,QAAMxB,GAAG,CAAC,CACNC,IAAI,CAACqB,mBAAD,CADE,CAAD,CAAT;AAGH;AAAA","sourcesContent":["import { all, call, takeLatest, put } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\n\r\nimport { API_URL } from '../../services/api';\r\n\r\nimport SiteMemberActionTypes from './site-member.types';\r\n\r\nimport {\r\n    registrationFailure,\r\n    registrationSuccess,\r\n} from './site-member.actions'\r\n\r\n// fetch(`${API_URL}/members/register`, {\r\n//     method: \"post\",\r\n//     headers: { \"Content-Type\": \"application/json\" },\r\n//     body: JSON.stringify({\r\n//       fname: fname,\r\n//       lname: lname,\r\n//       email: email,\r\n//       password: password,\r\n//     }),\r\n//   })\r\n//     // * Handling incorrect credentials\r\n//     .then((response) => response.json())\r\n//     .then((member) => {\r\n//       if (member.id) {\r\n//         history.push(\"/signin\");\r\n//       } else {\r\n//         alert.show('Unable to register' , { type: \"error\" , position:\"top center\"})\r\n//       }\r\n//     });\r\n\r\n\r\n\r\nexport function* register({payload: { fname, lname, email, password }}) {\r\n    console.log('helloooooo')\r\n    try{\r\n        const user = yield  axios({\r\n                                method: 'post',\r\n                                url: `${API_URL}/members/register`,\r\n                                data:{\r\n                                    fname: fname,\r\n                                    lname: lname,\r\n                                    email: email,\r\n                                    password: password,\r\n                                    }\r\n                            });  \r\n                            console.log(user);\r\n        yield put(registrationSuccess(user)); \r\n    }catch(error){\r\n        yield put(registrationFailure(error));\r\n    } \r\n};\r\n\r\nexport function* onRegistrationStart() {\r\n    yield takeLatest(SiteMemberActionTypes.REGISTER_SUCCESS, register)\r\n};\r\n\r\nexport function* siteMemberSagas() {\r\n    yield all([\r\n        call(onRegistrationStart),\r\n    ]);\r\n};"]},"metadata":{},"sourceType":"module"}