{"ast":null,"code":"import { call, put, takeLatest, all } from \"redux-saga/effects\";\nimport { REQUEST_SELECTED_ASSET, CHECK_IN_SELECTED_ASSET_START, CHECK_OUT_SELECTED_ASSET_START, receiveSelectedAssetData, checkInSelectedAssetSuccess, checkOutSelectedAssetSuccess } from \"../asset/asset.actions\";\nimport { fetchSelectedAssetData, checkInAsset } from \"../../services/api\"; // worker Saga: will be fired on USER_FETCH_REQUESTED actions\n\nfunction* getRequestedSelectedAssetData(action) {\n  try {\n    // do api call\n    const assetData = yield call(fetchSelectedAssetData, action.assetID);\n    yield put(receiveSelectedAssetData(assetData));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction* postCheckInSelectedAsset(action) {\n  try {\n    const assetData = yield call(checkInAsset, action.assetID);\n    yield put(checkInSelectedAssetSuccess(assetData));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction* postCheckOutSelectedAsset(action) {\n  try {\n    const assetData = yield call(checkInAsset, action.assetID);\n    yield put(checkOutSelectedAssetSuccess(assetData));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport function* requestSelectedAssetSaga() {\n  yield takeLatest(REQUEST_SELECTED_ASSET, getRequestedSelectedAssetData);\n}\nexport function* checkInSelectedAssetSaga() {\n  console.log('STEP 4: checkInSelectedAssetSaga() takes first from action \"CHECK_IN_SELECTED_ASSET_START\" and runs postCheckInSelectedAsset() ');\n  yield takeLatest(CHECK_IN_SELECTED_ASSET_START, postCheckInSelectedAsset);\n}\nexport function* checkOutSelectedAssetSaga() {\n  yield takeLatest(CHECK_OUT_SELECTED_ASSET_START, postCheckOutSelectedAsset);\n}\nexport function* assetSagas() {\n  console.log('STEP 3: assetSagas function yields call to saga functions, [call (requestSelectedAssetSaga), call(checkInSelectedAssetSaga)]');\n  yield all([call(requestSelectedAssetSaga), call(checkInSelectedAssetSaga), call(checkOutSelectedAssetSaga)]);\n}\n;","map":{"version":3,"sources":["C:/Users/bryan.alvarez/Documents/webdev/git/comp-overload/client/src/redux/asset/asset.sagas.js"],"names":["call","put","takeLatest","all","REQUEST_SELECTED_ASSET","CHECK_IN_SELECTED_ASSET_START","CHECK_OUT_SELECTED_ASSET_START","receiveSelectedAssetData","checkInSelectedAssetSuccess","checkOutSelectedAssetSuccess","fetchSelectedAssetData","checkInAsset","getRequestedSelectedAssetData","action","assetData","assetID","error","console","log","postCheckInSelectedAsset","postCheckOutSelectedAsset","requestSelectedAssetSaga","checkInSelectedAssetSaga","checkOutSelectedAssetSaga","assetSagas"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,UAApB,EAAgCC,GAAhC,QAA6C,oBAA7C;AAEA,SACIC,sBADJ,EAEIC,6BAFJ,EAGIC,8BAHJ,EAIIC,wBAJJ,EAKIC,2BALJ,EAMIC,4BANJ,QAOU,wBAPV;AASA,SACEC,sBADF,EAEEC,YAFF,QAGQ,oBAHR,C,CAKA;;AACA,UAAUC,6BAAV,CAAwCC,MAAxC,EAAgD;AAC9C,MAAI;AACF;AACA,UAAMC,SAAS,GAAG,MAAMd,IAAI,CAACU,sBAAD,EAAyBG,MAAM,CAACE,OAAhC,CAA5B;AACA,UAAMd,GAAG,CAACM,wBAAwB,CAACO,SAAD,CAAzB,CAAT;AACD,GAJD,CAIE,OAAOE,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF;;AAED,UAAUG,wBAAV,CAAmCN,MAAnC,EAA2C;AACzC,MAAG;AACD,UAAMC,SAAS,GAAG,MAAMd,IAAI,CAACW,YAAD,EAAeE,MAAM,CAACE,OAAtB,CAA5B;AACA,UAAMd,GAAG,CAACO,2BAA2B,CAACM,SAAD,CAA5B,CAAT;AACD,GAHD,CAGG,OAAOE,KAAP,EAAc;AACfC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF;;AAED,UAAUI,yBAAV,CAAoCP,MAApC,EAA4C;AAC1C,MAAG;AACD,UAAMC,SAAS,GAAG,MAAMd,IAAI,CAACW,YAAD,EAAeE,MAAM,CAACE,OAAtB,CAA5B;AACA,UAAMd,GAAG,CAACQ,4BAA4B,CAACK,SAAD,CAA7B,CAAT;AACD,GAHD,CAGG,OAAOE,KAAP,EAAc;AACfC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF;;AAGD,OAAQ,UAAUK,wBAAV,GAAqC;AAC3C,QAAMnB,UAAU,CAACE,sBAAD,EAAyBQ,6BAAzB,CAAhB;AACD;AAGD,OAAQ,UAAUU,wBAAV,GAAqC;AAC3CL,EAAAA,OAAO,CAACC,GAAR,CAAY,iIAAZ;AACA,QAAMhB,UAAU,CAACG,6BAAD,EAAgCc,wBAAhC,CAAhB;AACD;AAED,OAAQ,UAAUI,yBAAV,GAAsC;AAC5C,QAAMrB,UAAU,CAACI,8BAAD,EAAiCc,yBAAjC,CAAhB;AACD;AAED,OAAO,UAAUI,UAAV,GAAuB;AAC1BP,EAAAA,OAAO,CAACC,GAAR,CAAY,8HAAZ;AACA,QAAMf,GAAG,CAAC,CACRH,IAAI,CAAEqB,wBAAF,CADI,EAERrB,IAAI,CAACsB,wBAAD,CAFI,EAGRtB,IAAI,CAACuB,yBAAD,CAHI,CAAD,CAAT;AAKH;AAAA","sourcesContent":["import { call, put, takeLatest, all,  } from \"redux-saga/effects\";\r\n\r\nimport { \r\n    REQUEST_SELECTED_ASSET,\r\n    CHECK_IN_SELECTED_ASSET_START,\r\n    CHECK_OUT_SELECTED_ASSET_START,\r\n    receiveSelectedAssetData,\r\n    checkInSelectedAssetSuccess,\r\n    checkOutSelectedAssetSuccess\r\n   } from \"../asset/asset.actions\";\r\n\r\nimport { \r\n  fetchSelectedAssetData,\r\n  checkInAsset\r\n } from \"../../services/api\";\r\n\r\n// worker Saga: will be fired on USER_FETCH_REQUESTED actions\r\nfunction* getRequestedSelectedAssetData(action) {\r\n  try {\r\n    // do api call\r\n    const assetData = yield call(fetchSelectedAssetData, action.assetID);\r\n    yield put(receiveSelectedAssetData(assetData));\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nfunction* postCheckInSelectedAsset(action) {\r\n  try{\r\n    const assetData = yield call(checkInAsset, action.assetID )\r\n    yield put(checkInSelectedAssetSuccess(assetData))\r\n  }  catch (error) {\r\n    console.log(error)\r\n  }\r\n}\r\n\r\nfunction* postCheckOutSelectedAsset(action) {\r\n  try{\r\n    const assetData = yield call(checkInAsset, action.assetID )\r\n    yield put(checkOutSelectedAssetSuccess(assetData))\r\n  }  catch (error) {\r\n    console.log(error)\r\n  }\r\n}\r\n\r\n\r\nexport  function* requestSelectedAssetSaga() {\r\n  yield takeLatest(REQUEST_SELECTED_ASSET, getRequestedSelectedAssetData);\r\n}\r\n\r\n\r\nexport  function* checkInSelectedAssetSaga() {\r\n  console.log('STEP 4: checkInSelectedAssetSaga() takes first from action \"CHECK_IN_SELECTED_ASSET_START\" and runs postCheckInSelectedAsset() ')\r\n  yield takeLatest(CHECK_IN_SELECTED_ASSET_START, postCheckInSelectedAsset);\r\n}\r\n\r\nexport  function* checkOutSelectedAssetSaga() {\r\n  yield takeLatest(CHECK_OUT_SELECTED_ASSET_START, postCheckOutSelectedAsset);\r\n}\r\n\r\nexport function* assetSagas() {\r\n    console.log('STEP 3: assetSagas function yields call to saga functions, [call (requestSelectedAssetSaga), call(checkInSelectedAssetSaga)]')\r\n    yield all([\r\n      call (requestSelectedAssetSaga), \r\n      call(checkInSelectedAssetSaga),\r\n      call(checkOutSelectedAssetSaga)\r\n    ])\r\n};"]},"metadata":{},"sourceType":"module"}