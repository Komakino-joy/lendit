{"ast":null,"code":"import { call, put, takeLatest, all } from \"redux-saga/effects\";\nimport AssetpayloadTypes from './asset.types';\nimport { receiveSelectedAssetData, checkInSelectedAssetSuccess, checkOutSelectedAssetSuccess, quarantineSelectedAssetSuccess } from \"../asset/asset.actions\";\nimport { httpFetchSelectedAssetData, httpCheckInAsset, httpCheckOutAsset, httpQuarantineAsset } from \"../../services/api\";\n\nfunction* getRequestedSelectedAssetData(payload) {\n  try {\n    // console.log('HELLLOOOOOOO IAM BEING PASSED IN THE SAGAS' ,assetID, ownerID)\n    // const assetData = yield httpFetchSelectedAssetData(assetID, ownerID);\n    console.log('HELLLOOOOOOO IAM BEING PASSED IN THE SAGAS', payload);\n    yield put(receiveSelectedAssetData(payload));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n;\n\nfunction* postCheckInSelectedAsset(payload) {\n  try {\n    const assetData = yield call(httpCheckInAsset, payload.assetID, payload.userId, payload.ownerId, payload.assetName, payload.assetSerial, payload.assetModel);\n    yield put(checkInSelectedAssetSuccess(assetData));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n;\n\nfunction* postCheckOutSelectedAsset(payload) {\n  try {\n    const assetData = yield call(httpCheckOutAsset, payload.assetID, payload.userID, payload.ownerId, payload.assetName, payload.assetSerial, payload.assetModel);\n    yield put(checkOutSelectedAssetSuccess(assetData));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n;\n\nfunction* postQuarantineSelectedAsset(payload) {\n  try {\n    const assetData = yield call(httpQuarantineAsset, payload.assetID, payload.userID, payload.ownerId, payload.assetName, payload.assetSerial, payload.assetModel, payload.comment);\n    yield put(quarantineSelectedAssetSuccess(assetData));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n;\nexport function* requestSelectedAssetSaga() {\n  yield takeLatest(AssetpayloadTypes.REQUEST_SELECTED_ASSET, getRequestedSelectedAssetData);\n}\n;\nexport function* checkInSelectedAssetSaga() {\n  yield takeLatest(AssetpayloadTypes.CHECK_IN_SELECTED_ASSET_START, postCheckInSelectedAsset);\n}\n;\nexport function* checkOutSelectedAssetSaga() {\n  yield takeLatest(AssetpayloadTypes.CHECK_OUT_SELECTED_ASSET_START, postCheckOutSelectedAsset);\n}\n;\nexport function* quarantineSelectedAssetSaga() {\n  yield takeLatest(AssetpayloadTypes.QUARANTINE_SELECTED_ASSET_START, postQuarantineSelectedAsset);\n}\n;\nexport function* assetSagas() {\n  yield all([call(requestSelectedAssetSaga), call(checkInSelectedAssetSaga), call(checkOutSelectedAssetSaga), call(quarantineSelectedAssetSaga)]);\n}\n;","map":{"version":3,"sources":["C:/Users/alvar/Documents/WebDev/lendit/lendit/src/redux/asset/asset.sagas.js"],"names":["call","put","takeLatest","all","AssetpayloadTypes","receiveSelectedAssetData","checkInSelectedAssetSuccess","checkOutSelectedAssetSuccess","quarantineSelectedAssetSuccess","httpFetchSelectedAssetData","httpCheckInAsset","httpCheckOutAsset","httpQuarantineAsset","getRequestedSelectedAssetData","payload","console","log","error","postCheckInSelectedAsset","assetData","assetID","userId","ownerId","assetName","assetSerial","assetModel","postCheckOutSelectedAsset","userID","postQuarantineSelectedAsset","comment","requestSelectedAssetSaga","REQUEST_SELECTED_ASSET","checkInSelectedAssetSaga","CHECK_IN_SELECTED_ASSET_START","checkOutSelectedAssetSaga","CHECK_OUT_SELECTED_ASSET_START","quarantineSelectedAssetSaga","QUARANTINE_SELECTED_ASSET_START","assetSagas"],"mappings":"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","sourcesContent":["import { call, put, takeLatest, all } from \"redux-saga/effects\";\r\n\r\nimport AssetpayloadTypes from './asset.types';\r\n\r\nimport { \r\n    receiveSelectedAssetData,\r\n    checkInSelectedAssetSuccess,\r\n    checkOutSelectedAssetSuccess, \r\n    quarantineSelectedAssetSuccess\r\n   } from \"../asset/asset.actions\";\r\n\r\nimport { \r\n  httpFetchSelectedAssetData,\r\n  httpCheckInAsset,\r\n  httpCheckOutAsset,\r\n  httpQuarantineAsset\r\n } from \"../../services/api\";\r\n\r\nfunction* getRequestedSelectedAssetData(payload) {\r\n  try {\r\n    // console.log('HELLLOOOOOOO IAM BEING PASSED IN THE SAGAS' ,assetID, ownerID)\r\n    // const assetData = yield httpFetchSelectedAssetData(assetID, ownerID);\r\n    console.log('HELLLOOOOOOO IAM BEING PASSED IN THE SAGAS' ,payload)\r\n    yield put(receiveSelectedAssetData(payload));\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nfunction* postCheckInSelectedAsset(payload) {\r\n  try{\r\n    const assetData = yield call(httpCheckInAsset, payload.assetID, payload.userId, payload.ownerId, payload.assetName, payload.assetSerial, payload.assetModel )\r\n    yield put(checkInSelectedAssetSuccess(assetData))\r\n  }  catch (error) {\r\n    console.log(error)\r\n  }\r\n};\r\n\r\nfunction* postCheckOutSelectedAsset(payload) {\r\n  try{\r\n    const assetData = yield call(httpCheckOutAsset, payload.assetID, payload.userID, payload.ownerId, payload.assetName, payload.assetSerial, payload.assetModel )\r\n    yield put(checkOutSelectedAssetSuccess(assetData))\r\n  }  catch (error) {\r\n    console.log(error)\r\n  }\r\n};\r\n\r\nfunction* postQuarantineSelectedAsset(payload) {\r\n  try{\r\n    const assetData = yield call(httpQuarantineAsset, payload.assetID, payload.userID, payload.ownerId, payload.assetName, payload.assetSerial, payload.assetModel, payload.comment )\r\n    yield put(quarantineSelectedAssetSuccess(assetData))\r\n  }  catch (error) {\r\n    console.log(error)\r\n  }\r\n};\r\n\r\nexport  function* requestSelectedAssetSaga() {\r\n  yield takeLatest(AssetpayloadTypes.REQUEST_SELECTED_ASSET, getRequestedSelectedAssetData);\r\n};\r\n\r\nexport  function* checkInSelectedAssetSaga() {\r\n  yield takeLatest(AssetpayloadTypes.CHECK_IN_SELECTED_ASSET_START, postCheckInSelectedAsset);\r\n};\r\n\r\nexport  function* checkOutSelectedAssetSaga() {\r\n  yield takeLatest(AssetpayloadTypes.CHECK_OUT_SELECTED_ASSET_START, postCheckOutSelectedAsset);\r\n};\r\n\r\nexport  function* quarantineSelectedAssetSaga() {\r\n  yield takeLatest(AssetpayloadTypes.QUARANTINE_SELECTED_ASSET_START, postQuarantineSelectedAsset);\r\n};\r\n\r\n\r\nexport function* assetSagas() {\r\n    yield all([\r\n      call(requestSelectedAssetSaga), \r\n      call(checkInSelectedAssetSaga),\r\n      call(checkOutSelectedAssetSaga),\r\n      call(quarantineSelectedAssetSaga)\r\n    ])\r\n};"]},"metadata":{},"sourceType":"module"}