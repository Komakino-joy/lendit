{"ast":null,"code":"import { call, put, takeLatest, all } from \"redux-saga/effects\";\nimport AssetActionTypes from './asset.types';\nimport { receiveSelectedAssetData, checkInSelectedAssetSuccess, checkOutSelectedAssetSuccess, quarantineSelectedAssetSuccess } from \"../asset/asset.actions\";\nimport { httpFetchSelectedAssetData, httpCheckInAsset, httpCheckOutAsset, httpQuarantineAsset } from \"../../services/api\";\n\nfunction* getRequestedSelectedAssetData({\n  payload: {\n    assetId,\n    ownerId\n  }\n}) {\n  try {\n    const assetData = yield httpFetchSelectedAssetData(assetId, ownerId);\n    yield put(receiveSelectedAssetData(assetData));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n;\n\nfunction* postCheckInSelectedAsset({\n  payload: {\n    assetId,\n    userId,\n    ownerId,\n    assetName,\n    assetSerial,\n    assetModel\n  }\n}) {\n  try {\n    const assetData = yield httpCheckInAsset(assetId, userId, ownerId, assetName, assetSerial, assetModel);\n    yield put(checkInSelectedAssetSuccess({ ...assetData,\n      userId\n    }));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n;\n\nfunction* postCheckOutSelectedAsset({\n  payload: {\n    assetId,\n    userId,\n    ownerId,\n    assetName,\n    assetSerial,\n    assetModel\n  }\n}) {\n  try {\n    const assetData = yield httpCheckOutAsset(assetId, userId, ownerId, assetName, assetSerial, assetModel);\n    yield put(checkOutSelectedAssetSuccess({ ...assetData,\n      userId\n    }));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n;\n\nfunction* postQuarantineSelectedAsset({\n  payload: {\n    assetId,\n    userId,\n    ownerId,\n    assetName,\n    assetSerial,\n    assetModel,\n    assetComments\n  }\n}) {\n  try {\n    const assetData = yield httpQuarantineAsset(assetId, userId, ownerId, assetName, assetSerial, assetModel, assetComments);\n    yield put(quarantineSelectedAssetSuccess({ ...assetData,\n      assetComments,\n      userId\n    }));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n;\nexport function* requestSelectedAssetSaga() {\n  yield takeLatest(AssetActionTypes.REQUEST_SELECTED_ASSET, getRequestedSelectedAssetData);\n}\n;\nexport function* checkInSelectedAssetSaga() {\n  yield takeLatest(AssetActionTypes.CHECK_IN_SELECTED_ASSET_START, postCheckInSelectedAsset);\n}\n;\nexport function* checkOutSelectedAssetSaga() {\n  yield takeLatest(AssetActionTypes.CHECK_OUT_SELECTED_ASSET_START, postCheckOutSelectedAsset);\n}\n;\nexport function* quarantineSelectedAssetSaga() {\n  yield takeLatest(AssetActionTypes.QUARANTINE_SELECTED_ASSET_START, postQuarantineSelectedAsset);\n}\n;\nexport function* assetSagas() {\n  yield all([call(requestSelectedAssetSaga), call(checkInSelectedAssetSaga), call(checkOutSelectedAssetSaga), call(quarantineSelectedAssetSaga)]);\n}\n;","map":{"version":3,"sources":["C:/Users/bryan.alvarez/Documents/webdev/git/lendit/lendit/src/redux/asset/asset.sagas.js"],"names":["call","put","takeLatest","all","AssetActionTypes","receiveSelectedAssetData","checkInSelectedAssetSuccess","checkOutSelectedAssetSuccess","quarantineSelectedAssetSuccess","httpFetchSelectedAssetData","httpCheckInAsset","httpCheckOutAsset","httpQuarantineAsset","getRequestedSelectedAssetData","payload","assetId","ownerId","assetData","error","console","log","postCheckInSelectedAsset","userId","assetName","assetSerial","assetModel","postCheckOutSelectedAsset","postQuarantineSelectedAsset","assetComments","requestSelectedAssetSaga","REQUEST_SELECTED_ASSET","checkInSelectedAssetSaga","CHECK_IN_SELECTED_ASSET_START","checkOutSelectedAssetSaga","CHECK_OUT_SELECTED_ASSET_START","quarantineSelectedAssetSaga","QUARANTINE_SELECTED_ASSET_START","assetSagas"],"mappings":"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","sourcesContent":["import { call, put, takeLatest, all } from \"redux-saga/effects\";\r\n\r\nimport AssetActionTypes from './asset.types';\r\n\r\nimport { \r\n    receiveSelectedAssetData,\r\n    checkInSelectedAssetSuccess,\r\n    checkOutSelectedAssetSuccess, \r\n    quarantineSelectedAssetSuccess\r\n   } from \"../asset/asset.actions\";\r\n\r\nimport { \r\n  httpFetchSelectedAssetData,\r\n  httpCheckInAsset,\r\n  httpCheckOutAsset,\r\n  httpQuarantineAsset\r\n } from \"../../services/api\";\r\n\r\nfunction* getRequestedSelectedAssetData({payload: {assetId, ownerId}}) {\r\n  try {\r\n    const assetData = yield httpFetchSelectedAssetData(assetId, ownerId);\r\n    yield put(receiveSelectedAssetData(assetData));\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nfunction* postCheckInSelectedAsset({payload: {assetId, userId, ownerId, assetName, assetSerial, assetModel}}) {\r\n  try{\r\n    const assetData = yield httpCheckInAsset(assetId, userId, ownerId, assetName, assetSerial, assetModel);\r\n    yield put(checkInSelectedAssetSuccess({...assetData, userId}))\r\n  }  catch (error) {\r\n    console.log(error)\r\n  }\r\n};\r\n\r\nfunction* postCheckOutSelectedAsset({payload: {assetId, userId, ownerId, assetName, assetSerial, assetModel}}) {\r\n  try{\r\n    const assetData = yield httpCheckOutAsset(assetId, userId, ownerId, assetName, assetSerial, assetModel);\r\n    yield put(checkOutSelectedAssetSuccess({...assetData, userId}))\r\n  }  catch (error) {\r\n    console.log(error)\r\n  }\r\n};\r\n\r\nfunction* postQuarantineSelectedAsset({payload: {assetId, userId, ownerId, assetName, assetSerial, assetModel, assetComments}}) {\r\n  try{\r\n    const assetData = yield httpQuarantineAsset(assetId, userId, ownerId, assetName, assetSerial, assetModel, assetComments);\r\n    yield put(quarantineSelectedAssetSuccess({...assetData, assetComments, userId}))\r\n  }  catch (error) {\r\n    console.log(error)\r\n  }\r\n};\r\n\r\nexport  function* requestSelectedAssetSaga() {\r\n  yield takeLatest(AssetActionTypes.REQUEST_SELECTED_ASSET, getRequestedSelectedAssetData);\r\n};\r\n\r\nexport  function* checkInSelectedAssetSaga() {\r\n  yield takeLatest(AssetActionTypes.CHECK_IN_SELECTED_ASSET_START, postCheckInSelectedAsset);\r\n};\r\n\r\nexport  function* checkOutSelectedAssetSaga() {\r\n  yield takeLatest(AssetActionTypes.CHECK_OUT_SELECTED_ASSET_START, postCheckOutSelectedAsset);\r\n};\r\n\r\nexport  function* quarantineSelectedAssetSaga() {\r\n  yield takeLatest(AssetActionTypes.QUARANTINE_SELECTED_ASSET_START, postQuarantineSelectedAsset);\r\n};\r\n\r\n\r\nexport function* assetSagas() {\r\n    yield all([\r\n      call(requestSelectedAssetSaga), \r\n      call(checkInSelectedAssetSaga),\r\n      call(checkOutSelectedAssetSaga),\r\n      call(quarantineSelectedAssetSaga)\r\n    ])\r\n};"]},"metadata":{},"sourceType":"module"}