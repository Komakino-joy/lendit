{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\alvar\\\\Documents\\\\WebDev\\\\comp-overload\\\\src\\\\components\\\\custom-button\\\\custom-button.component.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { checkInSelectedAssetStart } from \"../../redux/asset/asset.actions\";\nimport './custom-button.styles.scss';\n\nconst CustomButton = ({\n  children,\n  isCheckIn,\n  isCheckOut,\n  state,\n  getAssetDetails,\n  assetID,\n  ...props\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      className: `${isCheckIn ? 'check-in' : isCheckOut ? 'check-out' : 'submit'}  custom-button`,\n      onClick: isCheckIn ? getAssetDetails : isCheckOut ? checkOut : submitting,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this);\n};\n\n_c = CustomButton;\n\nconst mapStateToProps = state => ({\n  state: state,\n  assetID: state.assetData.id,\n  assetName: state.assetData.name,\n  assetSerial: state.assetData.serial,\n  assetImage: state.assetData.image,\n  assetStatus: state.assetData.status\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getAssetDetails: assetIDParameterForGetAssetDetails => {\n    dispatch(checkInSelectedAssetStart(assetIDParameterForGetAssetDetails));\n  }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomButton);\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomButton\");","map":{"version":3,"sources":["C:/Users/alvar/Documents/WebDev/comp-overload/src/components/custom-button/custom-button.component.jsx"],"names":["React","connect","checkInSelectedAssetStart","CustomButton","children","isCheckIn","isCheckOut","state","getAssetDetails","assetID","props","checkOut","submitting","mapStateToProps","assetData","id","assetName","name","assetSerial","serial","assetImage","image","assetStatus","status","mapDispatchToProps","dispatch","assetIDParameterForGetAssetDetails"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,yBAAT,QAA0C,iCAA1C;AAEA,OAAO,6BAAP;;AAEA,MAAMC,YAAY,GAAG,CAAC;AAACC,EAAAA,QAAD;AAAWC,EAAAA,SAAX;AAAsBC,EAAAA,UAAtB;AAAkCC,EAAAA,KAAlC;AAAwCC,EAAAA,eAAxC;AAAwDC,EAAAA,OAAxD;AAAiE,KAAGC;AAApE,CAAD,KAAgF;AACjG,sBACI;AAAA,2BACI;AACI,MAAA,SAAS,EAAG,GAAEL,SAAS,GAAG,UAAH,GAAgBC,UAAU,GAAG,WAAH,GAAiB,QAAU,iBADhF;AAEI,MAAA,OAAO,EAAED,SAAS,GAAIG,eAAJ,GAAsBF,UAAU,GAAGK,QAAH,GAAcC,UAFpE;AAAA,gBAIKR;AAJL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH,CAXD;;KAAMD,Y;;AAaN,MAAMU,eAAe,GAAIN,KAAD,KAAY;AAChCA,EAAAA,KAAK,EAAEA,KADyB;AAEhCE,EAAAA,OAAO,EAAEF,KAAK,CAACO,SAAN,CAAgBC,EAFO;AAGhCC,EAAAA,SAAS,EAAET,KAAK,CAACO,SAAN,CAAgBG,IAHK;AAIhCC,EAAAA,WAAW,EAAEX,KAAK,CAACO,SAAN,CAAgBK,MAJG;AAKhCC,EAAAA,UAAU,EAAEb,KAAK,CAACO,SAAN,CAAgBO,KALI;AAMhCC,EAAAA,WAAW,EAACf,KAAK,CAACO,SAAN,CAAgBS;AANI,CAAZ,CAAxB;;AASA,MAAMC,kBAAkB,GAAIC,QAAD,KAAe;AACtCjB,EAAAA,eAAe,EAAGkB,kCAAD,IAAwC;AAAED,IAAAA,QAAQ,CAACvB,yBAAyB,CAACwB,kCAAD,CAA1B,CAAR;AAAwE;AAD7F,CAAf,CAA3B;;AAIA,eAAezB,OAAO,CAACY,eAAD,EAAkBW,kBAAlB,CAAP,CAA6CrB,YAA7C,CAAf","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { checkInSelectedAssetStart } from \"../../redux/asset/asset.actions\";\r\n\r\nimport './custom-button.styles.scss';\r\n\r\nconst CustomButton = ({children, isCheckIn, isCheckOut, state,getAssetDetails,assetID, ...props}) => {\r\n    return (\r\n        <div>\r\n            <button\r\n                className={`${isCheckIn ? 'check-in' : isCheckOut ? 'check-out' : 'submit' }  custom-button`}\r\n                onClick={isCheckIn ?  getAssetDetails : isCheckOut ? checkOut : submitting} \r\n            >\r\n                {children}\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    state: state,\r\n    assetID: state.assetData.id,\r\n    assetName: state.assetData.name,\r\n    assetSerial: state.assetData.serial,\r\n    assetImage: state.assetData.image,\r\n    assetStatus:state.assetData.status,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    getAssetDetails: (assetIDParameterForGetAssetDetails) => { dispatch(checkInSelectedAssetStart(assetIDParameterForGetAssetDetails))}\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomButton);\r\n"]},"metadata":{},"sourceType":"module"}