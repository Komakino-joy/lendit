{"ast":null,"code":"import { call, put, takeLatest, all } from \"redux-saga/effects\";\nimport { REQUEST_SELECTED_ASSET, CHECK_IN_SELECTED_ASSET_START, CHECK_OUT_SELECTED_ASSET_START, QUARANTINE_SELECTED_ASSET_START, receiveSelectedAssetData, checkInSelectedAssetSuccess, checkOutSelectedAssetSuccess, quarantineSelectedAssetSuccess, REMOVE_SELECTED_ASSET } from \"../asset/asset.actions\";\nimport { fetchSelectedAssetData, checkInAsset, checkOutAsset, quarantineAsset, removeAsset } from \"../../services/api\"; // worker Saga: will be fired on USER_FETCH_REQUESTED actions\n\nfunction* getRequestedSelectedAssetData(action) {\n  try {\n    // do api call\n    const assetData = yield call(fetchSelectedAssetData, action.assetID);\n    yield put(receiveSelectedAssetData(assetData));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n;\nexport function* requestSelectedAssetSaga() {\n  yield takeLatest(REQUEST_SELECTED_ASSET, getRequestedSelectedAssetData);\n}\n;\n\nfunction* postCheckInSelectedAsset(action) {\n  try {\n    const assetData = yield call(checkInAsset, action.assetID);\n    yield put(checkInSelectedAssetSuccess(assetData));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n;\nexport function* checkInSelectedAssetSaga() {\n  yield takeLatest(CHECK_IN_SELECTED_ASSET_START, postCheckInSelectedAsset);\n}\n;\n\nfunction* postCheckOutSelectedAsset(action) {\n  try {\n    const assetData = yield call(checkOutAsset, action.assetID, action.userID);\n    yield put(checkOutSelectedAssetSuccess(assetData));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n;\nexport function* checkOutSelectedAssetSaga() {\n  yield takeLatest(CHECK_OUT_SELECTED_ASSET_START, postCheckOutSelectedAsset);\n}\n;\n\nfunction* postQuarantineSelectedAsset(action) {\n  try {\n    const assetData = yield call(quarantineAsset, action.assetID, action.quarantineReason);\n    yield put(quarantineSelectedAssetSuccess(assetData));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n;\nexport function* quarantineSelectedAssetSaga() {\n  yield takeLatest(QUARANTINE_SELECTED_ASSET_START, postQuarantineSelectedAsset);\n}\n;\n\nfunction* postDeleteSelectedAsset(action) {\n  try {\n    const assetData = yield call(quarantineAsset, action.assetID, action.quarantineReason);\n    yield put(quarantineSelectedAssetSuccess(assetData));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n;\nexport function* removeSelectedAssetSaga() {\n  yield takeLatest(REMOVE_SELECTED_ASSET, postDeleteSelectedAsset);\n}\n;\nexport function* assetSagas() {\n  yield all([call(requestSelectedAssetSaga), call(checkInSelectedAssetSaga), call(checkOutSelectedAssetSaga), call(quarantineSelectedAssetSaga), call(removeSelectedAssetSaga)]);\n}\n;","map":{"version":3,"sources":["C:/Users/bryan.alvarez/Documents/webdev/git/comp-overload/client/src/redux/asset/asset.sagas.js"],"names":["call","put","takeLatest","all","REQUEST_SELECTED_ASSET","CHECK_IN_SELECTED_ASSET_START","CHECK_OUT_SELECTED_ASSET_START","QUARANTINE_SELECTED_ASSET_START","receiveSelectedAssetData","checkInSelectedAssetSuccess","checkOutSelectedAssetSuccess","quarantineSelectedAssetSuccess","REMOVE_SELECTED_ASSET","fetchSelectedAssetData","checkInAsset","checkOutAsset","quarantineAsset","removeAsset","getRequestedSelectedAssetData","action","assetData","assetID","error","console","log","requestSelectedAssetSaga","postCheckInSelectedAsset","checkInSelectedAssetSaga","postCheckOutSelectedAsset","userID","checkOutSelectedAssetSaga","postQuarantineSelectedAsset","quarantineReason","quarantineSelectedAssetSaga","postDeleteSelectedAsset","removeSelectedAssetSaga","assetSagas"],"mappings":"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","sourcesContent":["import { call, put, takeLatest, all } from \"redux-saga/effects\";\r\n\r\nimport { \r\n    REQUEST_SELECTED_ASSET,\r\n    CHECK_IN_SELECTED_ASSET_START,\r\n    CHECK_OUT_SELECTED_ASSET_START,\r\n    QUARANTINE_SELECTED_ASSET_START,\r\n    receiveSelectedAssetData,\r\n    checkInSelectedAssetSuccess,\r\n    checkOutSelectedAssetSuccess, \r\n    quarantineSelectedAssetSuccess, \r\n    REMOVE_SELECTED_ASSET\r\n   } from \"../asset/asset.actions\";\r\n\r\nimport { \r\n  fetchSelectedAssetData,\r\n  checkInAsset,\r\n  checkOutAsset,\r\n  quarantineAsset, \r\n  removeAsset\r\n } from \"../../services/api\";\r\n\r\n// worker Saga: will be fired on USER_FETCH_REQUESTED actions\r\nfunction* getRequestedSelectedAssetData(action) {\r\n  try {\r\n    // do api call\r\n    const assetData = yield call(fetchSelectedAssetData, action.assetID);\r\n    yield put(receiveSelectedAssetData(assetData));\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport  function* requestSelectedAssetSaga() {\r\n  yield takeLatest(REQUEST_SELECTED_ASSET, getRequestedSelectedAssetData);\r\n};\r\n\r\nfunction* postCheckInSelectedAsset(action) {\r\n  try{\r\n    const assetData = yield call(checkInAsset, action.assetID )\r\n    yield put(checkInSelectedAssetSuccess(assetData))\r\n  }  catch (error) {\r\n    console.log(error)\r\n  }\r\n};\r\n\r\nexport  function* checkInSelectedAssetSaga() {\r\n  yield takeLatest(CHECK_IN_SELECTED_ASSET_START, postCheckInSelectedAsset);\r\n};\r\n\r\nfunction* postCheckOutSelectedAsset(action) {\r\n  try{\r\n    const assetData = yield call(checkOutAsset, action.assetID, action.userID )\r\n    yield put(checkOutSelectedAssetSuccess(assetData))\r\n  }  catch (error) {\r\n    console.log(error)\r\n  }\r\n};\r\n\r\nexport  function* checkOutSelectedAssetSaga() {\r\n  yield takeLatest(CHECK_OUT_SELECTED_ASSET_START, postCheckOutSelectedAsset);\r\n};\r\n\r\nfunction* postQuarantineSelectedAsset(action) {\r\n  try{\r\n    const assetData = yield call(quarantineAsset, action.assetID, action.quarantineReason )\r\n    yield put(quarantineSelectedAssetSuccess(assetData))\r\n  }  catch (error) {\r\n    console.log(error)\r\n  }\r\n};\r\n\r\nexport  function* quarantineSelectedAssetSaga() {\r\n  yield takeLatest(QUARANTINE_SELECTED_ASSET_START, postQuarantineSelectedAsset);\r\n};\r\n\r\n\r\n\r\n\r\nfunction* postDeleteSelectedAsset(action) {\r\n  try{\r\n    const assetData = yield call(quarantineAsset, action.assetID, action.quarantineReason )\r\n    yield put(quarantineSelectedAssetSuccess(assetData))\r\n  }  catch (error) {\r\n    console.log(error)\r\n  }\r\n};\r\n\r\nexport  function* removeSelectedAssetSaga() {\r\n  yield takeLatest(REMOVE_SELECTED_ASSET, postDeleteSelectedAsset);\r\n};\r\n\r\n\r\n\r\n\r\n\r\nexport function* assetSagas() {\r\n    yield all([\r\n      call(requestSelectedAssetSaga), \r\n      call(checkInSelectedAssetSaga),\r\n      call(checkOutSelectedAssetSaga),\r\n      call(quarantineSelectedAssetSaga),\r\n      call(removeSelectedAssetSaga)\r\n    ])\r\n};"]},"metadata":{},"sourceType":"module"}