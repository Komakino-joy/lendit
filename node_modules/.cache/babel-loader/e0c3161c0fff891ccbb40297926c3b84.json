{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\alvar\\\\Documents\\\\1.Web Development Projects\\\\FINAL_COPIES_OF_PROJECTS\\\\lendit\\\\lendit\\\\src\\\\components\\\\modals\\\\activity-tracking.modal.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from 'reselect';\nimport { currentMemberId } from \"../../redux/site-member/site-member.selectors\";\nimport { selectAssets } from \"../../redux/drop-downs/drop-down.selectors\";\nimport { selectUsers } from \"../../redux/drop-downs/drop-down.selectors\";\nimport { seenActivityReport } from \"../../redux/modal/modal.selectors\";\nimport ActivityReport from \"./activity-report.modal\";\nimport { toggleActvityTracking, toggleActvityReport } from \"../../redux/modal/modal.actions\";\nimport { useHours, useMinutes } from 'react-datepicker';\nimport CustomDropDown from '../custom-drop-down/custom-drop-down.component';\nimport { ModalMain, ModalContent, CloseButton, Header, Article, FieldSet, Label, ActivitySubmit, ModalDate } from \"./modal.styles\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst ActivityTracking = ({\n  toggleActvityTracking,\n  toggleActvityReport,\n  assets,\n  users,\n  seenActivityReport\n}) => {\n  _s();\n\n  const setHours = useHours();\n  const setMinutes = useMinutes();\n  const [startDate, setStartDate] = useState(setHours(setMinutes(new Date(), 0), 24));\n  const [endDate, setEndDate] = useState(setHours(setMinutes(new Date(), 0), 24));\n\n  const filterPassedTime = time => {\n    const currentDate = new Date();\n    const selectedDate = new Date(time);\n    return currentDate.getTime() < selectedDate.getTime();\n  };\n\n  const [assetID, setAssetID] = useState('%');\n  const [userID, setUserID] = useState('%');\n\n  const onAssetIDChange = event => {\n    setAssetID(event.target.value);\n  };\n\n  const onUserIDChange = event => {\n    setUserID(event.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(ModalMain, {\n    children: [/*#__PURE__*/_jsxDEV(ModalContent, {\n      children: [/*#__PURE__*/_jsxDEV(CloseButton, {\n        onClick: toggleActvityTracking,\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Header, {\n        children: \"Activity Tracking\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Article, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          action: \"activity-tracking\",\n          method: \"get\",\n          acceptCharset: \"utf-8\",\n          children: [/*#__PURE__*/_jsxDEV(FieldSet, {\n            id: \"activity-tracking\",\n            children: [/*#__PURE__*/_jsxDEV(Label, {\n              htmlFor: \"start-date\",\n              children: \"Start Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(ModalDate, {\n              selected: startDate,\n              timeInputLabel: \"Time:\",\n              dateFormat: \"MM/dd/yyyy h:mm aa\",\n              showTimeInput: true,\n              filterTime: filterPassedTime,\n              onChange: date => setStartDate(date),\n              fixedHeight: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Label, {\n              htmlFor: \"end-date\",\n              children: \"End Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(ModalDate, {\n              selected: endDate,\n              timeInputLabel: \"Time:\",\n              dateFormat: \"MM/dd/yyyy h:mm aa\",\n              showTimeInput: true,\n              onChange: date => setEndDate(date),\n              fixedHeight: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Label, {\n              htmlFor: \"asset-id\",\n              children: \"Asset ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(CustomDropDown, {\n              isActivitySelection: true,\n              onChange: onAssetIDChange,\n              type: \"text\",\n              name: \"asset-id\",\n              id: \"asset-id\",\n              optionList: assets\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Label, {\n              htmlFor: \"user-id\",\n              children: \"User ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(CustomDropDown, {\n              isActivitySelection: true,\n              onChange: onUserIDChange,\n              type: \"text\",\n              name: \"user-id\",\n              id: \"user-id\",\n              optionList: users\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ActivitySubmit, {\n            onClick: toggleActvityReport,\n            type: \"submit\",\n            defaultValue: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), seenActivityReport ? /*#__PURE__*/_jsxDEV(ActivityReport, {\n      startDate: startDate.getTime(),\n      endDate: endDate.getTime(),\n      assetID: assetID,\n      userID: userID\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 4\n  }, this);\n};\n\n_s(ActivityTracking, \"hnRn15gL6WJA5+uTXAiK15VorRE=\", false, function () {\n  return [useHours, useMinutes];\n});\n\n_c = ActivityTracking;\nconst mapStateToProps = createStructuredSelector({\n  memberId: currentMemberId,\n  assets: selectAssets,\n  users: selectUsers,\n  seenActivityReport\n});\n\nconst mapDispatchToProps = dispatch => ({\n  toggleActvityTracking: () => dispatch(toggleActvityTracking()),\n  toggleActvityReport: () => dispatch(toggleActvityReport())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ActivityTracking);\n\nvar _c;\n\n$RefreshReg$(_c, \"ActivityTracking\");","map":{"version":3,"sources":["C:/Users/alvar/Documents/1.Web Development Projects/FINAL_COPIES_OF_PROJECTS/lendit/lendit/src/components/modals/activity-tracking.modal.jsx"],"names":["React","useState","connect","createStructuredSelector","currentMemberId","selectAssets","selectUsers","seenActivityReport","ActivityReport","toggleActvityTracking","toggleActvityReport","useHours","useMinutes","CustomDropDown","ModalMain","ModalContent","CloseButton","Header","Article","FieldSet","Label","ActivitySubmit","ModalDate","ActivityTracking","assets","users","setHours","setMinutes","startDate","setStartDate","Date","endDate","setEndDate","filterPassedTime","time","currentDate","selectedDate","getTime","assetID","setAssetID","userID","setUserID","onAssetIDChange","event","target","value","onUserIDChange","date","mapStateToProps","memberId","mapDispatchToProps","dispatch"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,wBAAT,QAAyC,UAAzC;AAEA,SAASC,eAAT,QAAgC,+CAAhC;AACA,SAASC,YAAT,QAA6B,4CAA7B;AACA,SAASC,WAAT,QAA4B,4CAA5B;AACA,SAASC,kBAAT,QAAmC,mCAAnC;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AACA,SAASC,qBAAT,EAAgCC,mBAAhC,QAA2D,iCAA3D;AAEA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,kBAArC;AAEA,OAAOC,cAAP,MAA2B,gDAA3B;AAEA,SAASC,SAAT,EAAoBC,YAApB,EAAkCC,WAAlC,EAA+CC,MAA/C,EAAuDC,OAAvD,EACEC,QADF,EACYC,KADZ,EACmBC,cADnB,EACmCC,SADnC,QAEO,gBAFP;AAIA,OAAO,4CAAP;;AAEA,MAAMC,gBAAgB,GAAG,CAAE;AAACd,EAAAA,qBAAD;AAAwBC,EAAAA,mBAAxB;AAA6Cc,EAAAA,MAA7C;AAAqDC,EAAAA,KAArD;AAA4DlB,EAAAA;AAA5D,CAAF,KAAsF;AAAA;;AAC7G,QAAMmB,QAAQ,GAAGf,QAAQ,EAAzB;AACA,QAAMgB,UAAU,GAAGf,UAAU,EAA7B;AAEA,QAAM,CAACgB,SAAD,EAAYC,YAAZ,IAA4B5B,QAAQ,CACxCyB,QAAQ,CAACC,UAAU,CAAC,IAAIG,IAAJ,EAAD,EAAa,CAAb,CAAX,EAA4B,EAA5B,CADgC,CAA1C;AAGA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwB/B,QAAQ,CACpCyB,QAAQ,CAACC,UAAU,CAAC,IAAIG,IAAJ,EAAD,EAAa,CAAb,CAAX,EAA4B,EAA5B,CAD4B,CAAtC;;AAIA,QAAMG,gBAAgB,GAAGC,IAAI,IAAI;AAC/B,UAAMC,WAAW,GAAG,IAAIL,IAAJ,EAApB;AACA,UAAMM,YAAY,GAAG,IAAIN,IAAJ,CAASI,IAAT,CAArB;AAEA,WAAOC,WAAW,CAACE,OAAZ,KAAwBD,YAAY,CAACC,OAAb,EAA/B;AACD,GALD;;AAOA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBtC,QAAQ,CAAC,GAAD,CAAtC;AACA,QAAM,CAACuC,MAAD,EAASC,SAAT,IAAsBxC,QAAQ,CAAC,GAAD,CAApC;;AAGA,QAAMyC,eAAe,GAAIC,KAAD,IAAW;AACjCJ,IAAAA,UAAU,CAACI,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAV;AACD,GAFD;;AAIA,QAAMC,cAAc,GAAIH,KAAD,IAAW;AAChCF,IAAAA,SAAS,CAACE,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAT;AACD,GAFD;;AAIA,sBACC,QAAC,SAAD;AAAA,4BACG,QAAC,YAAD;AAAA,8BAEE,QAAC,WAAD;AAAa,QAAA,OAAO,EAAEpC,qBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE,QAAC,OAAD;AAAA,+BACE;AAAK,UAAA,MAAM,EAAC,mBAAZ;AAAgC,UAAA,MAAM,EAAC,KAAvC;AAA6C,UAAA,aAAa,EAAC,OAA3D;AAAA,kCACE,QAAC,QAAD;AAAU,YAAA,EAAE,EAAC,mBAAb;AAAA,oCACI,QAAC,KAAD;AAAO,cAAA,OAAO,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI,QAAC,SAAD;AACE,cAAA,QAAQ,EAAEmB,SADZ;AAEE,cAAA,cAAc,EAAC,OAFjB;AAGE,cAAA,UAAU,EAAC,oBAHb;AAIE,cAAA,aAAa,MAJf;AAKE,cAAA,UAAU,EAAEK,gBALd;AAME,cAAA,QAAQ,EAAEc,IAAI,IAAIlB,YAAY,CAACkB,IAAD,CANhC;AAOE,cAAA,WAAW;AAPb;AAAA;AAAA;AAAA;AAAA,oBAFJ,eAWI,QAAC,KAAD;AAAO,cAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAXJ,eAYI,QAAC,SAAD;AACE,cAAA,QAAQ,EAAEhB,OADZ;AAEE,cAAA,cAAc,EAAC,OAFjB;AAGE,cAAA,UAAU,EAAC,oBAHb;AAIE,cAAA,aAAa,MAJf;AAKE,cAAA,QAAQ,EAAEgB,IAAI,IAAIf,UAAU,CAACe,IAAD,CAL9B;AAME,cAAA,WAAW;AANb;AAAA;AAAA;AAAA;AAAA,oBAZJ,eAoBI,QAAC,KAAD;AAAO,cAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBApBJ,eAqBI,QAAC,cAAD;AAAgB,cAAA,mBAAmB,MAAnC;AAAoC,cAAA,QAAQ,EAAEL,eAA9C;AAA+D,cAAA,IAAI,EAAC,MAApE;AAA2E,cAAA,IAAI,EAAC,UAAhF;AAA4F,cAAA,EAAE,EAAC,UAA/F;AAA0G,cAAA,UAAU,EAAElB;AAAtH;AAAA;AAAA;AAAA;AAAA,oBArBJ,eAsBI,QAAC,KAAD;AAAO,cAAA,OAAO,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAtBJ,eAuBI,QAAC,cAAD;AAAgB,cAAA,mBAAmB,MAAnC;AAAoC,cAAA,QAAQ,EAAEsB,cAA9C;AAA8D,cAAA,IAAI,EAAC,MAAnE;AAA0E,cAAA,IAAI,EAAC,SAA/E;AAA0F,cAAA,EAAE,EAAC,SAA7F;AAAuG,cAAA,UAAU,EAAErB;AAAnH;AAAA;AAAA;AAAA;AAAA,oBAvBJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eA0BE,QAAC,cAAD;AAAgB,YAAA,OAAO,EAAEf,mBAAzB;AAA8C,YAAA,IAAI,EAAG,QAArD;AAA8D,YAAA,YAAY,EAAC;AAA3E;AAAA;AAAA;AAAA;AAAA,kBA1BF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YADH,EAqCKH,kBAAkB,gBAClB,QAAC,cAAD;AACE,MAAA,SAAS,EAAEqB,SAAS,CAACS,OAAV,EADb;AAEE,MAAA,OAAO,EAAEN,OAAO,CAACM,OAAR,EAFX;AAGE,MAAA,OAAO,EAAEC,OAHX;AAIE,MAAA,MAAM,EAAEE;AAJV;AAAA;AAAA;AAAA;AAAA,YADkB,GAOhB,IA5CP;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAiDD,CA/ED;;GAAMjB,gB;UACaZ,Q,EACEC,U;;;KAFfW,gB;AAiFN,MAAMyB,eAAe,GAAG7C,wBAAwB,CAAC;AAC/C8C,EAAAA,QAAQ,EAAE7C,eADqC;AAE/CoB,EAAAA,MAAM,EAAEnB,YAFuC;AAG/CoB,EAAAA,KAAK,EAAEnB,WAHwC;AAI/CC,EAAAA;AAJ+C,CAAD,CAAhD;;AAOA,MAAM2C,kBAAkB,GAAIC,QAAD,KAAe;AACxC1C,EAAAA,qBAAqB,EAAG,MAAM0C,QAAQ,CAAC1C,qBAAqB,EAAtB,CADE;AAExCC,EAAAA,mBAAmB,EAAG,MAAMyC,QAAQ,CAACzC,mBAAmB,EAApB;AAFI,CAAf,CAA3B;;AAKA,eAAeR,OAAO,CAAC8C,eAAD,EAAkBE,kBAAlB,CAAP,CAA6C3B,gBAA7C,CAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { createStructuredSelector } from 'reselect';\r\n\r\nimport { currentMemberId } from \"../../redux/site-member/site-member.selectors\";\r\nimport { selectAssets } from \"../../redux/drop-downs/drop-down.selectors\";\r\nimport { selectUsers } from \"../../redux/drop-downs/drop-down.selectors\";\r\nimport { seenActivityReport } from \"../../redux/modal/modal.selectors\";\r\nimport ActivityReport from \"./activity-report.modal\";\r\nimport { toggleActvityTracking, toggleActvityReport } from \"../../redux/modal/modal.actions\";\r\n\r\nimport { useHours, useMinutes } from 'react-datepicker';\r\n\r\nimport CustomDropDown from '../custom-drop-down/custom-drop-down.component';\r\n\r\nimport { ModalMain, ModalContent, CloseButton, Header, Article,\r\n  FieldSet, Label, ActivitySubmit, ModalDate\r\n} from \"./modal.styles\";\r\n\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nconst ActivityTracking = ( {toggleActvityTracking, toggleActvityReport, assets, users, seenActivityReport} ) =>{\r\n  const setHours = useHours()\r\n  const setMinutes = useMinutes()\r\n\r\n  const [startDate, setStartDate] = useState(\r\n    setHours(setMinutes(new Date(), 0), 24)\r\n  );\r\n  const [endDate, setEndDate] = useState(\r\n    setHours(setMinutes(new Date(), 0), 24)\r\n  );\r\n\r\n  const filterPassedTime = time => {\r\n    const currentDate = new Date();\r\n    const selectedDate = new Date(time);\r\n\r\n    return currentDate.getTime() < selectedDate.getTime();\r\n  }\r\n\r\n  const [assetID, setAssetID] = useState('%');\r\n  const [userID, setUserID] = useState('%');\r\n\r\n\r\n  const onAssetIDChange = (event) => {\r\n    setAssetID(event.target.value);\r\n  };\r\n\r\n  const onUserIDChange = (event) => {\r\n    setUserID(event.target.value);\r\n  };\r\n\r\n  return (\r\n   <ModalMain>\r\n      <ModalContent>\r\n        {/* Retrieve updated list of users when modal is closed. */}\r\n        <CloseButton onClick={toggleActvityTracking}>&times;</CloseButton>\r\n        <Header>Activity Tracking</Header>\r\n        <Article>\r\n          <div action=\"activity-tracking\" method=\"get\" acceptCharset=\"utf-8\">\r\n            <FieldSet id=\"activity-tracking\">\r\n                <Label htmlFor=\"start-date\">Start Date</Label>\r\n                <ModalDate \r\n                  selected={startDate} \r\n                  timeInputLabel=\"Time:\"\r\n                  dateFormat=\"MM/dd/yyyy h:mm aa\"\r\n                  showTimeInput\r\n                  filterTime={filterPassedTime}\r\n                  onChange={date => setStartDate(date)} \r\n                  fixedHeight\r\n                />\r\n                <Label htmlFor=\"end-date\">End Date</Label>\r\n                <ModalDate\r\n                  selected={endDate}       \r\n                  timeInputLabel=\"Time:\"\r\n                  dateFormat=\"MM/dd/yyyy h:mm aa\"\r\n                  showTimeInput \r\n                  onChange={date => setEndDate(date)} \r\n                  fixedHeight\r\n                />\r\n                <Label htmlFor=\"asset-id\">Asset ID</Label>\r\n                <CustomDropDown isActivitySelection onChange={onAssetIDChange} type=\"text\" name=\"asset-id\"  id=\"asset-id\" optionList={assets}/>\r\n                <Label htmlFor=\"user-id\">User ID</Label>\r\n                <CustomDropDown isActivitySelection onChange={onUserIDChange} type=\"text\" name=\"user-id\"  id=\"user-id\" optionList={users}/>\r\n            </FieldSet>\r\n            <ActivitySubmit onClick={toggleActvityReport} type = \"submit\" defaultValue=\"Submit\"/>\r\n          </div>\r\n        </Article>\r\n      </ModalContent>\r\n      {\r\n        seenActivityReport ? \r\n        <ActivityReport  \r\n          startDate={startDate.getTime()} \r\n          endDate={endDate.getTime()}\r\n          assetID={assetID}\r\n          userID={userID} \r\n          /> \r\n        : null\r\n      }\r\n   </ModalMain>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  memberId: currentMemberId,\r\n  assets: selectAssets,\r\n  users: selectUsers,\r\n  seenActivityReport\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  toggleActvityTracking : () => dispatch(toggleActvityTracking()),\r\n  toggleActvityReport : () => dispatch(toggleActvityReport())\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ActivityTracking);"]},"metadata":{},"sourceType":"module"}