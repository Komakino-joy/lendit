{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\alvar\\\\Documents\\\\WebDev\\\\lendit\\\\lendit\\\\src\\\\components\\\\drop-down-container\\\\drop-down-container.component.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from 'reselect';\nimport selectedListItemID from \"../custom-drop-down/drop-down.utils\";\nimport { requestSelectedUserData } from \"../../redux/user/user.actions\";\nimport { requestSelectedAssetData } from \"../../redux/asset/asset.actions\";\nimport { requestAssetDropDownOptions, requestUserDropDownOptions } from '../../redux/drop-downs/drop-down.actions';\nimport { currentMemberId } from \"../../redux/site-member/site-member.selectors\";\nimport { selectUsers, selectAssets } from \"../../redux/drop-downs/drop-down.selectors\";\nimport CustomDropDown from '../custom-drop-down/custom-drop-down.component';\nimport { DropDownContainer, DropDownInner, Tag } from \"./drop-down-container.styles\";\n\nconst ScanboxContainer = ({\n  memberId,\n  assets,\n  users,\n  requestAssetDropDownOptions,\n  requestUserDropDownOptions,\n  requestSelectedAssetData,\n  requestSelectedUserData\n}) => {\n  _s();\n\n  useEffect(() => {\n    // Get Data from /allunits.\n    requestAssetDropDownOptions(memberId);\n  }, [requestAssetDropDownOptions, memberId]); //\n\n  useEffect(() => {\n    // Get Data from /allusers when component mounts.\n    requestUserDropDownOptions(memberId);\n  }, [requestUserDropDownOptions, memberId]);\n  return /*#__PURE__*/_jsxDEV(DropDownContainer, {\n    children: /*#__PURE__*/_jsxDEV(DropDownInner, {\n      children: [/*#__PURE__*/_jsxDEV(Tag, {\n        children: \"ASSET ID\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CustomDropDown, {\n        isHomePage: true,\n        onChange: () => requestSelectedAssetData(selectedListItemID('asset-list'), memberId),\n        id: \"asset-list\",\n        optionList: assets\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Tag, {\n        children: \"USER ID\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CustomDropDown, {\n        isHomePage: true,\n        onChange: requestSelectedUserData,\n        id: \"user-list\",\n        optionList: users\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ScanboxContainer, \"3ubReDTFssvu4DHeldAg55cW/CI=\");\n\n_c = ScanboxContainer;\nconst mapStateToProps = createStructuredSelector({\n  memberId: currentMemberId,\n  assets: selectAssets,\n  users: selectUsers\n});\n\nconst mapDispatchToProps = dispatch => ({\n  requestSelectedAssetData: (assetId, ownerId) => {\n    dispatch(requestSelectedAssetData({\n      assetId,\n      ownerId\n    }));\n  },\n  requestAssetDropDownOptions: memberId => {\n    dispatch(requestAssetDropDownOptions(memberId));\n  },\n  requestUserDropDownOptions: memberId => {\n    dispatch(requestUserDropDownOptions(memberId));\n  },\n  requestSelectedUserData: () => {\n    dispatch(requestSelectedUserData(selectedListItemID('user-list')));\n  }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ScanboxContainer);\n\nvar _c;\n\n$RefreshReg$(_c, \"ScanboxContainer\");","map":{"version":3,"sources":["C:/Users/alvar/Documents/WebDev/lendit/lendit/src/components/drop-down-container/drop-down-container.component.jsx"],"names":["React","useEffect","connect","createStructuredSelector","selectedListItemID","requestSelectedUserData","requestSelectedAssetData","requestAssetDropDownOptions","requestUserDropDownOptions","currentMemberId","selectUsers","selectAssets","CustomDropDown","DropDownContainer","DropDownInner","Tag","ScanboxContainer","memberId","assets","users","mapStateToProps","mapDispatchToProps","dispatch","assetId","ownerId"],"mappings":"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","sourcesContent":["import React, {useEffect}  from 'react'\r\nimport { connect } from \"react-redux\";\r\nimport { createStructuredSelector } from 'reselect';\r\n\r\nimport  selectedListItemID  from \"../custom-drop-down/drop-down.utils\";\r\n\r\nimport { requestSelectedUserData } from \"../../redux/user/user.actions\";\r\nimport { requestSelectedAssetData } from \"../../redux/asset/asset.actions\";\r\n\r\nimport { \r\n    requestAssetDropDownOptions, \r\n    requestUserDropDownOptions \r\n    } from '../../redux/drop-downs/drop-down.actions'\r\n\r\nimport { currentMemberId } from \"../../redux/site-member/site-member.selectors\";\r\nimport { selectUsers, selectAssets } from \"../../redux/drop-downs/drop-down.selectors\";\r\n\r\nimport CustomDropDown from '../custom-drop-down/custom-drop-down.component';\r\nimport {DropDownContainer, DropDownInner, Tag } from \"./drop-down-container.styles\";\r\n\r\n\r\nconst ScanboxContainer = ({ \r\n    memberId, assets, users, \r\n    requestAssetDropDownOptions, \r\n    requestUserDropDownOptions, \r\n    requestSelectedAssetData, \r\n    requestSelectedUserData}) => {\r\n    \r\n    useEffect(() => {\r\n        // Get Data from /allunits.\r\n        requestAssetDropDownOptions(memberId)\r\n      }, [requestAssetDropDownOptions, memberId]); //\r\n\r\n      useEffect(() => {\r\n        // Get Data from /allusers when component mounts.\r\n        requestUserDropDownOptions(memberId)\r\n      }, [requestUserDropDownOptions, memberId]);  \r\n\r\n    return (\r\n        <DropDownContainer>\r\n            <DropDownInner>\r\n                <Tag>ASSET ID</Tag>\r\n                <CustomDropDown isHomePage  onChange={() => requestSelectedAssetData(selectedListItemID('asset-list'), memberId)} id=\"asset-list\" optionList={assets}/> \r\n                <Tag>USER ID</Tag>\r\n                <CustomDropDown isHomePage onChange={requestSelectedUserData} id=\"user-list\" optionList={users}/> \r\n            </DropDownInner>\r\n        </DropDownContainer>\r\n    )}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    memberId: currentMemberId,\r\n    assets: selectAssets,\r\n    users: selectUsers\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    requestSelectedAssetData: (assetId, ownerId) => { dispatch(requestSelectedAssetData({assetId, ownerId}))},\r\n    requestAssetDropDownOptions: (memberId) => { dispatch(requestAssetDropDownOptions(memberId))},\r\n    requestUserDropDownOptions: (memberId) => { dispatch( requestUserDropDownOptions(memberId)) },\r\n    requestSelectedUserData: () => { dispatch( requestSelectedUserData ( selectedListItemID('user-list') ) )},\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ScanboxContainer);"]},"metadata":{},"sourceType":"module"}