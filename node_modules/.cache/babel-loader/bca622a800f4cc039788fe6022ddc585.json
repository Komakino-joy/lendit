{"ast":null,"code":"import { CurrentAssetStatus } from \"./asset.selectors\";\nexport const REQUEST_SELECTED_ASSET = \"REQUEST_SELECTED_ASSET\";\nexport const RECEIVE_SELECTED_ASSET = \"RECEIVE_SELECTED_ASSET\";\nexport const CHECK_IN_SELECTED_ASSET_START = \"CHECK_IN_SELECTED_ASSET_START\";\nexport const CHECK_IN_SELECTED_ASSET_SUCCESS = \"CHECK_IN_SELECTED_ASSET_SUCCESS\";\nexport const requestSelectedAssetData = assetID => ({\n  type: REQUEST_SELECTED_ASSET,\n  assetID\n});\nexport const receiveSelectedAssetData = assetData => ({\n  type: RECEIVE_SELECTED_ASSET,\n  assetData\n});\nexport const checkInSelectedAssetStart = assetID => ({\n  type: CHECK_IN_SELECTED_ASSET_START,\n  assetID\n});\nexport const checkInSelectedAssetSuccess = assetData => ({\n  type: CHECK_IN_SELECTED_ASSET_SUCCESS,\n  assetData\n});\nexport const fetchCollectionsStartAsync = () => {\n  return dispatch => {\n    const collectionRef = firestore.collection('collections'); //This is allowed because of redux-thunk library\n\n    dispatch(checkInSelectedAssetStart());\n    collectionRef.get().then(snapshot => {\n      const collectionsMap = CurrentAssetStatus(snapshot);\n      dispatch(fetchCollectionsSuccess(collectionsMap));\n    }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n  };\n};","map":{"version":3,"sources":["C:/Users/alvar/Documents/WebDev/comp-overload/src/redux/asset/asset.actions.js"],"names":["CurrentAssetStatus","REQUEST_SELECTED_ASSET","RECEIVE_SELECTED_ASSET","CHECK_IN_SELECTED_ASSET_START","CHECK_IN_SELECTED_ASSET_SUCCESS","requestSelectedAssetData","assetID","type","receiveSelectedAssetData","assetData","checkInSelectedAssetStart","checkInSelectedAssetSuccess","fetchCollectionsStartAsync","dispatch","collectionRef","firestore","collection","get","then","snapshot","collectionsMap","fetchCollectionsSuccess","catch","error","fetchCollectionsFailure","message"],"mappings":"AAAA,SAASA,kBAAT,QAAmC,mBAAnC;AAEA,OAAO,MAAMC,sBAAsB,GAAG,wBAA/B;AACP,OAAO,MAAMC,sBAAsB,GAAG,wBAA/B;AACP,OAAO,MAAMC,6BAA6B,GAAG,+BAAtC;AACP,OAAO,MAAMC,+BAA+B,GAAG,iCAAxC;AAGP,OAAO,MAAMC,wBAAwB,GAAIC,OAAD,KAAc;AAClDC,EAAAA,IAAI,EAAEN,sBAD4C;AACpBK,EAAAA;AADoB,CAAd,CAAjC;AAIP,OAAO,MAAME,wBAAwB,GAAIC,SAAD,KAAgB;AACnDF,EAAAA,IAAI,EAAEL,sBAD6C;AACrBO,EAAAA;AADqB,CAAhB,CAAjC;AAIP,OAAO,MAAMC,yBAAyB,GAAIJ,OAAD,KAAc;AACnDC,EAAAA,IAAI,EAAEJ,6BAD6C;AACdG,EAAAA;AADc,CAAd,CAAlC;AAIP,OAAO,MAAMK,2BAA2B,GAAIF,SAAD,KAAgB;AACvDF,EAAAA,IAAI,EAAEH,+BADiD;AAChBK,EAAAA;AADgB,CAAhB,CAApC;AAIP,OAAO,MAAMG,0BAA0B,GAAG,MAAM;AAC5C,SAAOC,QAAQ,IAAI;AACf,UAAMC,aAAa,GAAGC,SAAS,CAACC,UAAV,CAAqB,aAArB,CAAtB,CADe,CAGf;;AACAH,IAAAA,QAAQ,CAACH,yBAAyB,EAA1B,CAAR;AAEAI,IAAAA,aAAa,CAACG,GAAd,GAAoBC,IAApB,CAAyBC,QAAQ,IAAI;AACjC,YAAMC,cAAc,GAAIpB,kBAAkB,CAACmB,QAAD,CAA1C;AACAN,MAAAA,QAAQ,CAACQ,uBAAuB,CAACD,cAAD,CAAxB,CAAR;AACH,KAHD,EAGGE,KAHH,CAGSC,KAAK,IAAIV,QAAQ,CAACW,uBAAuB,CAACD,KAAK,CAACE,OAAP,CAAxB,CAH1B;AAIH,GAVD;AAWH,CAZM","sourcesContent":["import { CurrentAssetStatus } from \"./asset.selectors\";\r\n\r\nexport const REQUEST_SELECTED_ASSET = \"REQUEST_SELECTED_ASSET\";\r\nexport const RECEIVE_SELECTED_ASSET = \"RECEIVE_SELECTED_ASSET\";\r\nexport const CHECK_IN_SELECTED_ASSET_START = \"CHECK_IN_SELECTED_ASSET_START\";\r\nexport const CHECK_IN_SELECTED_ASSET_SUCCESS = \"CHECK_IN_SELECTED_ASSET_SUCCESS\";\r\n\r\n\r\nexport const requestSelectedAssetData = (assetID) => ({ \r\n    type: REQUEST_SELECTED_ASSET, assetID\r\n});\r\n\r\nexport const receiveSelectedAssetData = (assetData) => ({\r\n     type: RECEIVE_SELECTED_ASSET, assetData\r\n});\r\n\r\nexport const checkInSelectedAssetStart = (assetID) => ({\r\n    type: CHECK_IN_SELECTED_ASSET_START, assetID\r\n});\r\n\r\nexport const checkInSelectedAssetSuccess = (assetData) => ({\r\n    type: CHECK_IN_SELECTED_ASSET_SUCCESS, assetData\r\n});\r\n\r\nexport const fetchCollectionsStartAsync = () => {\r\n    return dispatch => {\r\n        const collectionRef = firestore.collection('collections')\r\n        \r\n        //This is allowed because of redux-thunk library\r\n        dispatch(checkInSelectedAssetStart());\r\n\r\n        collectionRef.get().then(snapshot => {\r\n            const collectionsMap =  CurrentAssetStatus(snapshot);\r\n            dispatch(fetchCollectionsSuccess(collectionsMap));\r\n        }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}