{"ast":null,"code":"import { all, call, takeLatest, put } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { httpRegisterUser } from '../../services/api';\nimport SiteMemberActionTypes from './site-member.types';\nimport { registrationFailure, registrationSuccess } from './site-member.actions';\nexport function* register({\n  payload: {\n    fname,\n    lname,\n    email,\n    password\n  }\n}) {\n  try {\n    const user = yield httpRegisterUser(fname, lname, email, password);\n    yield put(registrationSuccess(user));\n  } catch (error) {\n    yield put(registrationFailure(error));\n  }\n}\n;\nexport function* onRegistrationStart() {\n  yield takeLatest(SiteMemberActionTypes.REGISTER_START, register);\n}\n;\nexport function* siteMemberSagas() {\n  yield all([call(onRegistrationStart)]);\n}\n;","map":{"version":3,"sources":["C:/Users/bryan.alvarez/Documents/webdev/git/lendit/lendit/src/redux/site-member/site-member.sagas.js"],"names":["all","call","takeLatest","put","axios","httpRegisterUser","SiteMemberActionTypes","registrationFailure","registrationSuccess","register","payload","fname","lname","email","password","user","error","onRegistrationStart","REGISTER_START","siteMemberSagas"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,QAA2C,oBAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,gBAAT,QAAiC,oBAAjC;AAEA,OAAOC,qBAAP,MAAkC,qBAAlC;AAEA,SACIC,mBADJ,EAEIC,mBAFJ,QAGO,uBAHP;AAKA,OAAO,UAAUC,QAAV,CAAmB;AAACC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA,KAAT;AAAgBC,IAAAA,KAAhB;AAAuBC,IAAAA;AAAvB;AAAV,CAAnB,EAAiE;AACpE,MAAG;AACC,UAAMC,IAAI,GAAG,MAAOV,gBAAgB,CAACM,KAAD,EAAQC,KAAR,EAAeC,KAAf,EAAsBC,QAAtB,CAApC;AACA,UAAMX,GAAG,CAACK,mBAAmB,CAACO,IAAD,CAApB,CAAT;AACH,GAHD,CAGC,OAAMC,KAAN,EAAY;AACT,UAAMb,GAAG,CAACI,mBAAmB,CAACS,KAAD,CAApB,CAAT;AACH;AACJ;AAAA;AAED,OAAO,UAAUC,mBAAV,GAAgC;AACnC,QAAMf,UAAU,CAACI,qBAAqB,CAACY,cAAvB,EAAuCT,QAAvC,CAAhB;AACH;AAAA;AAED,OAAO,UAAUU,eAAV,GAA4B;AAC/B,QAAMnB,GAAG,CAAC,CACNC,IAAI,CAACgB,mBAAD,CADE,CAAD,CAAT;AAGH;AAAA","sourcesContent":["import { all, call, takeLatest, put } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\n\r\nimport { httpRegisterUser } from '../../services/api';\r\n\r\nimport SiteMemberActionTypes from './site-member.types';\r\n\r\nimport {\r\n    registrationFailure,\r\n    registrationSuccess,\r\n} from './site-member.actions'\r\n\r\nexport function* register({payload: { fname, lname, email, password }}) {\r\n    try{\r\n        const user = yield  httpRegisterUser(fname, lname, email, password);\r\n        yield put(registrationSuccess(user)); \r\n    }catch(error){\r\n        yield put(registrationFailure(error));\r\n    } \r\n};\r\n\r\nexport function* onRegistrationStart() {\r\n    yield takeLatest(SiteMemberActionTypes.REGISTER_START, register)\r\n};\r\n\r\nexport function* siteMemberSagas() {\r\n    yield all([\r\n        call(onRegistrationStart),\r\n    ]);\r\n};"]},"metadata":{},"sourceType":"module"}