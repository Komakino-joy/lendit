{"ast":null,"code":"import { call, put, fork, take, takeLatest, all } from \"redux-saga/effects\";\nimport { REQUEST_SELECTED_ASSET, CHECK_IN_SELECTED_ASSET_START, RETRIEVE_NEW_STATUS, receiveSelectedAssetData, checkInSelectedAssetSuccess, newAssetStatus } from \"../asset/asset.actions\";\nimport { fetchSelectedAssetData, checkInAsset } from \"../../services/api\";\n\nfunction* takeFirst(pattern, saga, ...args) {\n  const task = yield fork(function* () {\n    while (true) {\n      const action = yield take(pattern);\n      yield call(saga, ...args.concat(action));\n    }\n  });\n  return task;\n} // worker Saga: will be fired on USER_FETCH_REQUESTED actions\n\n\nfunction* getRequestedSelectedAssetData(action) {\n  try {\n    // do api call\n    const assetData = yield call(fetchSelectedAssetData, action.assetID);\n    yield put(receiveSelectedAssetData(assetData));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction* postCheckInSelectedAsset(action) {\n  try {\n    const assetData = yield call(checkInAsset, action.assetID);\n    yield put(checkInSelectedAssetSuccess(assetData));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction* getNewAssetStatus(action) {\n  try {\n    const newAssetData = yield call(newAssetStatus, action.assetID);\n    yield put(newAssetStatus(newAssetData));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport function* requestSelectedAssetSaga() {\n  yield takeLatest(REQUEST_SELECTED_ASSET, getRequestedSelectedAssetData);\n}\nexport function* checkInSelectedAssetSaga() {\n  console.log('STEP 4: checkInSelectedAssetSaga() takes first from action \"CHECK_IN_SELECTED_ASSET_START\" and runs postCheckInSelectedAsset() ');\n  yield takeFirst(CHECK_IN_SELECTED_ASSET_START, postCheckInSelectedAsset);\n}\nexport function* retrieveNewStatus() {\n  yield takeLatest(RETRIEVE_NEW_STATUS, getNewAssetStatus);\n}\nexport function* assetSagas() {\n  console.log('STEP 3: assetSagas function yields call to saga functions, [call (requestSelectedAssetSaga), call(checkInSelectedAssetSaga)]');\n  yield all([call(requestSelectedAssetSaga), call(checkInSelectedAssetSaga), call(retrieveNewStatus)]);\n}\n;","map":{"version":3,"sources":["C:/Users/bryan.alvarez/Documents/webdev/git/comp-overload/client/src/redux/asset/asset.sagas.js"],"names":["call","put","fork","take","takeLatest","all","REQUEST_SELECTED_ASSET","CHECK_IN_SELECTED_ASSET_START","RETRIEVE_NEW_STATUS","receiveSelectedAssetData","checkInSelectedAssetSuccess","newAssetStatus","fetchSelectedAssetData","checkInAsset","takeFirst","pattern","saga","args","task","action","concat","getRequestedSelectedAssetData","assetData","assetID","error","console","log","postCheckInSelectedAsset","getNewAssetStatus","newAssetData","requestSelectedAssetSaga","checkInSelectedAssetSaga","retrieveNewStatus","assetSagas"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,IAApB,EAA0BC,IAA1B,EAAgCC,UAAhC,EAA4CC,GAA5C,QAAuD,oBAAvD;AAEA,SACIC,sBADJ,EAEIC,6BAFJ,EAGIC,mBAHJ,EAIIC,wBAJJ,EAKIC,2BALJ,EAMIC,cANJ,QAOU,wBAPV;AASA,SACEC,sBADF,EAEEC,YAFF,QAGQ,oBAHR;;AAMC,UAAUC,SAAV,CAAoBC,OAApB,EAA6BC,IAA7B,EAAmC,GAAGC,IAAtC,EAA4C;AAC3C,QAAMC,IAAI,GAAG,MAAMhB,IAAI,CAAC,aAAa;AACjC,WAAM,IAAN,EAAY;AACV,YAAMiB,MAAM,GAAG,MAAMhB,IAAI,CAACY,OAAD,CAAzB;AACA,YAAMf,IAAI,CAACgB,IAAD,EAAO,GAAGC,IAAI,CAACG,MAAL,CAAYD,MAAZ,CAAV,CAAV;AACD;AACF,GALoB,CAAvB;AAME,SAAOD,IAAP;AACD,C,CAEH;;;AACA,UAAUG,6BAAV,CAAwCF,MAAxC,EAAgD;AAC9C,MAAI;AACF;AACA,UAAMG,SAAS,GAAG,MAAMtB,IAAI,CAACY,sBAAD,EAAyBO,MAAM,CAACI,OAAhC,CAA5B;AACA,UAAMtB,GAAG,CAACQ,wBAAwB,CAACa,SAAD,CAAzB,CAAT;AACD,GAJD,CAIE,OAAOE,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF;;AAED,UAAUG,wBAAV,CAAmCR,MAAnC,EAA2C;AACzC,MAAG;AACD,UAAMG,SAAS,GAAG,MAAMtB,IAAI,CAACa,YAAD,EAAeM,MAAM,CAACI,OAAtB,CAA5B;AACA,UAAMtB,GAAG,CAACS,2BAA2B,CAACY,SAAD,CAA5B,CAAT;AACD,GAHD,CAGG,OAAOE,KAAP,EAAc;AACfC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF;;AAED,UAAUI,iBAAV,CAA4BT,MAA5B,EAAoC;AAClC,MAAG;AACD,UAAMU,YAAY,GAAG,MAAM7B,IAAI,CAACW,cAAD,EAAiBQ,MAAM,CAACI,OAAxB,CAA/B;AACA,UAAMtB,GAAG,CAACU,cAAc,CAACkB,YAAD,CAAf,CAAT;AACD,GAHD,CAGE,OAAML,KAAN,EAAa;AACbC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF;;AAED,OAAQ,UAAUM,wBAAV,GAAqC;AAC3C,QAAM1B,UAAU,CAACE,sBAAD,EAAyBe,6BAAzB,CAAhB;AACD;AAGD,OAAQ,UAAUU,wBAAV,GAAqC;AAC3CN,EAAAA,OAAO,CAACC,GAAR,CAAY,iIAAZ;AACA,QAAMZ,SAAS,CAACP,6BAAD,EAAgCoB,wBAAhC,CAAf;AACD;AAED,OAAO,UAAUK,iBAAV,GAA8B;AACnC,QAAM5B,UAAU,CAACI,mBAAD,EAAsBoB,iBAAtB,CAAhB;AACD;AAGD,OAAO,UAAUK,UAAV,GAAuB;AAC1BR,EAAAA,OAAO,CAACC,GAAR,CAAY,8HAAZ;AACA,QAAMrB,GAAG,CAAC,CACRL,IAAI,CAAE8B,wBAAF,CADI,EAER9B,IAAI,CAAC+B,wBAAD,CAFI,EAGR/B,IAAI,CAACgC,iBAAD,CAHI,CAAD,CAAT;AAKH;AAAA","sourcesContent":["import { call, put, fork, take, takeLatest, all } from \"redux-saga/effects\";\r\n\r\nimport { \r\n    REQUEST_SELECTED_ASSET,\r\n    CHECK_IN_SELECTED_ASSET_START,\r\n    RETRIEVE_NEW_STATUS,\r\n    receiveSelectedAssetData,\r\n    checkInSelectedAssetSuccess,\r\n    newAssetStatus\r\n   } from \"../asset/asset.actions\";\r\n\r\nimport { \r\n  fetchSelectedAssetData,\r\n  checkInAsset\r\n } from \"../../services/api\";\r\n\r\n\r\n function* takeFirst(pattern, saga, ...args) {\r\n  const task = yield fork(function* () {\r\n      while(true) {\r\n        const action = yield take(pattern);\r\n        yield call(saga, ...args.concat(action));\r\n      }\r\n    });\r\n    return task;\r\n  }\r\n\r\n// worker Saga: will be fired on USER_FETCH_REQUESTED actions\r\nfunction* getRequestedSelectedAssetData(action) {\r\n  try {\r\n    // do api call\r\n    const assetData = yield call(fetchSelectedAssetData, action.assetID);\r\n    yield put(receiveSelectedAssetData(assetData));\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nfunction* postCheckInSelectedAsset(action) {\r\n  try{\r\n    const assetData = yield call(checkInAsset, action.assetID )\r\n    yield put(checkInSelectedAssetSuccess(assetData))\r\n  }  catch (error) {\r\n    console.log(error)\r\n  }\r\n}\r\n\r\nfunction* getNewAssetStatus(action) {\r\n  try{\r\n    const newAssetData = yield call(newAssetStatus, action.assetID)\r\n    yield put(newAssetStatus(newAssetData))\r\n  } catch(error) {\r\n    console.log(error)\r\n  }\r\n}\r\n\r\nexport  function* requestSelectedAssetSaga() {\r\n  yield takeLatest(REQUEST_SELECTED_ASSET, getRequestedSelectedAssetData);\r\n}\r\n\r\n\r\nexport  function* checkInSelectedAssetSaga() {\r\n  console.log('STEP 4: checkInSelectedAssetSaga() takes first from action \"CHECK_IN_SELECTED_ASSET_START\" and runs postCheckInSelectedAsset() ')\r\n  yield takeFirst(CHECK_IN_SELECTED_ASSET_START, postCheckInSelectedAsset);\r\n}\r\n\r\nexport function* retrieveNewStatus() {\r\n  yield takeLatest(RETRIEVE_NEW_STATUS, getNewAssetStatus)\r\n}\r\n\r\n\r\nexport function* assetSagas() {\r\n    console.log('STEP 3: assetSagas function yields call to saga functions, [call (requestSelectedAssetSaga), call(checkInSelectedAssetSaga)]')\r\n    yield all([\r\n      call (requestSelectedAssetSaga), \r\n      call(checkInSelectedAssetSaga),\r\n      call(retrieveNewStatus)\r\n    ])\r\n};"]},"metadata":{},"sourceType":"module"}