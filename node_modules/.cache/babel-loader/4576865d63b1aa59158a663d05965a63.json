{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\bryan.alvarez\\\\Documents\\\\webdev\\\\git\\\\comp-overload\\\\client\\\\src\\\\components\\\\center\\\\center.component.jsx\";\n// import React, { useEffect, useState } from 'react'\nimport CustomButton from '../custom-button/custom-button.component';\nimport { connect } from \"react-redux\";\nimport { CurrentAssetStatus } from \"../../redux/asset/asset.selectors\";\nimport base64ArrayBuffer from '../../utils/base64';\nimport image404 from '../../images/404.png';\nimport { checkInSelectedAssetStart, requestSelectedAssetData, checkOutSelectedAssetStart } from \"../../redux/asset/asset.actions\";\nimport './center.styles.scss';\n\nfunction timeout(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n; // Used to add a gap between updating the database and requesting the new asset details from the database\n\nconst assetTransaction = async (transaction, fetchNew, assetID) => {\n  try {\n    await transaction(assetID);\n    await timeout(100);\n    await fetchNew(assetID);\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nconst Center = ({\n  assetID,\n  assetName,\n  assetSerial,\n  assetImage,\n  assetStatus,\n  checkInAsset,\n  getNewStatus,\n  checkOutAsset\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"center-container\",\n    children: assetID ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center-inner-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: [/*#__PURE__*/_jsxDEV(\"header\", {\n          className: \"asset-name\",\n          children: assetName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"asset-serial\",\n          children: assetSerial\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"img-container\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"asset-image\",\n          src: `data:image/png;base64,${base64ArrayBuffer(assetImage.data)}`,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        // Ternary operator is being used to determine the font color for status, based on the String value\n        // <CurrentAssetStatus resulted from the CurrentAssetStatus Selector\n        className: ` ${assetStatus === 'Available' ? 'available' : assetStatus.slice(0, 10) === 'In Use By ' ? 'in-use' : 'quarantine'} asset-status`,\n        children: /*#__PURE__*/_jsxDEV(CurrentAssetStatus, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-container\",\n        children: [/*#__PURE__*/_jsxDEV(CustomButton, {\n          isCheckIn: true,\n          onClick: () => {\n            assetTransaction(checkInAsset, getNewStatus, assetID);\n          },\n          children: \"CHECK IN\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(CustomButton, {\n          isCheckOut: true,\n          onClick: () => {\n            assetTransaction(checkOutAsset, getNewStatus, assetID);\n          },\n          children: \"CHECK OUT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"instructions\",\n          children: \"If there are issues with the asset, please fill out the form below and submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"reason-box\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(CustomButton, {\n          type: \"button\",\n          children: [' ', \"Submit\", ' ']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center-inner-container\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: image404,\n        width: \"450px\",\n        height: \"auto\",\n        alt: \"404 Error Message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 21\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Center;\n\nconst mapStateToProps = state => ({\n  state: state,\n  assetID: state.assetData.id,\n  assetName: state.assetData.name,\n  assetSerial: state.assetData.serial,\n  assetImage: state.assetData.image,\n  assetStatus: state.assetData.status,\n  userID: state.userData.id\n});\n\nconst mapDispatchToProps = dispatch => ({\n  checkInAsset: assetID => {\n    dispatch(checkInSelectedAssetStart(assetID));\n  },\n  checkOutAsset: (assetID, userID) => {\n    dispatch(checkInSelectedAssetStart(assetID, userID));\n  },\n  getNewStatus: assetID => {\n    dispatch(requestSelectedAssetData(assetID));\n  }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Center); //^ THE CODE BELOW IS USED TO LOAD FIRST ASSET WHEN RENDERING APP FOR FIRST TIME\n// const [asset, setAsset] = useState(null);\n// useEffect(() => {\n//     const fetchAsset = async() => {\n//         const response = await fetch(`http://localhost:3000/asset`)\n//         const asset = await response.json()\n//         setAsset(asset[0]);\n//     }\n//     fetchAsset();\n// }, []);\n//             \n// \n\nvar _c;\n\n$RefreshReg$(_c, \"Center\");","map":{"version":3,"sources":["C:/Users/bryan.alvarez/Documents/webdev/git/comp-overload/client/src/components/center/center.component.jsx"],"names":["CustomButton","connect","CurrentAssetStatus","base64ArrayBuffer","image404","checkInSelectedAssetStart","requestSelectedAssetData","checkOutSelectedAssetStart","timeout","ms","Promise","resolve","setTimeout","assetTransaction","transaction","fetchNew","assetID","e","console","log","Center","assetName","assetSerial","assetImage","assetStatus","checkInAsset","getNewStatus","checkOutAsset","data","slice","mapStateToProps","state","assetData","id","name","serial","image","status","userID","userData","mapDispatchToProps","dispatch"],"mappings":";;AAAA;AACA,OAAOA,YAAP,MAAyB,0CAAzB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,kBAAT,QAAkC,mCAAlC;AAEA,OAAOC,iBAAP,MAA8B,oBAA9B;AACA,OAAOC,QAAP,MAAqB,sBAArB;AAEA,SACIC,yBADJ,EAEIC,wBAFJ,EAGIC,0BAHJ,QAIO,iCAJP;AAMA,OAAO,sBAAP;;AAEA,SAASC,OAAT,CAAiBC,EAAjB,EAAqB;AACjB,SAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAIC,UAAU,CAACD,OAAD,EAAUF,EAAV,CAAjC,CAAP;AACH;;AAAA,C,CACD;;AACA,MAAMI,gBAAgB,GAAG,OAAOC,WAAP,EAAoBC,QAApB,EAA8BC,OAA9B,KAA0C;AAC/D,MAAG;AACC,UAAMF,WAAW,CAACE,OAAD,CAAjB;AACA,UAAMR,OAAO,CAAC,GAAD,CAAb;AACA,UAAMO,QAAQ,CAACC,OAAD,CAAd;AACH,GAJD,CAIE,OAAMC,CAAN,EAAS;AACPC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACH;AACJ,CARD;;AAWA,MAAMG,MAAM,GAAG,CAAC;AAAEJ,EAAAA,OAAF;AAAWK,EAAAA,SAAX;AAAsBC,EAAAA,WAAtB;AAAmCC,EAAAA,UAAnC;AAA+CC,EAAAA,WAA/C;AAA4DC,EAAAA,YAA5D;AAA0EC,EAAAA,YAA1E;AAAwFC,EAAAA;AAAxF,CAAD,KAA6G;AAExH,sBACI;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA,cACCX,OAAO,gBACA;AAAK,MAAA,SAAS,EAAC,wBAAf;AAAA,8BAEI;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA,gCACI;AAAQ,UAAA,SAAS,EAAC,YAAlB;AAAA,oBAAgCK;AAAhC;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAM,UAAA,SAAS,EAAC,cAAhB;AAAA,oBAAgCC;AAAhC;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAOI;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA,+BAEI;AAAK,UAAA,SAAS,EAAC,aAAf;AAA6B,UAAA,GAAG,EAAG,yBAAwBnB,iBAAiB,CAACoB,UAAU,CAACK,IAAZ,CAAkB,EAA9F;AAAkG,UAAA,GAAG,EAAC;AAAtG;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,cAPJ,eAWI;AACA;AACA;AACI,QAAA,SAAS,EAAG,IAAGJ,WAAW,KAAK,WAAhB,GAA8B,WAA9B,GAA4CA,WAAW,CAACK,KAAZ,CAAkB,CAAlB,EAAoB,EAApB,MAA4B,YAA5B,GAA2C,QAA3C,GAAsD,YAAc,eAHnI;AAAA,+BAII,QAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,cAXJ,eAkBI;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,gCACI,QAAC,YAAD;AAAc,UAAA,SAAS,MAAvB;AAAwB,UAAA,OAAO,EAAE,MAAM;AAAChB,YAAAA,gBAAgB,CAACY,YAAD,EAAeC,YAAf,EAA6BV,OAA7B,CAAhB;AAAsD,WAA9F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,YAAD;AAAc,UAAA,UAAU,MAAxB;AAAyB,UAAA,OAAO,EAAE,MAAM;AAACH,YAAAA,gBAAgB,CAACc,aAAD,EAAgBD,YAAhB,EAA8BV,OAA9B,CAAhB;AAAuD,WAAhG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAlBJ,eAuBI;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA,gCAEI;AAAM,UAAA,SAAS,EAAC,cAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAU,UAAA,SAAS,EAAC;AAApB;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAII,QAAC,YAAD;AAAc,UAAA,IAAI,EAAC,QAAnB;AAAA,qBAA8B,GAA9B,YAAyC,GAAzC;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAvBJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,gBAiCI;AAAK,MAAA,SAAS,EAAC,wBAAf;AAAA,6BACI;AAAK,QAAA,GAAG,EAAEZ,QAAV;AAAoB,QAAA,KAAK,EAAC,OAA1B;AAAkC,QAAA,MAAM,EAAC,MAAzC;AAAgD,QAAA,GAAG,EAAC;AAApD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AAlCZ;AAAA;AAAA;AAAA;AAAA,UADJ;AA0CH,CA5CD;;KAAMgB,M;;AA8CN,MAAMU,eAAe,GAAIC,KAAD,KAAY;AAChCA,EAAAA,KAAK,EAAEA,KADyB;AAEhCf,EAAAA,OAAO,EAAEe,KAAK,CAACC,SAAN,CAAgBC,EAFO;AAGhCZ,EAAAA,SAAS,EAAEU,KAAK,CAACC,SAAN,CAAgBE,IAHK;AAIhCZ,EAAAA,WAAW,EAAES,KAAK,CAACC,SAAN,CAAgBG,MAJG;AAKhCZ,EAAAA,UAAU,EAAEQ,KAAK,CAACC,SAAN,CAAgBI,KALI;AAMhCZ,EAAAA,WAAW,EAACO,KAAK,CAACC,SAAN,CAAgBK,MANI;AAOhCC,EAAAA,MAAM,EAAEP,KAAK,CAACQ,QAAN,CAAeN;AAPS,CAAZ,CAAxB;;AAUA,MAAMO,kBAAkB,GAAIC,QAAD,KAAe;AACtChB,EAAAA,YAAY,EAAGT,OAAD,IAAa;AAAEyB,IAAAA,QAAQ,CAACpC,yBAAyB,CAACW,OAAD,CAA1B,CAAR;AAA8C,GADrC;AAEtCW,EAAAA,aAAa,EAAE,CAACX,OAAD,EAAUsB,MAAV,KAAqB;AAAEG,IAAAA,QAAQ,CAACpC,yBAAyB,CAACW,OAAD,EAAUsB,MAAV,CAA1B,CAAR;AAAsD,GAFtD;AAGtCZ,EAAAA,YAAY,EAAGV,OAAD,IAAa;AAAEyB,IAAAA,QAAQ,CAACnC,wBAAwB,CAACU,OAAD,CAAzB,CAAR;AAA6C;AAHpC,CAAf,CAA3B;;AAMA,eAAef,OAAO,CAAC6B,eAAD,EAAkBU,kBAAlB,CAAP,CAA6CpB,MAA7C,CAAf,C,CAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA","sourcesContent":["// import React, { useEffect, useState } from 'react'\r\nimport CustomButton from '../custom-button/custom-button.component'\r\nimport { connect } from \"react-redux\";\r\nimport { CurrentAssetStatus} from \"../../redux/asset/asset.selectors\";\r\n\r\nimport base64ArrayBuffer from '../../utils/base64'\r\nimport image404 from '../../images/404.png'\r\n\r\nimport { \r\n    checkInSelectedAssetStart, \r\n    requestSelectedAssetData,\r\n    checkOutSelectedAssetStart\r\n} from \"../../redux/asset/asset.actions\";\r\n\r\nimport './center.styles.scss'\r\n\r\nfunction timeout(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n};\r\n// Used to add a gap between updating the database and requesting the new asset details from the database\r\nconst assetTransaction = async( transaction, fetchNew, assetID) => {\r\n    try{\r\n        await transaction(assetID);\r\n        await timeout(100);\r\n        await fetchNew(assetID);\r\n    } catch(e) {\r\n        console.log(e)\r\n    }\r\n};\r\n\r\n\r\nconst Center = ({ assetID, assetName, assetSerial, assetImage, assetStatus, checkInAsset, getNewStatus ,checkOutAsset }) => {\r\n    \r\n    return (\r\n        <div className='center-container'>\r\n        {assetID ? (\r\n                <div className='center-inner-container'>\r\n\r\n                    <div className='header'>\r\n                        <header className='asset-name'>{assetName}</header>\r\n                        <span className='asset-serial'>{assetSerial}</span>\r\n                    </div>\r\n                    \r\n                    <div className='img-container'>   \r\n                    {/* Here we are using our base64ArrayBuffer function to convert our image array into a viewable picture */}\r\n                        <img className='asset-image' src={`data:image/png;base64,${base64ArrayBuffer(assetImage.data)}`}  alt=''></img> \r\n                    </div>\r\n                    <p \r\n                    // Ternary operator is being used to determine the font color for status, based on the String value\r\n                    // <CurrentAssetStatus resulted from the CurrentAssetStatus Selector\r\n                        className={` ${assetStatus === 'Available' ? 'available' : assetStatus.slice(0,10) === 'In Use By ' ? 'in-use' : 'quarantine' } asset-status`}>\r\n                        <CurrentAssetStatus/>\r\n                    </p>\r\n\r\n                    <div className='button-container'>\r\n                        <CustomButton isCheckIn onClick={() => {assetTransaction(checkInAsset, getNewStatus, assetID)}}>CHECK IN</CustomButton>\r\n                        <CustomButton isCheckOut onClick={() => {assetTransaction(checkOutAsset, getNewStatus, assetID)}} >CHECK OUT</CustomButton>\r\n                    </div>\r\n\r\n                    <div className='footer'>\r\n                    \r\n                        <span className='instructions'>If there are issues with the asset, please fill out the form below and submit</span>\r\n                        <textarea className='reason-box'></textarea>\r\n                        <CustomButton type='button' >{' '}Submit{' '}</CustomButton>\r\n                    </div>\r\n\r\n                </div>\r\n                ):(  \r\n                    <div className='center-inner-container'>\r\n                        <img src={image404} width='450px' height='auto' alt='404 Error Message' ></img>\r\n                    </div>\r\n                )}\r\n                \r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    state: state,\r\n    assetID: state.assetData.id,\r\n    assetName: state.assetData.name,\r\n    assetSerial: state.assetData.serial,\r\n    assetImage: state.assetData.image,\r\n    assetStatus:state.assetData.status,\r\n    userID: state.userData.id\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    checkInAsset: (assetID) => { dispatch(checkInSelectedAssetStart(assetID)) },\r\n    checkOutAsset: (assetID, userID) => { dispatch(checkInSelectedAssetStart(assetID, userID)) },\r\n    getNewStatus: (assetID) => { dispatch(requestSelectedAssetData(assetID)) }\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Center);\r\n\r\n//^ THE CODE BELOW IS USED TO LOAD FIRST ASSET WHEN RENDERING APP FOR FIRST TIME\r\n\r\n// const [asset, setAsset] = useState(null);\r\n    \r\n// useEffect(() => {\r\n//     const fetchAsset = async() => {\r\n//         const response = await fetch(`http://localhost:3000/asset`)\r\n//         const asset = await response.json()\r\n//         setAsset(asset[0]);\r\n//     }\r\n\r\n//     fetchAsset();\r\n// }, []);\r\n\r\n\r\n//             \r\n// \r\n"]},"metadata":{},"sourceType":"module"}