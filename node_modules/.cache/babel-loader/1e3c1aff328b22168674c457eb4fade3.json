{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\alvar\\\\Documents\\\\WebDev\\\\lendit\\\\lendit\\\\src\\\\components\\\\drop-down-container\\\\drop-down-container.component.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from 'reselect';\nimport { currentMemberId } from \"../../redux/site-member/site-member.selectors\";\nimport { requestSelectedUserData } from \"../../redux/user/user.actions\";\nimport { requestUserDropDownOptions } from '../../redux/drop-downs/drop-down.actions';\nimport { selectUsers } from \"../../redux/drop-downs/drop-down.selectors\";\nimport { requestSelectedAssetData } from \"../../redux/asset/asset.actions\";\nimport { requestAssetDropDownOptions } from '../../redux/drop-downs/drop-down.actions';\nimport { selectAssets } from \"../../redux/drop-downs/drop-down.selectors\";\nimport selectedListItemID from \"../custom-drop-down/drop-down.utils\";\nimport CustomDropDown from '../custom-drop-down/custom-drop-down.component';\nimport { DropDownContainer, DropDownInner, Tag } from \"./drop-down-container.styles\";\n\nconst ScanboxContainer = ({\n  memberId,\n  assets,\n  users,\n  getAssetOptions,\n  getAssetDetails,\n  getUserOptions,\n  getUserDetails\n}) => {\n  _s();\n\n  useEffect(() => {\n    // Get Data from /allunits.\n    getAssetOptions(memberId);\n  }, [getAssetOptions, memberId]); //\n\n  useEffect(() => {\n    // Get Data from /allusers when component mounts.\n    getUserOptions(memberId);\n  }, [getUserOptions, memberId]);\n  return /*#__PURE__*/_jsxDEV(DropDownContainer, {\n    children: /*#__PURE__*/_jsxDEV(DropDownInner, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => console.log(selectedListItemID('asset-list')),\n        children: \" log \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Tag, {\n        children: \"ASSET ID\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CustomDropDown, {\n        isHomePage: true,\n        onChange: () => getAssetDetails({\n          assetID: selectedListItemID('asset-list'),\n          memberId\n        }),\n        id: \"asset-list\",\n        optionList: assets\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Tag, {\n        children: \"USER ID\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CustomDropDown, {\n        isHomePage: true,\n        onChange: getUserDetails,\n        id: \"user-list\",\n        optionList: users\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ScanboxContainer, \"3ubReDTFssvu4DHeldAg55cW/CI=\");\n\n_c = ScanboxContainer;\nconst mapStateToProps = createStructuredSelector({\n  memberId: currentMemberId,\n  assets: selectAssets,\n  users: selectUsers\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getAssetDetails: assetID => {\n    dispatch(requestSelectedAssetData(assetID));\n  },\n  getAssetOptions: memberId => {\n    dispatch(requestAssetDropDownOptions(memberId));\n  },\n  getUserOptions: memberId => {\n    dispatch(requestUserDropDownOptions(memberId));\n  },\n  getUserDetails: () => {\n    dispatch(requestSelectedUserData(selectedListItemID('user-list')));\n  }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ScanboxContainer);\n\nvar _c;\n\n$RefreshReg$(_c, \"ScanboxContainer\");","map":{"version":3,"sources":["C:/Users/alvar/Documents/WebDev/lendit/lendit/src/components/drop-down-container/drop-down-container.component.jsx"],"names":["React","useEffect","connect","createStructuredSelector","currentMemberId","requestSelectedUserData","requestUserDropDownOptions","selectUsers","requestSelectedAssetData","requestAssetDropDownOptions","selectAssets","selectedListItemID","CustomDropDown","DropDownContainer","DropDownInner","Tag","ScanboxContainer","memberId","assets","users","getAssetOptions","getAssetDetails","getUserOptions","getUserDetails","console","log","assetID","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {useEffect}  from 'react'\r\nimport { connect } from \"react-redux\";\r\nimport { createStructuredSelector } from 'reselect';\r\n\r\nimport { currentMemberId } from \"../../redux/site-member/site-member.selectors\";\r\nimport { requestSelectedUserData } from \"../../redux/user/user.actions\";\r\nimport { requestUserDropDownOptions } from '../../redux/drop-downs/drop-down.actions'\r\nimport { selectUsers } from \"../../redux/drop-downs/drop-down.selectors\";\r\nimport { requestSelectedAssetData } from \"../../redux/asset/asset.actions\";\r\nimport { requestAssetDropDownOptions } from '../../redux/drop-downs/drop-down.actions'\r\nimport { selectAssets } from \"../../redux/drop-downs/drop-down.selectors\";\r\n\r\nimport  selectedListItemID  from \"../custom-drop-down/drop-down.utils\";\r\n\r\nimport CustomDropDown from '../custom-drop-down/custom-drop-down.component';\r\nimport {DropDownContainer, DropDownInner, Tag } from \"./drop-down-container.styles\";\r\n\r\n\r\nconst ScanboxContainer = ({ memberId, assets, users, getAssetOptions, getAssetDetails, getUserOptions, getUserDetails}) => {\r\n    \r\n    useEffect(() => {\r\n        // Get Data from /allunits.\r\n        getAssetOptions(memberId)\r\n      }, [getAssetOptions, memberId]); //\r\n\r\n      useEffect(() => {\r\n        // Get Data from /allusers when component mounts.\r\n        getUserOptions(memberId)\r\n      }, [getUserOptions, memberId]);  \r\n\r\n    return (\r\n        <DropDownContainer>\r\n            <DropDownInner>\r\n            <button onClick = {()=> console.log(selectedListItemID('asset-list'))}> log </button>\r\n                <Tag>ASSET ID</Tag>\r\n                <CustomDropDown isHomePage  onChange={() => getAssetDetails({assetID: selectedListItemID('asset-list'), memberId})} id=\"asset-list\" optionList={assets}/> \r\n                <Tag>USER ID</Tag>\r\n                <CustomDropDown isHomePage onChange={getUserDetails} id=\"user-list\" optionList={users}/> \r\n            </DropDownInner>\r\n        </DropDownContainer>\r\n    )}\r\n\r\n\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    memberId: currentMemberId,\r\n    assets: selectAssets,\r\n    users: selectUsers\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    getAssetDetails: (assetID) => { dispatch(  requestSelectedAssetData(assetID))},\r\n    getAssetOptions: (memberId) => { dispatch(requestAssetDropDownOptions(memberId))},\r\n    getUserOptions: (memberId) => { dispatch( requestUserDropDownOptions(memberId)) },\r\n    getUserDetails: () => { dispatch( requestSelectedUserData ( selectedListItemID('user-list') ) )},\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ScanboxContainer);"]},"metadata":{},"sourceType":"module"}