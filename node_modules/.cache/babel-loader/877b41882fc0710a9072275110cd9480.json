{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\alvar\\\\Documents\\\\WebDev\\\\comp-overload\\\\client\\\\src\\\\components\\\\center\\\\center.component.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport CustomButton from '../custom-button/custom-button.component';\nimport { connect } from \"react-redux\";\nimport { useAlert } from 'react-alert';\nimport base64ArrayBuffer from '../../utils/base64';\nimport { assetTransaction } from \"./center.utils\";\nimport image404 from '../../images/404.png';\nimport { checkInSelectedAssetStart, requestSelectedAssetData, checkOutSelectedAssetStart, quarantineSelectedAssetStart } from \"../../redux/asset/asset.actions\";\nimport { CenterPanelContainer, CenterPanelInnerContainer, Header, AssetName, AssetSerial, ImageContainer, AssetImage, ButtonContainer, Footer, Instructions } from \"./center.styles.jsx\";\nimport './center.styles.scss';\n\nconst Center = ({\n  assetID,\n  assetName,\n  assetSerial,\n  assetImage,\n  assetStatus,\n  checkInAsset,\n  getUpdatedStatus,\n  checkOutAsset,\n  quarantineAsset,\n  userID,\n  quarantineReason\n}) => {\n  _s();\n\n  const alert = useAlert(); // prevent user from being able to drag asset images.\n\n  const preventDragHandler = event => {\n    event.preventDefault();\n  };\n\n  const onReasonChange = event => {\n    quarantineReason = event.target.value;\n  };\n\n  const handleCheckout = () => {\n    if (assetStatus.slice(0, 9) === 'In Use By') {\n      alert.show(`${assetName} is ${assetStatus}`, {\n        type: 'info'\n      });\n    } else if (!userID) {\n      alert.show(`Username is required for checkout`, {\n        type: 'info'\n      });\n      document.getElementById('user-list').focus();\n    } else {\n      assetTransaction(checkOutAsset, getUpdatedStatus, assetID, userID);\n      document.getElementById('asset-list').focus();\n    }\n  };\n\n  const handleQuarantine = () => {\n    if (assetStatus === 'Quarantine') {\n      alert.show(`${assetName} is already in quarantine.`, {\n        type: 'info'\n      });\n    } else if (!quarantineReason) {\n      alert.show(`Reason is required to check ${assetName} into quarantine.`, {\n        type: 'info'\n      });\n      document.getElementById(\"text-area\").focus();\n    } else {\n      assetTransaction(quarantineAsset, getUpdatedStatus, assetID, quarantineReason);\n      document.getElementById('text-area').value = '';\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(CenterPanelContainer, {\n    children: assetID ? /*#__PURE__*/_jsxDEV(CenterPanelInnerContainer, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        children: [/*#__PURE__*/_jsxDEV(AssetName, {\n          children: assetName.toUpperCase()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(AssetSerial, {\n          children: assetSerial.toUpperCase()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"img-container\",\n        children: /*#__PURE__*/_jsxDEV(AssetImage, {\n          className: \"asset-image\",\n          src: `data:image/png;base64,${base64ArrayBuffer(assetImage.data)}`,\n          alt: \"\",\n          onDragStart: preventDragHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        // Ternary operator is being used to determine the font color for status, based on the String value\n        className: `${assetStatus === 'Available' ? 'available' : assetStatus.slice(0, 9) === 'In Use By' ? 'in-use' : 'quarantine'} asset-status`,\n        children: assetStatus.toUpperCase()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(ButtonContainer, {\n        children: [/*#__PURE__*/_jsxDEV(CustomButton, {\n          isCheckIn: true,\n          onClick: () => {\n            assetStatus !== 'Available' ? assetTransaction(checkInAsset, getUpdatedStatus, assetID) : alert.show(`${assetName} is already checked in.`, {\n              type: 'info'\n            });\n          },\n          children: \"CHECK IN\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(CustomButton, {\n          isCheckOut: true,\n          onClick: handleCheckout,\n          children: \"CHECK OUT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {\n        children: [/*#__PURE__*/_jsxDEV(Instructions, {\n          children: \"If there are issues with the asset, please fill out the form below and submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"text-area\",\n          className: \"reason-box\",\n          onChange: onReasonChange,\n          placeholder: quarantineReason\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(CustomButton, {\n          type: \"button\",\n          onClick: handleQuarantine,\n          children: \"SUBMIT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(CenterPanelInnerContainer, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        children: [/*#__PURE__*/_jsxDEV(AssetName, {\n          children: \"ASSET NAME\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(AssetSerial, {\n          children: \"SERIAL NUMBER\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(ImageContainer, {\n        children: /*#__PURE__*/_jsxDEV(AssetImage, {\n          className: \"asset-image\",\n          src: image404,\n          alt: \"\",\n          onDragStart: preventDragHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: `asset-status`,\n        children: \"ASSET STATUS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(ButtonContainer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 21\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Center, \"/tbmWjntTVQXAO42KRyQZrplUA4=\", false, function () {\n  return [useAlert];\n});\n\n_c = Center;\n\nconst mapStateToProps = state => ({\n  assetID: state.assetData.id,\n  assetName: state.assetData.name,\n  assetSerial: state.assetData.serial,\n  assetImage: state.assetData.image,\n  assetStatus: state.assetData.status,\n  userID: state.userData.id,\n  quarantineReason: state.assetData.comments\n});\n\nconst mapDispatchToProps = dispatch => ({\n  checkInAsset: assetID => {\n    dispatch(checkInSelectedAssetStart(assetID));\n  },\n  checkOutAsset: (assetID, userID) => {\n    dispatch(checkOutSelectedAssetStart(assetID, userID));\n  },\n  quarantineAsset: (assetID, quarantineReason) => {\n    dispatch(quarantineSelectedAssetStart(assetID, quarantineReason));\n  },\n  getUpdatedStatus: assetID => {\n    dispatch(requestSelectedAssetData(assetID));\n  }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Center); //^ THE CODE BELOW IS USED TO LOAD FIRST ASSET WHEN RENDERING APP FOR FIRST TIME\n// const [asset, setAsset] = useState(null);\n// useEffect(() => {\n//     const fetchAsset = async() => {\n//         const response = await fetch(`http://localhost:3000/defaultunit`)\n//         const asset = await response.json()\n//         setAsset(asset[0]);\n//     }\n//     fetchAsset();\n// }, []);\n\nvar _c;\n\n$RefreshReg$(_c, \"Center\");","map":{"version":3,"sources":["C:/Users/alvar/Documents/WebDev/comp-overload/client/src/components/center/center.component.jsx"],"names":["React","CustomButton","connect","useAlert","base64ArrayBuffer","assetTransaction","image404","checkInSelectedAssetStart","requestSelectedAssetData","checkOutSelectedAssetStart","quarantineSelectedAssetStart","CenterPanelContainer","CenterPanelInnerContainer","Header","AssetName","AssetSerial","ImageContainer","AssetImage","ButtonContainer","Footer","Instructions","Center","assetID","assetName","assetSerial","assetImage","assetStatus","checkInAsset","getUpdatedStatus","checkOutAsset","quarantineAsset","userID","quarantineReason","alert","preventDragHandler","event","preventDefault","onReasonChange","target","value","handleCheckout","slice","show","type","document","getElementById","focus","handleQuarantine","toUpperCase","data","mapStateToProps","state","assetData","id","name","serial","image","status","userData","comments","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport CustomButton from '../custom-button/custom-button.component';\r\nimport { connect } from \"react-redux\";\r\nimport { useAlert } from 'react-alert';\r\n\r\nimport base64ArrayBuffer from '../../utils/base64';\r\nimport { assetTransaction } from \"./center.utils\";\r\nimport image404 from '../../images/404.png';\r\n\r\nimport {\r\n    checkInSelectedAssetStart, \r\n    requestSelectedAssetData, \r\n    checkOutSelectedAssetStart, \r\n    quarantineSelectedAssetStart \r\n} from \"../../redux/asset/asset.actions\";\r\n\r\nimport { CenterPanelContainer, CenterPanelInnerContainer, Header, AssetName, AssetSerial, ImageContainer, AssetImage, ButtonContainer, Footer, Instructions } from \"./center.styles.jsx\";\r\nimport './center.styles.scss';\r\n\r\nconst Center = ({\r\n    assetID, assetName, assetSerial, \r\n    assetImage, assetStatus, checkInAsset, \r\n    getUpdatedStatus ,checkOutAsset, quarantineAsset, \r\n    userID, quarantineReason\r\n}) => {\r\n\r\n    const alert = useAlert();\r\n\r\n    // prevent user from being able to drag asset images.\r\n    const preventDragHandler = (event) => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    const onReasonChange = (event) => {\r\n        quarantineReason = event.target.value;\r\n    };\r\n\r\n\r\n    const handleCheckout= () => {\r\n        if ( assetStatus.slice(0,9) === 'In Use By' ){\r\n            alert.show(`${assetName} is ${assetStatus}`,{type: 'info'})\r\n        } else if (!userID){\r\n            alert.show(`Username is required for checkout`,{type: 'info'})\r\n            document.getElementById('user-list').focus() \r\n        } else {\r\n            assetTransaction(checkOutAsset, getUpdatedStatus, assetID, userID)\r\n            document.getElementById('asset-list').focus() \r\n        }\r\n    };\r\n\r\n    const handleQuarantine = () => {\r\n        if (assetStatus === 'Quarantine' ){\r\n            alert.show(`${assetName} is already in quarantine.`,{type: 'info'})\r\n        } else if (!quarantineReason){\r\n            alert.show(`Reason is required to check ${assetName} into quarantine.`,{type: 'info'})\r\n            document.getElementById(\"text-area\").focus()\r\n        } else {\r\n            assetTransaction(quarantineAsset, getUpdatedStatus, assetID, quarantineReason);\r\n            document.getElementById('text-area').value = '';\r\n        }\r\n    };\r\n\r\n    return (\r\n        <CenterPanelContainer>\r\n        {assetID ? (\r\n                <CenterPanelInnerContainer>\r\n                    <Header>\r\n                        <AssetName>{assetName.toUpperCase()}</AssetName>\r\n                        <AssetSerial>{assetSerial.toUpperCase()}</AssetSerial>\r\n                    </Header>\r\n                    <div className='img-container'>   \r\n                    {/* Here we are using our base64ArrayBuffer function to convert our image array into a viewable picture */}\r\n                        <AssetImage \r\n                            className='asset-image' \r\n                            src={`data:image/png;base64,${base64ArrayBuffer(assetImage.data)}`}  \r\n                            alt='' \r\n                            onDragStart={preventDragHandler}\r\n                        ></AssetImage> \r\n                    </div>\r\n                    <p \r\n                    // Ternary operator is being used to determine the font color for status, based on the String value\r\n                        className={`${assetStatus === 'Available' ? 'available' : assetStatus.slice(0,9) === 'In Use By' ? 'in-use' : 'quarantine' } asset-status`}>\r\n                        {assetStatus.toUpperCase()}\r\n                    </p>\r\n                    <ButtonContainer>\r\n                        <CustomButton \r\n                            isCheckIn \r\n                            onClick={\r\n                                () => {assetStatus !== 'Available' \r\n                                ? assetTransaction(checkInAsset, getUpdatedStatus, assetID) \r\n                                : alert.show(`${assetName} is already checked in.`,{type: 'info'})}}>\r\n                            CHECK IN\r\n                        </CustomButton>\r\n                        <CustomButton \r\n                            isCheckOut \r\n                            onClick={handleCheckout}\r\n                        >\r\n                            CHECK OUT\r\n                        </CustomButton>\r\n                    </ButtonContainer>\r\n                    <Footer>\r\n                        <Instructions>If there are issues with the asset, please fill out the form below and submit</Instructions>\r\n                        <textarea \r\n                            id=\"text-area\" \r\n                            className='reason-box' \r\n                            onChange={onReasonChange} \r\n                            placeholder={quarantineReason}\r\n                        ></textarea>\r\n                        <CustomButton \r\n                            type='button' \r\n                            onClick={handleQuarantine}>\r\n                            SUBMIT\r\n                        </CustomButton>\r\n                    </Footer>\r\n                </CenterPanelInnerContainer>\r\n                ):(  \r\n                    <CenterPanelInnerContainer>\r\n                    <Header>\r\n                        <AssetName>ASSET NAME</AssetName>\r\n                        <AssetSerial>SERIAL NUMBER</AssetSerial>\r\n                    </Header>\r\n                    <ImageContainer>   \r\n                        <AssetImage \r\n                            className='asset-image' \r\n                            src={image404}  \r\n                            alt='' \r\n                            onDragStart={preventDragHandler}\r\n                        ></AssetImage> \r\n                    </ImageContainer>\r\n                    <p className={`asset-status`}>ASSET STATUS</p>\r\n                    <ButtonContainer></ButtonContainer>\r\n                    <Footer></Footer>\r\n                </CenterPanelInnerContainer>\r\n                )}\r\n        </CenterPanelContainer>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    assetID: state.assetData.id,\r\n    assetName: state.assetData.name,\r\n    assetSerial: state.assetData.serial,\r\n    assetImage: state.assetData.image,\r\n    assetStatus:state.assetData.status,\r\n    userID: state.userData.id,\r\n    quarantineReason: state.assetData.comments\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    checkInAsset:       (assetID)                   => { dispatch(checkInSelectedAssetStart(assetID)) },\r\n    checkOutAsset:      (assetID, userID)           => { dispatch(checkOutSelectedAssetStart(assetID, userID)) },\r\n    quarantineAsset:    (assetID, quarantineReason) => { dispatch(quarantineSelectedAssetStart(assetID, quarantineReason)) },\r\n    getUpdatedStatus:   (assetID)                   => { dispatch(requestSelectedAssetData(assetID)) }\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Center);\r\n\r\n//^ THE CODE BELOW IS USED TO LOAD FIRST ASSET WHEN RENDERING APP FOR FIRST TIME\r\n\r\n// const [asset, setAsset] = useState(null);\r\n    \r\n// useEffect(() => {\r\n//     const fetchAsset = async() => {\r\n//         const response = await fetch(`http://localhost:3000/defaultunit`)\r\n//         const asset = await response.json()\r\n//         setAsset(asset[0]);\r\n//     }\r\n\r\n//     fetchAsset();\r\n// }, []);\r\n"]},"metadata":{},"sourceType":"module"}