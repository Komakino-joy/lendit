{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\bryan.alvarez\\\\Documents\\\\webdev\\\\git\\\\lendit\\\\lendit\\\\src\\\\components\\\\modals\\\\add-user.modal.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useAlert } from 'react-alert';\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport { currentMemberId } from \"../../redux/site-member/site-member.selectors\";\nimport { toggleAddUser } from \"../../redux/modal/modal.actions\";\nimport { requestUserDropDownOptions } from '../../redux/drop-downs/drop-down.actions';\nimport { createNewUser } from \"../../services/api\";\nimport { ModalMain, ModalContent, CloseButton, Header, Article, FieldSet, Input, Submit } from \"./modal.styles\";\n\nconst AddUser = ({\n  toggleAddUser,\n  getUserOptions,\n  memberId\n}) => {\n  _s();\n\n  const alert = useAlert();\n  let [userID, setUserID] = useState('');\n  let [fname, setFname] = useState('');\n  let [lname, setLname] = useState('');\n\n  const onUseridChange = event => {\n    setUserID(event.target.value);\n  };\n\n  const onFnameChange = event => {\n    setFname(event.target.value);\n  };\n\n  const onLnameChange = event => {\n    setLname(event.target.value);\n  };\n\n  const inputReset = () => {\n    userID = null;\n    fname = null;\n    lname = null;\n    document.getElementById('userid').value = '';\n    document.getElementById('fname').value = '';\n    document.getElementById('lname').value = '';\n    document.getElementById('userid').focus();\n  };\n\n  const submitUser = event => {\n    if (userID && fname && lname && memberId) {\n      createNewUser(userID, fname, lname, memberId);\n      alert.show(`${userID} submitted.`, {\n        type: 'success',\n        position: 'top center'\n      });\n      inputReset();\n    } else {\n      alert.show('Please ensure that all fields are filled out.', {\n        type: 'error',\n        position: 'top center'\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(ModalMain, {\n    children: /*#__PURE__*/_jsxDEV(ModalContent, {\n      children: [/*#__PURE__*/_jsxDEV(CloseButton, {\n        onClick: () => {\n          toggleAddUser();\n          getUserOptions(memberId);\n        },\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Header, {\n        children: \"Add User\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Article, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          action: \"sign-up_submit\",\n          method: \"get\",\n          acceptCharset: \"utf-8\",\n          children: [/*#__PURE__*/_jsxDEV(FieldSet, {\n            id: \"sign_up\",\n            children: [/*#__PURE__*/_jsxDEV(Input, {\n              onChange: onUseridChange,\n              placeholder: \"User ID (Required)\",\n              type: \"text\",\n              name: \"userid\",\n              id: \"userid\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              onChange: onFnameChange,\n              placeholder: \"First Name (Required)\",\n              type: \"text\",\n              name: \"fname\",\n              id: \"fname\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              onChange: onLnameChange,\n              placeholder: \"Last Name (Required)\",\n              type: \"text\",\n              name: \"lname\",\n              id: \"lname\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Submit, {\n            onClick: () => submitUser(),\n            type: \"submit\",\n            defaultValue: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 4\n  }, this);\n};\n\n_s(AddUser, \"rehpZl+8NPEGRXZrWIsQW2//pQw=\", false, function () {\n  return [useAlert];\n});\n\n_c = AddUser;\nconst mapStateToProps = createStructuredSelector({\n  memberId: currentMemberId\n});\n\nconst mapDispatchToProps = dispatch => ({\n  toggleAddUser: () => dispatch(toggleAddUser()),\n  getUserOptions: memberId => {\n    dispatch(requestUserDropDownOptions(memberId));\n  }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddUser);\n\nvar _c;\n\n$RefreshReg$(_c, \"AddUser\");","map":{"version":3,"sources":["C:/Users/bryan.alvarez/Documents/webdev/git/lendit/lendit/src/components/modals/add-user.modal.jsx"],"names":["React","useState","useAlert","connect","createStructuredSelector","currentMemberId","toggleAddUser","requestUserDropDownOptions","createNewUser","ModalMain","ModalContent","CloseButton","Header","Article","FieldSet","Input","Submit","AddUser","getUserOptions","memberId","alert","userID","setUserID","fname","setFname","lname","setLname","onUseridChange","event","target","value","onFnameChange","onLnameChange","inputReset","document","getElementById","focus","submitUser","show","type","position","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { useAlert } from 'react-alert';\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { createStructuredSelector } from \"reselect\";\r\nimport { currentMemberId } from \"../../redux/site-member/site-member.selectors\";\r\n\r\nimport { toggleAddUser } from \"../../redux/modal/modal.actions\";\r\nimport { requestUserDropDownOptions } from '../../redux/drop-downs/drop-down.actions';\r\n\r\nimport { createNewUser } from \"../../services/api\";\r\n\r\nimport { ModalMain, ModalContent, CloseButton, Header, Article, FieldSet, Input,Submit } from \"./modal.styles\";\r\n\r\nconst AddUser = ( {toggleAddUser, getUserOptions, memberId} ) =>{\r\n\r\n  const alert = useAlert();\r\n\r\n  let [userID, setUserID] = useState('');\r\n  let [fname, setFname] = useState('');\r\n  let [lname, setLname] = useState('');\r\n\r\n  const onUseridChange = (event) => {\r\n    setUserID(event.target.value); \r\n  } ;\r\n\r\n  const onFnameChange = (event) => {\r\n    setFname(event.target.value);\r\n  };\r\n\r\n const onLnameChange = (event) => {\r\n    setLname(event.target.value); \r\n  };\r\n\r\n  const inputReset = () => {\r\n    userID = null;\r\n    fname = null;\r\n    lname = null;\r\n    document.getElementById('userid').value = '';\r\n    document.getElementById('fname').value = '';\r\n    document.getElementById('lname').value = '';\r\n    document.getElementById('userid').focus();\r\n  };\r\n\r\n  const submitUser = (event) => {\r\n    if (userID && fname && lname && memberId){\r\n      createNewUser(userID, fname, lname, memberId);\r\n      alert.show(`${userID} submitted.`, {type: 'success', position:'top center'});\r\n      inputReset();\r\n    } else {\r\n      alert.show('Please ensure that all fields are filled out.', {type: 'error', position:'top center'});\r\n    }\r\n  };\r\n  \r\n  return (\r\n   <ModalMain>\r\n      <ModalContent>\r\n        {/* Retrieve updated list of users when modal is closed. */}\r\n        <CloseButton onClick={() => {toggleAddUser(); getUserOptions(memberId);}}>&times;</CloseButton>\r\n        <Header>Add User</Header>\r\n        <Article>\r\n          <div action=\"sign-up_submit\" method=\"get\" acceptCharset=\"utf-8\">\r\n            <FieldSet id=\"sign_up\">\r\n                <Input onChange={onUseridChange} placeholder=\"User ID (Required)\" type=\"text\" name=\"userid\" id=\"userid\"/>\r\n                <Input onChange={onFnameChange}  placeholder=\"First Name (Required)\"  type=\"text\" name=\"fname\"  id=\"fname\" />\r\n                <Input onChange={onLnameChange}  placeholder=\"Last Name (Required)\" type=\"text\" name=\"lname\"  id=\"lname\"/>\r\n            </FieldSet>\r\n            <Submit onClick={() => submitUser()} type = \"submit\" defaultValue=\"Submit\"/>\r\n          </div>\r\n        </Article>\r\n      </ModalContent>\r\n   </ModalMain>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  memberId: currentMemberId\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  toggleAddUser : () => dispatch(toggleAddUser()),\r\n  getUserOptions: (memberId) => { dispatch(requestUserDropDownOptions(memberId))}\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddUser);"]},"metadata":{},"sourceType":"module"}