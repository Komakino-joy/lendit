{"ast":null,"code":"import { call, put, takeLatest, all } from \"redux-saga/effects\";\nimport { REQUEST_SELECTED_ASSET, CHECK_IN_SELECTED_ASSET_START, CHECK_OUT_SELECTED_ASSET_START, receiveSelectedAssetData, checkInSelectedAssetSuccess, checkOutSelectedAssetSuccess } from \"../asset/asset.actions\";\nimport { fetchSelectedAssetData, checkInAsset, checkOutAsset } from \"../../services/api\"; // worker Saga: will be fired on USER_FETCH_REQUESTED actions\n\nfunction* getRequestedSelectedAssetData(action) {\n  try {\n    // do api call\n    const assetData = yield call(fetchSelectedAssetData, action.assetID);\n    yield put(receiveSelectedAssetData(assetData));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction* postCheckInSelectedAsset(action) {\n  try {\n    const assetData = yield call(checkInAsset, action.assetID);\n    yield put(checkInSelectedAssetSuccess(assetData));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction* postCheckOutSelectedAsset(action) {\n  try {\n    const assetData = yield call(checkOutAsset, action.assetID, action.userID);\n    yield put(checkOutSelectedAssetSuccess(assetData));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport function* requestSelectedAssetSaga() {\n  yield takeLatest(REQUEST_SELECTED_ASSET, getRequestedSelectedAssetData);\n}\nexport function* checkInSelectedAssetSaga() {\n  yield takeLatest(CHECK_IN_SELECTED_ASSET_START, postCheckInSelectedAsset);\n}\nexport function* checkOutSelectedAssetSaga() {\n  yield takeLatest(CHECK_OUT_SELECTED_ASSET_START, postCheckOutSelectedAsset);\n}\nexport function* assetSagas() {\n  yield all([call(requestSelectedAssetSaga), call(checkInSelectedAssetSaga), call(checkOutSelectedAssetSaga)]);\n}\n;","map":{"version":3,"sources":["C:/Users/bryan.alvarez/Documents/webdev/git/comp-overload/client/src/redux/asset/asset.sagas.js"],"names":["call","put","takeLatest","all","REQUEST_SELECTED_ASSET","CHECK_IN_SELECTED_ASSET_START","CHECK_OUT_SELECTED_ASSET_START","receiveSelectedAssetData","checkInSelectedAssetSuccess","checkOutSelectedAssetSuccess","fetchSelectedAssetData","checkInAsset","checkOutAsset","getRequestedSelectedAssetData","action","assetData","assetID","error","console","log","postCheckInSelectedAsset","postCheckOutSelectedAsset","userID","requestSelectedAssetSaga","checkInSelectedAssetSaga","checkOutSelectedAssetSaga","assetSagas"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,UAApB,EAAgCC,GAAhC,QAA6C,oBAA7C;AAEA,SACIC,sBADJ,EAEIC,6BAFJ,EAGIC,8BAHJ,EAIIC,wBAJJ,EAKIC,2BALJ,EAMIC,4BANJ,QAOU,wBAPV;AASA,SACEC,sBADF,EAEEC,YAFF,EAGEC,aAHF,QAIQ,oBAJR,C,CAMA;;AACA,UAAUC,6BAAV,CAAwCC,MAAxC,EAAgD;AAC9C,MAAI;AACF;AACA,UAAMC,SAAS,GAAG,MAAMf,IAAI,CAACU,sBAAD,EAAyBI,MAAM,CAACE,OAAhC,CAA5B;AACA,UAAMf,GAAG,CAACM,wBAAwB,CAACQ,SAAD,CAAzB,CAAT;AACD,GAJD,CAIE,OAAOE,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF;;AAED,UAAUG,wBAAV,CAAmCN,MAAnC,EAA2C;AACzC,MAAG;AACD,UAAMC,SAAS,GAAG,MAAMf,IAAI,CAACW,YAAD,EAAeG,MAAM,CAACE,OAAtB,CAA5B;AACA,UAAMf,GAAG,CAACO,2BAA2B,CAACO,SAAD,CAA5B,CAAT;AACD,GAHD,CAGG,OAAOE,KAAP,EAAc;AACfC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF;;AAED,UAAUI,yBAAV,CAAoCP,MAApC,EAA4C;AAC1C,MAAG;AACD,UAAMC,SAAS,GAAG,MAAMf,IAAI,CAACY,aAAD,EAAgBE,MAAM,CAACE,OAAvB,EAAgCF,MAAM,CAACQ,MAAvC,CAA5B;AACA,UAAMrB,GAAG,CAACQ,4BAA4B,CAACM,SAAD,CAA7B,CAAT;AACD,GAHD,CAGG,OAAOE,KAAP,EAAc;AACfC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF;;AAGD,OAAQ,UAAUM,wBAAV,GAAqC;AAC3C,QAAMrB,UAAU,CAACE,sBAAD,EAAyBS,6BAAzB,CAAhB;AACD;AAGD,OAAQ,UAAUW,wBAAV,GAAqC;AAC3C,QAAMtB,UAAU,CAACG,6BAAD,EAAgCe,wBAAhC,CAAhB;AACD;AAED,OAAQ,UAAUK,yBAAV,GAAsC;AAC5C,QAAMvB,UAAU,CAACI,8BAAD,EAAiCe,yBAAjC,CAAhB;AACD;AAED,OAAO,UAAUK,UAAV,GAAuB;AAC1B,QAAMvB,GAAG,CAAC,CACRH,IAAI,CAAEuB,wBAAF,CADI,EAERvB,IAAI,CAACwB,wBAAD,CAFI,EAGRxB,IAAI,CAACyB,yBAAD,CAHI,CAAD,CAAT;AAKH;AAAA","sourcesContent":["import { call, put, takeLatest, all,  } from \"redux-saga/effects\";\r\n\r\nimport { \r\n    REQUEST_SELECTED_ASSET,\r\n    CHECK_IN_SELECTED_ASSET_START,\r\n    CHECK_OUT_SELECTED_ASSET_START,\r\n    receiveSelectedAssetData,\r\n    checkInSelectedAssetSuccess,\r\n    checkOutSelectedAssetSuccess\r\n   } from \"../asset/asset.actions\";\r\n\r\nimport { \r\n  fetchSelectedAssetData,\r\n  checkInAsset,\r\n  checkOutAsset\r\n } from \"../../services/api\";\r\n\r\n// worker Saga: will be fired on USER_FETCH_REQUESTED actions\r\nfunction* getRequestedSelectedAssetData(action) {\r\n  try {\r\n    // do api call\r\n    const assetData = yield call(fetchSelectedAssetData, action.assetID);\r\n    yield put(receiveSelectedAssetData(assetData));\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nfunction* postCheckInSelectedAsset(action) {\r\n  try{\r\n    const assetData = yield call(checkInAsset, action.assetID )\r\n    yield put(checkInSelectedAssetSuccess(assetData))\r\n  }  catch (error) {\r\n    console.log(error)\r\n  }\r\n}\r\n\r\nfunction* postCheckOutSelectedAsset(action) {\r\n  try{\r\n    const assetData = yield call(checkOutAsset, action.assetID, action.userID )\r\n    yield put(checkOutSelectedAssetSuccess(assetData))\r\n  }  catch (error) {\r\n    console.log(error)\r\n  }\r\n}\r\n\r\n\r\nexport  function* requestSelectedAssetSaga() {\r\n  yield takeLatest(REQUEST_SELECTED_ASSET, getRequestedSelectedAssetData);\r\n}\r\n\r\n\r\nexport  function* checkInSelectedAssetSaga() {\r\n  yield takeLatest(CHECK_IN_SELECTED_ASSET_START, postCheckInSelectedAsset);\r\n}\r\n\r\nexport  function* checkOutSelectedAssetSaga() {\r\n  yield takeLatest(CHECK_OUT_SELECTED_ASSET_START, postCheckOutSelectedAsset);\r\n}\r\n\r\nexport function* assetSagas() {\r\n    yield all([\r\n      call (requestSelectedAssetSaga), \r\n      call(checkInSelectedAssetSaga),\r\n      call(checkOutSelectedAssetSaga)\r\n    ])\r\n};"]},"metadata":{},"sourceType":"module"}