{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\alvar\\\\Documents\\\\WebDev\\\\comp-overload\\\\client\\\\src\\\\components\\\\custom-drop-down\\\\user-drop-down.component.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport './drop-down.styles.scss';\nimport { createStructuredSelector } from 'reselect';\nimport { connect } from \"react-redux\";\nimport { requestSelectedUserData } from \"../../redux/user/user.actions\";\nimport { requestUserDropDownOptions } from '../../redux/drop-downs/drop-down.actions';\nimport selectedListItemID from \"./drop-down.utils\";\nimport { selectUsers } from \"../../redux/drop-downs/drop-down.selectors\";\nimport { currentMemberId } from \"../../redux/site-member/site-member.selectors\";\n\nconst AssetDropDown = ({\n  getUserDetails,\n  getUserOptions,\n  users,\n  memberId\n}) => {\n  _s();\n\n  useEffect(() => {\n    // Get Data from /allusers when component mounts.\n    getUserOptions(memberId);\n  }, [getUserOptions, memberId]); // getUserOptions will not update, it was passed as a dependency to mute the console.warning. \n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"combo-box-container\",\n    children: /*#__PURE__*/_jsxDEV(\"select\", {\n      id: \"user-list\",\n      className: \"combo-box\",\n      onChange: getUserDetails,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        text: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this), users ? users.map(user => /*#__PURE__*/_jsxDEV(\"option\", {\n        children: [\" \", user.id, \" \"]\n      }, user.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 21\n      }, this)) : /*#__PURE__*/_jsxDEV(\"option\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AssetDropDown, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = AssetDropDown;\nconst mapStateToProps = createStructuredSelector({\n  memberId: currentMemberId,\n  users: selectUsers\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getUserDetails: () => {\n    dispatch(requestSelectedUserData(selectedListItemID('user-list')));\n  },\n  getUserOptions: memberId => {\n    dispatch(requestUserDropDownOptions(memberId));\n  }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AssetDropDown);\n\nvar _c;\n\n$RefreshReg$(_c, \"AssetDropDown\");","map":{"version":3,"sources":["C:/Users/alvar/Documents/WebDev/comp-overload/client/src/components/custom-drop-down/user-drop-down.component.jsx"],"names":["React","useEffect","createStructuredSelector","connect","requestSelectedUserData","requestUserDropDownOptions","selectedListItemID","selectUsers","currentMemberId","AssetDropDown","getUserDetails","getUserOptions","users","memberId","map","user","id","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";;;;;AACA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,yBAAP;AACA,SAASC,wBAAT,QAAyC,UAAzC;AAEA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,uBAAT,QAAwC,+BAAxC;AACA,SAASC,0BAAT,QAA2C,0CAA3C;AAEA,OAAQC,kBAAR,MAAiC,mBAAjC;AACA,SAASC,WAAT,QAA4B,4CAA5B;AACA,SAASC,eAAT,QAAgC,+CAAhC;;AAEA,MAAMC,aAAa,GAAE,CAAC;AAAEC,EAAAA,cAAF;AAAkBC,EAAAA,cAAlB;AAAkCC,EAAAA,KAAlC;AAAyCC,EAAAA;AAAzC,CAAD,KAAyD;AAAA;;AAE1EZ,EAAAA,SAAS,CAAC,MAAM;AACZ;AACAU,IAAAA,cAAc,CAACE,QAAD,CAAd;AACD,GAHM,EAGJ,CAACF,cAAD,EAAiBE,QAAjB,CAHI,CAAT,CAF0E,CAKxC;;AAElC,sBACI;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAA,2BACI;AAAQ,MAAA,EAAE,EAAC,WAAX;AAAuB,MAAA,SAAS,EAAG,WAAnC;AAA+C,MAAA,QAAQ,EAAEH,cAAzD;AAAA,8BACI;AAAQ,QAAA,IAAI,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,cADJ,EAGQE,KAAK,GACDA,KAAK,CAACE,GAAN,CAAUC,IAAI,iBAClB;AAAA,wBAA2BA,IAAI,CAACC,EAAhC;AAAA,SAAcD,IAAI,CAACC,EAAnB;AAAA;AAAA;AAAA;AAAA,cADI,CADC,gBAKL;AAAA;AAAA;AAAA;AAAA,cARR;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAgBH,CAvBD;;GAAMP,a;;KAAAA,a;AAyBN,MAAMQ,eAAe,GAAGf,wBAAwB,CAAC;AAC7CW,EAAAA,QAAQ,EAAEL,eADmC;AAE7CI,EAAAA,KAAK,EAAEL;AAFsC,CAAD,CAAhD;;AAKA,MAAMW,kBAAkB,GAAIC,QAAD,KAAe;AACtCT,EAAAA,cAAc,EAAE,MAAM;AAAES,IAAAA,QAAQ,CAAEf,uBAAuB,CAAGE,kBAAkB,CAAC,WAAD,CAArB,CAAzB,CAAR;AAAwE,GAD1D;AAEtCK,EAAAA,cAAc,EAAGE,QAAD,IAAc;AAAEM,IAAAA,QAAQ,CAAEd,0BAA0B,CAACQ,QAAD,CAA5B,CAAR;AAAiD;AAF3C,CAAf,CAA3B;;AAKA,eAAeV,OAAO,CAACc,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CT,aAA7C,CAAf","sourcesContent":["\r\nimport React, {useEffect} from 'react'\r\nimport './drop-down.styles.scss'\r\nimport { createStructuredSelector } from 'reselect';\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { requestSelectedUserData } from \"../../redux/user/user.actions\";\r\nimport { requestUserDropDownOptions } from '../../redux/drop-downs/drop-down.actions'\r\n\r\nimport  selectedListItemID  from \"./drop-down.utils\";\r\nimport { selectUsers } from \"../../redux/drop-downs/drop-down.selectors\";\r\nimport { currentMemberId } from \"../../redux/site-member/site-member.selectors\";\r\n\r\nconst AssetDropDown =({ getUserDetails, getUserOptions, users, memberId }) => {\r\n\r\n    useEffect(() => {\r\n        // Get Data from /allusers when component mounts.\r\n        getUserOptions(memberId)\r\n      }, [getUserOptions, memberId]); // getUserOptions will not update, it was passed as a dependency to mute the console.warning. \r\n    \r\n    return(\r\n        <div className='combo-box-container'>\r\n            <select id=\"user-list\" className = 'combo-box' onChange={getUserDetails} >\r\n                <option text=' '/>\r\n                {   \r\n                    users ? (\r\n                        users.map(user => (\r\n                    <option key={ user.id }> { user.id } </option> \r\n                    ))\r\n                    ):(\r\n                    <option></option>\r\n                    )\r\n                }\r\n            </select>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    memberId: currentMemberId,\r\n    users: selectUsers\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    getUserDetails: () => { dispatch( requestSelectedUserData ( selectedListItemID('user-list') ) )},\r\n    getUserOptions: (memberId) => { dispatch( requestUserDropDownOptions(memberId)) }\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AssetDropDown);\r\n"]},"metadata":{},"sourceType":"module"}