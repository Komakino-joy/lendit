{"ast":null,"code":"import { call, put, takeEvery, takeLatest, all } from \"redux-saga/effects\";\nimport { REQUEST_SELECTED_ASSET, receiveSelectedAssetData, checkInSelectedAsset } from \"../asset/asset.actions\";\nimport { fetchSelectedAssetData, checkInAsset } from \"../../services/api\"; // worker Saga: will be fired on USER_FETCH_REQUESTED actions\n\nfunction* getRequestedSelectedAssetData(action) {\n  try {\n    // do api call\n    const assetData = yield call(fetchSelectedAssetData, action.assetID);\n    yield put(receiveSelectedAssetData(assetData));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction* postCheckInSelectedAsset(action) {\n  try {\n    const assetData = yield call(checkInAsset, action.assetID);\n    yield put(checkInSelectedAsset(assetData));\n  } catch (error) {\n    console.log(error);\n  }\n}\n/*\r\n  Alternatively you may use takeLatest.\r\n\r\n  Does not allow concurrent fetches of user. If \"USER_FETCH_REQUESTED\" gets\r\n  dispatched while a fetch is already pending, that pending fetch is cancelled\r\n  and only the latest one will be run.\r\n*/\n\n\nexport function* requestSelectedAssetSaga() {\n  yield takeLatest(REQUEST_SELECTED_ASSET, [getRequestedSelectedAssetData, postCheckInSelectedAsset]);\n}\nexport function* assetSagas() {\n  yield all([call(requestSelectedAssetSaga)]);\n}\n;","map":{"version":3,"sources":["C:/Users/alvar/Documents/WebDev/comp-overload/src/redux/asset/asset.sagas.js"],"names":["call","put","takeEvery","takeLatest","all","REQUEST_SELECTED_ASSET","receiveSelectedAssetData","checkInSelectedAsset","fetchSelectedAssetData","checkInAsset","getRequestedSelectedAssetData","action","assetData","assetID","error","console","log","postCheckInSelectedAsset","requestSelectedAssetSaga","assetSagas"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,SAApB,EAA+BC,UAA/B,EAA2CC,GAA3C,QAAsD,oBAAtD;AAEA,SACIC,sBADJ,EAEIC,wBAFJ,EAGIC,oBAHJ,QAIU,wBAJV;AAMA,SACEC,sBADF,EAEEC,YAFF,QAGQ,oBAHR,C,CAKA;;AACA,UAAUC,6BAAV,CAAwCC,MAAxC,EAAgD;AAC9C,MAAI;AACF;AACA,UAAMC,SAAS,GAAG,MAAMZ,IAAI,CAACQ,sBAAD,EAAyBG,MAAM,CAACE,OAAhC,CAA5B;AACA,UAAMZ,GAAG,CAACK,wBAAwB,CAACM,SAAD,CAAzB,CAAT;AACD,GAJD,CAIE,OAAOE,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF;;AAED,UAAUG,wBAAV,CAAmCN,MAAnC,EAA2C;AACzC,MAAG;AACD,UAAMC,SAAS,GAAG,MAAMZ,IAAI,CAACS,YAAD,EAAeE,MAAM,CAACE,OAAtB,CAA5B;AACA,UAAMZ,GAAG,CAACM,oBAAoB,CAACK,SAAD,CAArB,CAAT;AACD,GAHD,CAGG,OAAOE,KAAP,EAAc;AACfC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAQ,UAAUI,wBAAV,GAAqC;AAC3C,QAAMf,UAAU,CAACE,sBAAD,EAAyB,CAACK,6BAAD,EAAgCO,wBAAhC,CAAzB,CAAhB;AACD;AAED,OAAO,UAAUE,UAAV,GAAuB;AAC1B,QAAMf,GAAG,CAAC,CAACJ,IAAI,CAAEkB,wBAAF,CAAL,CAAD,CAAT;AACH;AAAA","sourcesContent":["import { call, put, takeEvery, takeLatest, all } from \"redux-saga/effects\";\r\n\r\nimport { \r\n    REQUEST_SELECTED_ASSET,\r\n    receiveSelectedAssetData,\r\n    checkInSelectedAsset\r\n   } from \"../asset/asset.actions\";\r\n\r\nimport { \r\n  fetchSelectedAssetData,\r\n  checkInAsset\r\n } from \"../../services/api\";\r\n\r\n// worker Saga: will be fired on USER_FETCH_REQUESTED actions\r\nfunction* getRequestedSelectedAssetData(action) {\r\n  try {\r\n    // do api call\r\n    const assetData = yield call(fetchSelectedAssetData, action.assetID);\r\n    yield put(receiveSelectedAssetData(assetData));\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nfunction* postCheckInSelectedAsset(action) {\r\n  try{\r\n    const assetData = yield call(checkInAsset, action.assetID )\r\n    yield put(checkInSelectedAsset(assetData))\r\n  }  catch (error) {\r\n    console.log(error)\r\n  }\r\n}\r\n\r\n/*\r\n  Alternatively you may use takeLatest.\r\n\r\n  Does not allow concurrent fetches of user. If \"USER_FETCH_REQUESTED\" gets\r\n  dispatched while a fetch is already pending, that pending fetch is cancelled\r\n  and only the latest one will be run.\r\n*/\r\nexport  function* requestSelectedAssetSaga() {\r\n  yield takeLatest(REQUEST_SELECTED_ASSET, [getRequestedSelectedAssetData, postCheckInSelectedAsset]);\r\n}\r\n\r\nexport function* assetSagas() {\r\n    yield all([call (requestSelectedAssetSaga)])\r\n};"]},"metadata":{},"sourceType":"module"}