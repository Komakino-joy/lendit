{"ast":null,"code":"import { call, put, takeLatest, all } from \"redux-saga/effects\";\nimport AssetActionTypes from './asset.types';\nimport { receiveSelectedAssetData, checkInSelectedAssetSuccess, checkOutSelectedAssetSuccess, quarantineSelectedAssetSuccess } from \"../asset/asset.actions\";\nimport { httpFetchSelectedAssetData, httpCheckInAsset, httpCheckOutAsset, httpQuarantineAsset } from \"../../services/api\"; // worker Saga: will be fired on USER_FETCH_REQUESTED actions\n\nfunction* getRequestedSelectedAssetData(action) {\n  try {\n    // do api call\n    const assetData = yield call(httpFetchSelectedAssetData, action.assetID, action.ownerID);\n    yield put(receiveSelectedAssetData(assetData));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n;\nexport function* requestSelectedAssetSaga() {\n  yield takeLatest(REQUEST_SELECTED_ASSET, getRequestedSelectedAssetData);\n}\n;\n\nfunction* postCheckInSelectedAsset(action) {\n  try {\n    const assetData = yield call(httpCheckInAsset, action.assetID, action.userId, action.ownerId, action.assetName, action.assetSerial, action.assetModel);\n    yield put(checkInSelectedAssetSuccess(assetData));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n;\nexport function* checkInSelectedAssetSaga() {\n  yield takeLatest(CHECK_IN_SELECTED_ASSET_START, postCheckInSelectedAsset);\n}\n;\n\nfunction* postCheckOutSelectedAsset(action) {\n  try {\n    const assetData = yield call(httpCheckOutAsset, action.assetID, action.userID, action.ownerId, action.assetName, action.assetSerial, action.assetModel);\n    yield put(checkOutSelectedAssetSuccess(assetData));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n;\nexport function* checkOutSelectedAssetSaga() {\n  yield takeLatest(CHECK_OUT_SELECTED_ASSET_START, postCheckOutSelectedAsset);\n}\n;\n\nfunction* postQuarantineSelectedAsset(action) {\n  try {\n    const assetData = yield call(httpQuarantineAsset, action.assetID, action.userID, action.ownerId, action.assetName, action.assetSerial, action.assetModel, action.comment);\n    yield put(quarantineSelectedAssetSuccess(assetData));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n;\nexport function* quarantineSelectedAssetSaga() {\n  yield takeLatest(QUARANTINE_SELECTED_ASSET_START, postQuarantineSelectedAsset);\n}\n;\nexport function* assetSagas() {\n  yield all([call(requestSelectedAssetSaga), call(checkInSelectedAssetSaga), call(checkOutSelectedAssetSaga), call(quarantineSelectedAssetSaga)]);\n}\n;","map":{"version":3,"sources":["C:/Users/alvar/Documents/WebDev/lendit/lendit/src/redux/asset/asset.sagas.js"],"names":["call","put","takeLatest","all","AssetActionTypes","receiveSelectedAssetData","checkInSelectedAssetSuccess","checkOutSelectedAssetSuccess","quarantineSelectedAssetSuccess","httpFetchSelectedAssetData","httpCheckInAsset","httpCheckOutAsset","httpQuarantineAsset","getRequestedSelectedAssetData","action","assetData","assetID","ownerID","error","console","log","requestSelectedAssetSaga","REQUEST_SELECTED_ASSET","postCheckInSelectedAsset","userId","ownerId","assetName","assetSerial","assetModel","checkInSelectedAssetSaga","CHECK_IN_SELECTED_ASSET_START","postCheckOutSelectedAsset","userID","checkOutSelectedAssetSaga","CHECK_OUT_SELECTED_ASSET_START","postQuarantineSelectedAsset","comment","quarantineSelectedAssetSaga","QUARANTINE_SELECTED_ASSET_START","assetSagas"],"mappings":"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","sourcesContent":["import { call, put, takeLatest, all } from \"redux-saga/effects\";\r\n\r\nimport AssetActionTypes from './asset.types';\r\n\r\nimport { \r\n    receiveSelectedAssetData,\r\n    checkInSelectedAssetSuccess,\r\n    checkOutSelectedAssetSuccess, \r\n    quarantineSelectedAssetSuccess\r\n   } from \"../asset/asset.actions\";\r\n\r\nimport { \r\n  httpFetchSelectedAssetData,\r\n  httpCheckInAsset,\r\n  httpCheckOutAsset,\r\n  httpQuarantineAsset\r\n } from \"../../services/api\";\r\n\r\n// worker Saga: will be fired on USER_FETCH_REQUESTED actions\r\nfunction* getRequestedSelectedAssetData(action) {\r\n  try {\r\n    // do api call\r\n    const assetData = yield call(httpFetchSelectedAssetData, action.assetID, action.ownerID);\r\n    yield put(receiveSelectedAssetData(assetData));\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport  function* requestSelectedAssetSaga() {\r\n  yield takeLatest(REQUEST_SELECTED_ASSET, getRequestedSelectedAssetData);\r\n};\r\n\r\nfunction* postCheckInSelectedAsset(action) {\r\n  try{\r\n    const assetData = yield call(httpCheckInAsset, action.assetID, action.userId, action.ownerId, action.assetName, action.assetSerial, action.assetModel )\r\n    yield put(checkInSelectedAssetSuccess(assetData))\r\n  }  catch (error) {\r\n    console.log(error)\r\n  }\r\n};\r\n\r\nexport  function* checkInSelectedAssetSaga() {\r\n  yield takeLatest(CHECK_IN_SELECTED_ASSET_START, postCheckInSelectedAsset);\r\n};\r\n\r\nfunction* postCheckOutSelectedAsset(action) {\r\n  try{\r\n    const assetData = yield call(httpCheckOutAsset, action.assetID, action.userID, action.ownerId, action.assetName, action.assetSerial, action.assetModel )\r\n    yield put(checkOutSelectedAssetSuccess(assetData))\r\n  }  catch (error) {\r\n    console.log(error)\r\n  }\r\n};\r\n\r\nexport  function* checkOutSelectedAssetSaga() {\r\n  yield takeLatest(CHECK_OUT_SELECTED_ASSET_START, postCheckOutSelectedAsset);\r\n};\r\n\r\nfunction* postQuarantineSelectedAsset(action) {\r\n  try{\r\n    const assetData = yield call(httpQuarantineAsset, action.assetID, action.userID, action.ownerId, action.assetName, action.assetSerial, action.assetModel, action.comment )\r\n    yield put(quarantineSelectedAssetSuccess(assetData))\r\n  }  catch (error) {\r\n    console.log(error)\r\n  }\r\n};\r\n\r\nexport  function* quarantineSelectedAssetSaga() {\r\n  yield takeLatest(QUARANTINE_SELECTED_ASSET_START, postQuarantineSelectedAsset);\r\n};\r\n\r\n\r\nexport function* assetSagas() {\r\n    yield all([\r\n      call(requestSelectedAssetSaga), \r\n      call(checkInSelectedAssetSaga),\r\n      call(checkOutSelectedAssetSaga),\r\n      call(quarantineSelectedAssetSaga)\r\n    ])\r\n};"]},"metadata":{},"sourceType":"module"}