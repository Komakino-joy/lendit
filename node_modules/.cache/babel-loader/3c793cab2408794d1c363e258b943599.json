{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\alvar\\\\Documents\\\\WebDev\\\\comp-overload\\\\client\\\\src\\\\components\\\\custom-drop-down\\\\asset-drop-down.component.jsx\";\nimport React from 'react';\nimport './drop-down.styles.scss';\nimport { createStructuredSelector } from 'reselect'; // import useDropDownFetch from '../../effects/use-fetch-drop-down.effect';\n\nimport { connect } from \"react-redux\";\nimport { requestSelectedAssetData } from \"../../redux/asset/asset.actions\";\nimport { requestDropDownOptions, receiveDropDownOptions } from '../../redux/drop-downs/drop-down.actions';\nimport selectedListItemID from \"./drop-down.utils\";\nimport { selectDropDownItems } from \"../../redux/drop-downs/drop-down.selectors\";\n\nconst AssetDropDown = ({\n  getAssetDetails,\n  getAssetOptions,\n  assetDropDown,\n  dropDownItems\n}) => {\n  // useDropDownFetch(`http://localhost:3000/allunits`, 'asset-list');\n  const loadOptions = stateObject => {\n    const input = document.getElementById(`asset-list`);\n\n    for (var i = 0; i < stateObject.length; i++) {\n      var option = document.createElement(\"option\");\n      option.value = stateObject[i].id;\n      option.text = stateObject[i].id;\n      input.appendChild(option);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"combo-box-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => console.log(dropDownItems),\n      children: \" console log DDS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => loadOptions(assetDropDown),\n      children: \" Load options\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      id: \"asset-list\",\n      className: \"combo-box\",\n      onChange: getAssetDetails,\n      onClick: getAssetOptions,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        text: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this), // Conditionally render cart items or empty cart message\n      dropDownItems.length ? dropDownItems.map(cartItem => /*#__PURE__*/_jsxDEV(\"option\", {\n        item: cartItem\n      }, cartItem.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 21\n      }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Your cart is empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n};\n\n_c = AssetDropDown;\nconst mapStateToProps = createStructuredSelector({\n  dropDownItems: selectDropDownItems\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getAssetDetails: () => {\n    dispatch(requestSelectedAssetData(selectedListItemID('asset-list')));\n  },\n  getAssetOptions: () => {\n    dispatch(requestDropDownOptions());\n  }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AssetDropDown);\n\nvar _c;\n\n$RefreshReg$(_c, \"AssetDropDown\");","map":{"version":3,"sources":["C:/Users/alvar/Documents/WebDev/comp-overload/client/src/components/custom-drop-down/asset-drop-down.component.jsx"],"names":["React","createStructuredSelector","connect","requestSelectedAssetData","requestDropDownOptions","receiveDropDownOptions","selectedListItemID","selectDropDownItems","AssetDropDown","getAssetDetails","getAssetOptions","assetDropDown","dropDownItems","loadOptions","stateObject","input","document","getElementById","i","length","option","createElement","value","id","text","appendChild","console","log","map","cartItem","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,yBAAP;AACA,SAASC,wBAAT,QAAyC,UAAzC,C,CAEA;;AAEA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,wBAAT,QAAyC,iCAAzC;AACA,SAASC,sBAAT,EAAiCC,sBAAjC,QAA+D,0CAA/D;AAEA,OAAQC,kBAAR,MAAiC,mBAAjC;AACA,SAASC,mBAAT,QAAoC,4CAApC;;AAEA,MAAMC,aAAa,GAAE,CAAC;AAAEC,EAAAA,eAAF;AAAmBC,EAAAA,eAAnB;AAAoCC,EAAAA,aAApC;AAAmDC,EAAAA;AAAnD,CAAD,KAAwE;AAEzF;AAEA,QAAMC,WAAW,GAAIC,WAAD,IAAiB;AACjC,UAAMC,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAyB,YAAzB,CAAd;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,WAAW,CAACK,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AACzC,UAAIE,MAAM,GAAGJ,QAAQ,CAACK,aAAT,CAAuB,QAAvB,CAAb;AACAD,MAAAA,MAAM,CAACE,KAAP,GAAeR,WAAW,CAACI,CAAD,CAAX,CAAeK,EAA9B;AACAH,MAAAA,MAAM,CAACI,IAAP,GAAcV,WAAW,CAACI,CAAD,CAAX,CAAeK,EAA7B;AACAR,MAAAA,KAAK,CAACU,WAAN,CAAkBL,MAAlB;AACH;AACJ,GATD;;AAWA,sBACI;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAA,4BACA;AAAQ,MAAA,OAAO,EAAE,MAAMM,OAAO,CAACC,GAAR,CAAYf,aAAZ,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,eAEA;AAAQ,MAAA,OAAO,EAAE,MAAMC,WAAW,CAACF,aAAD,CAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFA,eAGI;AAAQ,MAAA,EAAE,EAAC,YAAX;AAAwB,MAAA,SAAS,EAAG,WAApC;AAAgD,MAAA,QAAQ,EAAEF,eAA1D;AAA2E,MAAA,OAAO,EAAEC,eAApF;AAAA,8BACI;AAAQ,QAAA,IAAI,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,cADJ,EAGQ;AACAE,MAAAA,aAAa,CAACO,MAAd,GACIP,aAAa,CAACgB,GAAd,CAAkBC,QAAQ,iBAC9B;AAA4B,QAAA,IAAI,EAAEA;AAAlC,SAAcA,QAAQ,CAACN,EAAvB;AAAA;AAAA;AAAA;AAAA,cADI,CADJ,gBAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cATR;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAoBH,CAnCD;;KAAMf,a;AAqCN,MAAMsB,eAAe,GAAG7B,wBAAwB,CAAC;AAC7CW,EAAAA,aAAa,EAAEL;AAD8B,CAAD,CAAhD;;AAIA,MAAMwB,kBAAkB,GAAIC,QAAD,KAAe;AACtCvB,EAAAA,eAAe,EAAE,MAAM;AAAEuB,IAAAA,QAAQ,CAAC7B,wBAAwB,CAACG,kBAAkB,CAAC,YAAD,CAAnB,CAAzB,CAAR;AAAqE,GADxD;AAEtCI,EAAAA,eAAe,EAAE,MAAM;AAAEsB,IAAAA,QAAQ,CAAC5B,sBAAsB,EAAvB,CAAR;AAAmC;AAFtB,CAAf,CAA3B;;AAKA,eAAeF,OAAO,CAAC4B,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CvB,aAA7C,CAAf","sourcesContent":["\r\nimport React from 'react'\r\nimport './drop-down.styles.scss'\r\nimport { createStructuredSelector } from 'reselect';\r\n\r\n// import useDropDownFetch from '../../effects/use-fetch-drop-down.effect';\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { requestSelectedAssetData } from \"../../redux/asset/asset.actions\";\r\nimport { requestDropDownOptions, receiveDropDownOptions } from '../../redux/drop-downs/drop-down.actions'\r\n\r\nimport  selectedListItemID  from \"./drop-down.utils\";\r\nimport { selectDropDownItems } from \"../../redux/drop-downs/drop-down.selectors\";\r\n\r\nconst AssetDropDown =({ getAssetDetails, getAssetOptions, assetDropDown, dropDownItems }) => {\r\n\r\n    // useDropDownFetch(`http://localhost:3000/allunits`, 'asset-list');\r\n\r\n    const loadOptions = (stateObject) => {\r\n        const input = document.getElementById(`asset-list`)\r\n    \r\n        for (var i = 0; i < stateObject.length; i++) {\r\n            var option = document.createElement(\"option\");\r\n            option.value = stateObject[i].id;\r\n            option.text = stateObject[i].id;\r\n            input.appendChild(option);\r\n        }\r\n    };\r\n\r\n    return(\r\n        <div className='combo-box-container'  >\r\n        <button onClick={() => console.log(dropDownItems)}> console log DDS</button>\r\n        <button onClick={() => loadOptions(assetDropDown)}> Load options</button>\r\n            <select id=\"asset-list\" className = 'combo-box' onChange={getAssetDetails} onClick={getAssetOptions}>\r\n                <option text=' '/>\r\n                {   \r\n                    // Conditionally render cart items or empty cart message\r\n                    dropDownItems.length ? (\r\n                        dropDownItems.map(cartItem => (\r\n                    <option key={ cartItem.id } item={cartItem} /> \r\n                    ))\r\n                    ):(\r\n                    <div>Your cart is empty</div>\r\n                    )\r\n                }\r\n                \r\n            </select>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    dropDownItems: selectDropDownItems\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    getAssetDetails: () => { dispatch(requestSelectedAssetData(selectedListItemID('asset-list')))},\r\n    getAssetOptions: () => { dispatch(requestDropDownOptions())}\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AssetDropDown);\r\n"]},"metadata":{},"sourceType":"module"}