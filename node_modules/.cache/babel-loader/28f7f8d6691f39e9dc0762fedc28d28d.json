{"ast":null,"code":"import { call, put, takeEvery, takeLatest, all } from \"redux-saga/effects\";\nimport { REQUEST_SELECTED_ASSET, receiveSelectedAssetData } from \"../asset/asset.actions\";\nimport { fetchSelectedAssetData } from \"../../services/api\"; // worker Saga: will be fired on USER_FETCH_REQUESTED actions\n\nfunction* getRequestedSelectedAssetData(action) {\n  try {\n    // do api call\n    yield console.log('asset.sagas.js: getRequestedSelectedAssetData Function');\n    const assetData = yield call(fetchSelectedAssetData, action.assetID);\n    yield console.log('asset.sagas.js: getRequestedSelectedAssetData Function after call()');\n    yield put(receiveSelectedAssetData(assetData));\n    yield console.log('asset.sagas.js: getRequestedSelectedAssetData Function after put()');\n  } catch (e) {\n    console.log(e);\n  }\n}\n/*\r\n  Alternatively you may use takeLatest.\r\n\r\n  Does not allow concurrent fetches of user. If \"USER_FETCH_REQUESTED\" gets\r\n  dispatched while a fetch is already pending, that pending fetch is cancelled\r\n  and only the latest one will be run.\r\n*/\n\n\nexport function* requestSelectedAssetSaga() {\n  yield console.log('asset.sagas.js: requestSelectedAssetSaga Function');\n  yield takeLatest(REQUEST_SELECTED_ASSET, getRequestedSelectedAssetData);\n  yield console.log('asset.sagas.js: requestSelectedAssetSaga Function after TakeLatest()');\n}\nexport function* assetSagas() {\n  yield console.log('asset.sagas.js: assetSagas Function');\n  yield all([call(requestSelectedAssetSaga)]);\n  yield console.log('asset.sagas.js: assetSagas Function after all()');\n}\n;","map":{"version":3,"sources":["C:/Users/alvar/Documents/WebDev/comp-overload/src/redux/asset/asset.sagas.js"],"names":["call","put","takeEvery","takeLatest","all","REQUEST_SELECTED_ASSET","receiveSelectedAssetData","fetchSelectedAssetData","getRequestedSelectedAssetData","action","console","log","assetData","assetID","e","requestSelectedAssetSaga","assetSagas"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,SAApB,EAA+BC,UAA/B,EAA2CC,GAA3C,QAAsD,oBAAtD;AAEA,SAASC,sBAAT,EAAiCC,wBAAjC,QAAiE,wBAAjE;AACA,SAASC,sBAAT,QAAuC,oBAAvC,C,CAEA;;AACA,UAAUC,6BAAV,CAAwCC,MAAxC,EAAgD;AAC9C,MAAI;AACF;AACA,UAAMC,OAAO,CAACC,GAAR,CAAY,wDAAZ,CAAN;AACA,UAAMC,SAAS,GAAG,MAAMZ,IAAI,CAACO,sBAAD,EAAyBE,MAAM,CAACI,OAAhC,CAA5B;AACA,UAAMH,OAAO,CAACC,GAAR,CAAY,qEAAZ,CAAN;AACA,UAAMV,GAAG,CAACK,wBAAwB,CAACM,SAAD,CAAzB,CAAT;AACA,UAAMF,OAAO,CAACC,GAAR,CAAY,oEAAZ,CAAN;AACD,GAPD,CAOE,OAAOG,CAAP,EAAU;AACVJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,CAAZ;AACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAQ,UAAUC,wBAAV,GAAqC;AAC3C,QAAML,OAAO,CAACC,GAAR,CAAY,mDAAZ,CAAN;AACA,QAAMR,UAAU,CAACE,sBAAD,EAAyBG,6BAAzB,CAAhB;AACA,QAAME,OAAO,CAACC,GAAR,CAAY,sEAAZ,CAAN;AACD;AAED,OAAO,UAAUK,UAAV,GAAuB;AAC1B,QAAMN,OAAO,CAACC,GAAR,CAAY,qCAAZ,CAAN;AACA,QAAMP,GAAG,CAAC,CAACJ,IAAI,CAAEe,wBAAF,CAAL,CAAD,CAAT;AACA,QAAML,OAAO,CAACC,GAAR,CAAY,iDAAZ,CAAN;AACH;AAAA","sourcesContent":["import { call, put, takeEvery, takeLatest, all } from \"redux-saga/effects\";\r\n\r\nimport { REQUEST_SELECTED_ASSET, receiveSelectedAssetData } from \"../asset/asset.actions\";\r\nimport { fetchSelectedAssetData } from \"../../services/api\";\r\n\r\n// worker Saga: will be fired on USER_FETCH_REQUESTED actions\r\nfunction* getRequestedSelectedAssetData(action) {\r\n  try {\r\n    // do api call\r\n    yield console.log('asset.sagas.js: getRequestedSelectedAssetData Function')\r\n    const assetData = yield call(fetchSelectedAssetData, action.assetID);\r\n    yield console.log('asset.sagas.js: getRequestedSelectedAssetData Function after call()')\r\n    yield put(receiveSelectedAssetData(assetData));\r\n    yield console.log('asset.sagas.js: getRequestedSelectedAssetData Function after put()')\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n}\r\n\r\n/*\r\n  Alternatively you may use takeLatest.\r\n\r\n  Does not allow concurrent fetches of user. If \"USER_FETCH_REQUESTED\" gets\r\n  dispatched while a fetch is already pending, that pending fetch is cancelled\r\n  and only the latest one will be run.\r\n*/\r\nexport  function* requestSelectedAssetSaga() {\r\n  yield console.log('asset.sagas.js: requestSelectedAssetSaga Function')\r\n  yield takeLatest(REQUEST_SELECTED_ASSET, getRequestedSelectedAssetData);\r\n  yield console.log('asset.sagas.js: requestSelectedAssetSaga Function after TakeLatest()' )\r\n}\r\n\r\nexport function* assetSagas() {\r\n    yield console.log('asset.sagas.js: assetSagas Function')\r\n    yield all([call (requestSelectedAssetSaga)])\r\n    yield console.log('asset.sagas.js: assetSagas Function after all()')\r\n};"]},"metadata":{},"sourceType":"module"}