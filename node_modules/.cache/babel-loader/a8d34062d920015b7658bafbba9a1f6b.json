{"ast":null,"code":"import { call, put, takeLatest, all } from \"redux-saga/effects\";\nimport AssetActionTypes from './asset.types';\nimport { receiveSelectedAssetData, checkInSelectedAssetSuccess, checkOutSelectedAssetSuccess, quarantineSelectedAssetSuccess, removeSelectedAssetSuccess, failureSelectedAssetData, checkInSelectedAssetFailure, checkOutSelectedAssetFailure, quarantineSelectedAssetFailure, removeSelectedAssetFailure } from \"../asset/asset.actions\";\nimport { requestAssetListSaga } from \"../drop-downs/drop-downs.sagas\";\nimport { httpFetchSelectedAssetData, httpCheckInAsset, httpCheckOutAsset, httpQuarantineAsset, removeAsset } from \"../../services/api\";\n\nfunction* getRequestedSelectedAssetData({\n  payload: {\n    assetId,\n    ownerId\n  }\n}) {\n  try {\n    const assetData = yield httpFetchSelectedAssetData(assetId, ownerId);\n    yield put(receiveSelectedAssetData(assetData));\n  } catch (error) {\n    yield put(failureSelectedAssetData(error));\n  }\n}\n\n;\n\nfunction* postCheckInSelectedAsset({\n  payload: {\n    assetId,\n    userId,\n    ownerId,\n    assetName,\n    assetSerial,\n    assetModel\n  }\n}) {\n  try {\n    const assetData = yield httpCheckInAsset(assetId, userId, ownerId, assetName, assetSerial, assetModel);\n    yield put(checkInSelectedAssetSuccess({ ...assetData,\n      userId\n    }));\n  } catch (error) {\n    yield put(checkInSelectedAssetFailure(error));\n  }\n}\n\n;\n\nfunction* postCheckOutSelectedAsset({\n  payload: {\n    assetId,\n    userId,\n    ownerId,\n    assetName,\n    assetSerial,\n    assetModel\n  }\n}) {\n  try {\n    const assetData = yield httpCheckOutAsset(assetId, userId, ownerId, assetName, assetSerial, assetModel);\n    yield put(checkOutSelectedAssetSuccess({ ...assetData,\n      userId\n    }));\n  } catch (error) {\n    yield put(checkOutSelectedAssetFailure(error));\n  }\n}\n\n;\n\nfunction* postQuarantineSelectedAsset({\n  payload: {\n    assetId,\n    userId,\n    ownerId,\n    assetName,\n    assetSerial,\n    assetModel,\n    assetComments\n  }\n}) {\n  try {\n    const assetData = yield httpQuarantineAsset(assetId, userId, ownerId, assetName, assetSerial, assetModel, assetComments);\n    yield put(quarantineSelectedAssetSuccess({ ...assetData,\n      assetComments,\n      userId\n    }));\n  } catch (error) {\n    yield put(quarantineSelectedAssetFailure(error));\n  }\n}\n\n;\n\nfunction* postRemoveSelectedAsset({\n  payload: {\n    assetId,\n    currentMemberId\n  }\n}) {\n  try {\n    const assetData = yield removeAsset(assetId);\n    yield put(removeSelectedAssetSuccess(assetData));\n    yield put(requestAssetListSaga(currentMemberId));\n  } catch (error) {\n    yield put(removeSelectedAssetFailure(error));\n  }\n}\n\n;\nexport function* requestSelectedAssetSaga() {\n  yield takeLatest(AssetActionTypes.REQUEST_SELECTED_ASSET_START, getRequestedSelectedAssetData);\n}\n;\nexport function* checkInSelectedAssetSaga() {\n  yield takeLatest(AssetActionTypes.CHECK_IN_SELECTED_ASSET_START, postCheckInSelectedAsset);\n}\n;\nexport function* checkOutSelectedAssetSaga() {\n  yield takeLatest(AssetActionTypes.CHECK_OUT_SELECTED_ASSET_START, postCheckOutSelectedAsset);\n}\n;\nexport function* quarantineSelectedAssetSaga() {\n  yield takeLatest(AssetActionTypes.QUARANTINE_SELECTED_ASSET_START, postQuarantineSelectedAsset);\n}\n;\nexport function* removeSelectedAssetSaga() {\n  yield takeLatest(AssetActionTypes.REMOVE_SELECTED_ASSET_START, postRemoveSelectedAsset);\n}\n;\nexport function* assetSagas() {\n  yield all([call(requestSelectedAssetSaga), call(checkInSelectedAssetSaga), call(checkOutSelectedAssetSaga), call(quarantineSelectedAssetSaga), call(removeSelectedAssetSaga)]);\n}\n;","map":{"version":3,"sources":["C:/Users/alvar/Documents/WebDev/lendit/lendit/src/redux/asset/asset.sagas.js"],"names":["call","put","takeLatest","all","AssetActionTypes","receiveSelectedAssetData","checkInSelectedAssetSuccess","checkOutSelectedAssetSuccess","quarantineSelectedAssetSuccess","removeSelectedAssetSuccess","failureSelectedAssetData","checkInSelectedAssetFailure","checkOutSelectedAssetFailure","quarantineSelectedAssetFailure","removeSelectedAssetFailure","requestAssetListSaga","httpFetchSelectedAssetData","httpCheckInAsset","httpCheckOutAsset","httpQuarantineAsset","removeAsset","getRequestedSelectedAssetData","payload","assetId","ownerId","assetData","error","postCheckInSelectedAsset","userId","assetName","assetSerial","assetModel","postCheckOutSelectedAsset","postQuarantineSelectedAsset","assetComments","postRemoveSelectedAsset","currentMemberId","requestSelectedAssetSaga","REQUEST_SELECTED_ASSET_START","checkInSelectedAssetSaga","CHECK_IN_SELECTED_ASSET_START","checkOutSelectedAssetSaga","CHECK_OUT_SELECTED_ASSET_START","quarantineSelectedAssetSaga","QUARANTINE_SELECTED_ASSET_START","removeSelectedAssetSaga","REMOVE_SELECTED_ASSET_START","assetSagas"],"mappings":"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","sourcesContent":["import { call, put, takeLatest, all } from \"redux-saga/effects\";\r\n\r\nimport AssetActionTypes from './asset.types';\r\n\r\nimport { \r\n    receiveSelectedAssetData,\r\n    checkInSelectedAssetSuccess,\r\n    checkOutSelectedAssetSuccess, \r\n    quarantineSelectedAssetSuccess,\r\n    removeSelectedAssetSuccess,\r\n    failureSelectedAssetData,\r\n    checkInSelectedAssetFailure,\r\n    checkOutSelectedAssetFailure,\r\n    quarantineSelectedAssetFailure,\r\n    removeSelectedAssetFailure\r\n   } from \"../asset/asset.actions\";\r\n\r\nimport {\r\n  requestAssetListSaga\r\n} from \"../drop-downs/drop-downs.sagas\"\r\n\r\nimport { \r\n  httpFetchSelectedAssetData,\r\n  httpCheckInAsset,\r\n  httpCheckOutAsset,\r\n  httpQuarantineAsset,\r\n  removeAsset,\r\n } from \"../../services/api\";\r\n\r\nfunction* getRequestedSelectedAssetData({payload: {assetId, ownerId}}) {\r\n  try {\r\n    const assetData = yield httpFetchSelectedAssetData(assetId, ownerId);\r\n    yield put(receiveSelectedAssetData(assetData));\r\n  } catch (error) {\r\n    yield put(failureSelectedAssetData(error));\r\n  }\r\n};\r\n\r\nfunction* postCheckInSelectedAsset({payload: {assetId, userId, ownerId, assetName, assetSerial, assetModel}}) {\r\n  try{\r\n    const assetData = yield httpCheckInAsset(assetId, userId, ownerId, assetName, assetSerial, assetModel);\r\n    yield put(checkInSelectedAssetSuccess({...assetData, userId}))\r\n  }  catch (error) {\r\n    yield put(checkInSelectedAssetFailure(error))\r\n  }\r\n};\r\n\r\nfunction* postCheckOutSelectedAsset({payload: {assetId, userId, ownerId, assetName, assetSerial, assetModel}}) {\r\n  try{\r\n    const assetData = yield httpCheckOutAsset(assetId, userId, ownerId, assetName, assetSerial, assetModel);\r\n    yield put(checkOutSelectedAssetSuccess({...assetData, userId}))\r\n  }  catch (error) {\r\n    yield put(checkOutSelectedAssetFailure(error))\r\n  }\r\n};\r\n\r\nfunction* postQuarantineSelectedAsset({payload: {assetId, userId, ownerId, assetName, assetSerial, assetModel, assetComments}}) {\r\n  try{\r\n    const assetData = yield httpQuarantineAsset(assetId, userId, ownerId, assetName, assetSerial, assetModel, assetComments);\r\n    yield put(quarantineSelectedAssetSuccess({...assetData, assetComments, userId}))\r\n  }  catch (error) {\r\n    yield put(quarantineSelectedAssetFailure(error))\r\n  }\r\n};\r\n\r\nfunction* postRemoveSelectedAsset({payload : {assetId, currentMemberId}}) {\r\n  try{\r\n    const assetData = yield removeAsset(assetId);\r\n    yield put(removeSelectedAssetSuccess(assetData));\r\n    yield put(requestAssetListSaga(currentMemberId));\r\n   }  catch (error) {\r\n    yield put(removeSelectedAssetFailure(error))\r\n  }\r\n};\r\n\r\nexport  function* requestSelectedAssetSaga() {\r\n  yield takeLatest(AssetActionTypes.REQUEST_SELECTED_ASSET_START, getRequestedSelectedAssetData);\r\n};\r\n\r\nexport  function* checkInSelectedAssetSaga() {\r\n  yield takeLatest(AssetActionTypes.CHECK_IN_SELECTED_ASSET_START, postCheckInSelectedAsset);\r\n};\r\n\r\nexport  function* checkOutSelectedAssetSaga() {\r\n  yield takeLatest(AssetActionTypes.CHECK_OUT_SELECTED_ASSET_START, postCheckOutSelectedAsset);\r\n};\r\n\r\nexport  function* quarantineSelectedAssetSaga() {\r\n  yield takeLatest(AssetActionTypes.QUARANTINE_SELECTED_ASSET_START, postQuarantineSelectedAsset);\r\n};\r\n\r\nexport  function* removeSelectedAssetSaga() {\r\n  yield takeLatest(AssetActionTypes.REMOVE_SELECTED_ASSET_START, postRemoveSelectedAsset);\r\n};\r\n\r\n\r\nexport function* assetSagas() {\r\n    yield all([\r\n      call(requestSelectedAssetSaga), \r\n      call(checkInSelectedAssetSaga),\r\n      call(checkOutSelectedAssetSaga),\r\n      call(quarantineSelectedAssetSaga),\r\n      call(removeSelectedAssetSaga),\r\n    ])\r\n};"]},"metadata":{},"sourceType":"module"}