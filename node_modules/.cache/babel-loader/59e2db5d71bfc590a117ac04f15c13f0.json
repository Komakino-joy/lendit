{"ast":null,"code":"import { call, put, takeEvery, takeLatest, all } from \"redux-saga/effects\";\nimport { REQUEST_API_DATA, receiveApiData } from \"../asset/asset.actions\";\nimport { fetchData } from \"../../services/api\"; // worker Saga: will be fired on USER_FETCH_REQUESTED actions\n\nfunction* getApiData(action) {\n  try {\n    // do api call\n    const data = yield call(fetchData('A1'));\n    yield put(receiveApiData(data));\n  } catch (e) {\n    console.log(e);\n  }\n}\n/*\r\n  Alternatively you may use takeLatest.\r\n\r\n  Does not allow concurrent fetches of user. If \"USER_FETCH_REQUESTED\" gets\r\n  dispatched while a fetch is already pending, that pending fetch is cancelled\r\n  and only the latest one will be run.\r\n*/\n\n\nexport function* mySaga() {\n  yield takeLatest(REQUEST_API_DATA, getApiData);\n}\nexport function* assetSagas() {\n  yield all([call(mySaga)]);\n}\n;","map":{"version":3,"sources":["C:/Users/alvar/Documents/WebDev/comp-overload/src/redux/asset/asset.sagas.js"],"names":["call","put","takeEvery","takeLatest","all","REQUEST_API_DATA","receiveApiData","fetchData","getApiData","action","data","e","console","log","mySaga","assetSagas"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,SAApB,EAA+BC,UAA/B,EAA2CC,GAA3C,QAAsD,oBAAtD;AAEA,SAASC,gBAAT,EAA2BC,cAA3B,QAAiD,wBAAjD;AACA,SAASC,SAAT,QAA0B,oBAA1B,C,CAEA;;AACA,UAAUC,UAAV,CAAqBC,MAArB,EAA6B;AAC3B,MAAI;AACF;AACA,UAAMC,IAAI,GAAG,MAAMV,IAAI,CAACO,SAAS,CAAC,IAAD,CAAV,CAAvB;AACA,UAAMN,GAAG,CAACK,cAAc,CAACI,IAAD,CAAf,CAAT;AACD,GAJD,CAIE,OAAOC,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAQ,UAAUG,MAAV,GAAmB;AACzB,QAAMX,UAAU,CAACE,gBAAD,EAAmBG,UAAnB,CAAhB;AACD;AAED,OAAO,UAAUO,UAAV,GAAuB;AAC1B,QAAMX,GAAG,CAAC,CACNJ,IAAI,CAAEc,MAAF,CADE,CAAD,CAAT;AAGH;AAAA","sourcesContent":["import { call, put, takeEvery, takeLatest, all } from \"redux-saga/effects\";\r\n\r\nimport { REQUEST_API_DATA, receiveApiData } from \"../asset/asset.actions\";\r\nimport { fetchData } from \"../../services/api\";\r\n\r\n// worker Saga: will be fired on USER_FETCH_REQUESTED actions\r\nfunction* getApiData(action) {\r\n  try {\r\n    // do api call\r\n    const data = yield call(fetchData('A1'));\r\n    yield put(receiveApiData(data));\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n}\r\n\r\n/*\r\n  Alternatively you may use takeLatest.\r\n\r\n  Does not allow concurrent fetches of user. If \"USER_FETCH_REQUESTED\" gets\r\n  dispatched while a fetch is already pending, that pending fetch is cancelled\r\n  and only the latest one will be run.\r\n*/\r\nexport  function* mySaga() {\r\n  yield takeLatest(REQUEST_API_DATA, getApiData);\r\n}\r\n\r\nexport function* assetSagas() {\r\n    yield all([\r\n        call (mySaga)\r\n    ])\r\n};"]},"metadata":{},"sourceType":"module"}