{"ast":null,"code":"import { call, put, takeLatest, all } from \"redux-saga/effects\";\nimport AssetpayloadTypes from './asset.types';\nimport { receiveSelectedAssetData, checkInSelectedAssetSuccess, checkOutSelectedAssetSuccess, quarantineSelectedAssetSuccess } from \"../asset/asset.actions\";\nimport { httpFetchSelectedAssetData, httpCheckInAsset, httpCheckOutAsset, httpQuarantineAsset } from \"../../services/api\";\n\nfunction* getRequestedSelectedAssetData({\n  payload: {\n    assetId,\n    ownerId\n  }\n}) {\n  try {\n    const assetData = yield httpFetchSelectedAssetData(assetId, ownerId);\n    yield put(receiveSelectedAssetData(assetData));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n;\n\nfunction* postCheckInSelectedAsset(blah) {\n  try {\n    // const assetData = yield httpCheckInAsset(assetId, userId, ownerId, assetName, assetSerial, assetModel );\n    console.log('PAAAAAAAAAAAAAAAYUPPPPPPPPPPPP', blah); // console.log(assetData)\n    // yield put(checkInSelectedAssetSuccess(assetId, userId, ownerId, assetName, assetSerial, assetModel))\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n;\n\nfunction* postCheckOutSelectedAsset(payload) {\n  try {\n    const assetData = yield call(httpCheckOutAsset, payload.assetID, payload.userID, payload.ownerId, payload.assetName, payload.assetSerial, payload.assetModel);\n    yield put(checkOutSelectedAssetSuccess(assetData));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n;\n\nfunction* postQuarantineSelectedAsset(payload) {\n  try {\n    const assetData = yield call(httpQuarantineAsset, payload.assetID, payload.userID, payload.ownerId, payload.assetName, payload.assetSerial, payload.assetModel, payload.comment);\n    yield put(quarantineSelectedAssetSuccess(assetData));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n;\nexport function* requestSelectedAssetSaga() {\n  yield takeLatest(AssetpayloadTypes.REQUEST_SELECTED_ASSET, getRequestedSelectedAssetData);\n}\n;\nexport function* checkInSelectedAssetSaga() {\n  yield takeLatest(AssetpayloadTypes.CHECK_IN_SELECTED_ASSET_START, postCheckInSelectedAsset);\n}\n;\nexport function* checkOutSelectedAssetSaga() {\n  yield takeLatest(AssetpayloadTypes.CHECK_OUT_SELECTED_ASSET_START, postCheckOutSelectedAsset);\n}\n;\nexport function* quarantineSelectedAssetSaga() {\n  yield takeLatest(AssetpayloadTypes.QUARANTINE_SELECTED_ASSET_START, postQuarantineSelectedAsset);\n}\n;\nexport function* assetSagas() {\n  yield all([call(requestSelectedAssetSaga), call(checkInSelectedAssetSaga), call(checkOutSelectedAssetSaga), call(quarantineSelectedAssetSaga)]);\n}\n;","map":{"version":3,"sources":["C:/Users/alvar/Documents/WebDev/lendit/lendit/src/redux/asset/asset.sagas.js"],"names":["call","put","takeLatest","all","AssetpayloadTypes","receiveSelectedAssetData","checkInSelectedAssetSuccess","checkOutSelectedAssetSuccess","quarantineSelectedAssetSuccess","httpFetchSelectedAssetData","httpCheckInAsset","httpCheckOutAsset","httpQuarantineAsset","getRequestedSelectedAssetData","payload","assetId","ownerId","assetData","error","console","log","postCheckInSelectedAsset","blah","postCheckOutSelectedAsset","assetID","userID","assetName","assetSerial","assetModel","postQuarantineSelectedAsset","comment","requestSelectedAssetSaga","REQUEST_SELECTED_ASSET","checkInSelectedAssetSaga","CHECK_IN_SELECTED_ASSET_START","checkOutSelectedAssetSaga","CHECK_OUT_SELECTED_ASSET_START","quarantineSelectedAssetSaga","QUARANTINE_SELECTED_ASSET_START","assetSagas"],"mappings":"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","sourcesContent":["import { call, put, takeLatest, all } from \"redux-saga/effects\";\r\n\r\nimport AssetpayloadTypes from './asset.types';\r\n\r\nimport { \r\n    receiveSelectedAssetData,\r\n    checkInSelectedAssetSuccess,\r\n    checkOutSelectedAssetSuccess, \r\n    quarantineSelectedAssetSuccess\r\n   } from \"../asset/asset.actions\";\r\n\r\nimport { \r\n  httpFetchSelectedAssetData,\r\n  httpCheckInAsset,\r\n  httpCheckOutAsset,\r\n  httpQuarantineAsset\r\n } from \"../../services/api\";\r\n\r\nfunction* getRequestedSelectedAssetData({payload: {assetId, ownerId}}) {\r\n  try {\r\n    const assetData = yield httpFetchSelectedAssetData(assetId, ownerId);\r\n    yield put(receiveSelectedAssetData(assetData));\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nfunction* postCheckInSelectedAsset(blah) {\r\n  try{\r\n    // const assetData = yield httpCheckInAsset(assetId, userId, ownerId, assetName, assetSerial, assetModel );\r\n    console.log('PAAAAAAAAAAAAAAAYUPPPPPPPPPPPP', blah)\r\n    // console.log(assetData)\r\n    // yield put(checkInSelectedAssetSuccess(assetId, userId, ownerId, assetName, assetSerial, assetModel))\r\n  }  catch (error) {\r\n    console.log(error)\r\n  }\r\n};\r\n\r\nfunction* postCheckOutSelectedAsset(payload) {\r\n  try{\r\n    const assetData = yield call(httpCheckOutAsset, payload.assetID, payload.userID, payload.ownerId, payload.assetName, payload.assetSerial, payload.assetModel )\r\n    yield put(checkOutSelectedAssetSuccess(assetData))\r\n  }  catch (error) {\r\n    console.log(error)\r\n  }\r\n};\r\n\r\nfunction* postQuarantineSelectedAsset(payload) {\r\n  try{\r\n    const assetData = yield call(httpQuarantineAsset, payload.assetID, payload.userID, payload.ownerId, payload.assetName, payload.assetSerial, payload.assetModel, payload.comment )\r\n    yield put(quarantineSelectedAssetSuccess(assetData))\r\n  }  catch (error) {\r\n    console.log(error)\r\n  }\r\n};\r\n\r\nexport  function* requestSelectedAssetSaga() {\r\n  yield takeLatest(AssetpayloadTypes.REQUEST_SELECTED_ASSET, getRequestedSelectedAssetData);\r\n};\r\n\r\nexport  function* checkInSelectedAssetSaga() {\r\n  yield takeLatest(AssetpayloadTypes.CHECK_IN_SELECTED_ASSET_START, postCheckInSelectedAsset);\r\n};\r\n\r\nexport  function* checkOutSelectedAssetSaga() {\r\n  yield takeLatest(AssetpayloadTypes.CHECK_OUT_SELECTED_ASSET_START, postCheckOutSelectedAsset);\r\n};\r\n\r\nexport  function* quarantineSelectedAssetSaga() {\r\n  yield takeLatest(AssetpayloadTypes.QUARANTINE_SELECTED_ASSET_START, postQuarantineSelectedAsset);\r\n};\r\n\r\n\r\nexport function* assetSagas() {\r\n    yield all([\r\n      call(requestSelectedAssetSaga), \r\n      call(checkInSelectedAssetSaga),\r\n      call(checkOutSelectedAssetSaga),\r\n      call(quarantineSelectedAssetSaga)\r\n    ])\r\n};"]},"metadata":{},"sourceType":"module"}