{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/alvar/Documents/WebDev/lendit/lendit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(getRequestedSelectedAssetData),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(requestSelectedAssetSaga),_marked3=/*#__PURE__*/_regeneratorRuntime.mark(postCheckInSelectedAsset),_marked4=/*#__PURE__*/_regeneratorRuntime.mark(checkInSelectedAssetSaga),_marked5=/*#__PURE__*/_regeneratorRuntime.mark(postCheckOutSelectedAsset),_marked6=/*#__PURE__*/_regeneratorRuntime.mark(checkOutSelectedAssetSaga),_marked7=/*#__PURE__*/_regeneratorRuntime.mark(postQuarantineSelectedAsset),_marked8=/*#__PURE__*/_regeneratorRuntime.mark(quarantineSelectedAssetSaga),_marked9=/*#__PURE__*/_regeneratorRuntime.mark(assetSagas);import{call,put,takeLatest,all}from\"redux-saga/effects\";import{REQUEST_SELECTED_ASSET,CHECK_IN_SELECTED_ASSET_START,CHECK_OUT_SELECTED_ASSET_START,QUARANTINE_SELECTED_ASSET_START,receiveSelectedAssetData,checkInSelectedAssetSuccess,checkOutSelectedAssetSuccess,quarantineSelectedAssetSuccess}from\"../asset/asset.actions\";import{fetchSelectedAssetData,checkInAsset,checkOutAsset,quarantineAsset}from\"../../services/api\";// worker Saga: will be fired on USER_FETCH_REQUESTED actions\nfunction getRequestedSelectedAssetData(action){var assetData;return _regeneratorRuntime.wrap(function getRequestedSelectedAssetData$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return call(fetchSelectedAssetData,action.assetID,action.ownerID);case 3:assetData=_context.sent;_context.next=6;return put(receiveSelectedAssetData(assetData));case 6:_context.next=11;break;case 8:_context.prev=8;_context.t0=_context[\"catch\"](0);console.log(_context.t0);case 11:case\"end\":return _context.stop();}}},_marked,null,[[0,8]]);};export function requestSelectedAssetSaga(){return _regeneratorRuntime.wrap(function requestSelectedAssetSaga$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return takeLatest(REQUEST_SELECTED_ASSET,getRequestedSelectedAssetData);case 2:case\"end\":return _context2.stop();}}},_marked2);};function postCheckInSelectedAsset(action){var assetData;return _regeneratorRuntime.wrap(function postCheckInSelectedAsset$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.prev=0;_context3.next=3;return call(checkInAsset,action.assetID,action.userId,action.ownerId,action.assetName,action.assetSerial,action.assetModel);case 3:assetData=_context3.sent;_context3.next=6;return put(checkInSelectedAssetSuccess(assetData));case 6:_context3.next=11;break;case 8:_context3.prev=8;_context3.t0=_context3[\"catch\"](0);console.log(_context3.t0);case 11:case\"end\":return _context3.stop();}}},_marked3,null,[[0,8]]);};export function checkInSelectedAssetSaga(){return _regeneratorRuntime.wrap(function checkInSelectedAssetSaga$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.next=2;return takeLatest(CHECK_IN_SELECTED_ASSET_START,postCheckInSelectedAsset);case 2:case\"end\":return _context4.stop();}}},_marked4);};function postCheckOutSelectedAsset(action){var assetData;return _regeneratorRuntime.wrap(function postCheckOutSelectedAsset$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.prev=0;_context5.next=3;return call(checkOutAsset,action.assetID,action.userID,action.ownerId,action.assetName,action.assetSerial,action.assetModel);case 3:assetData=_context5.sent;_context5.next=6;return put(checkOutSelectedAssetSuccess(assetData));case 6:_context5.next=11;break;case 8:_context5.prev=8;_context5.t0=_context5[\"catch\"](0);console.log(_context5.t0);case 11:case\"end\":return _context5.stop();}}},_marked5,null,[[0,8]]);};export function checkOutSelectedAssetSaga(){return _regeneratorRuntime.wrap(function checkOutSelectedAssetSaga$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:_context6.next=2;return takeLatest(CHECK_OUT_SELECTED_ASSET_START,postCheckOutSelectedAsset);case 2:case\"end\":return _context6.stop();}}},_marked6);};function postQuarantineSelectedAsset(action){var assetData;return _regeneratorRuntime.wrap(function postQuarantineSelectedAsset$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:_context7.prev=0;_context7.next=3;return call(quarantineAsset,action.assetID,action.userID,action.ownerId,action.assetName,action.assetSerial,action.assetModel,action.comment);case 3:assetData=_context7.sent;_context7.next=6;return put(quarantineSelectedAssetSuccess(assetData));case 6:_context7.next=11;break;case 8:_context7.prev=8;_context7.t0=_context7[\"catch\"](0);console.log(_context7.t0);case 11:case\"end\":return _context7.stop();}}},_marked7,null,[[0,8]]);};export function quarantineSelectedAssetSaga(){return _regeneratorRuntime.wrap(function quarantineSelectedAssetSaga$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:_context8.next=2;return takeLatest(QUARANTINE_SELECTED_ASSET_START,postQuarantineSelectedAsset);case 2:case\"end\":return _context8.stop();}}},_marked8);};export function assetSagas(){return _regeneratorRuntime.wrap(function assetSagas$(_context9){while(1){switch(_context9.prev=_context9.next){case 0:_context9.next=2;return all([call(requestSelectedAssetSaga),call(checkInSelectedAssetSaga),call(checkOutSelectedAssetSaga),call(quarantineSelectedAssetSaga)]);case 2:case\"end\":return _context9.stop();}}},_marked9);};","map":{"version":3,"sources":["C:/Users/alvar/Documents/WebDev/lendit/lendit/src/redux/asset/asset.sagas.js"],"names":["getRequestedSelectedAssetData","requestSelectedAssetSaga","postCheckInSelectedAsset","checkInSelectedAssetSaga","postCheckOutSelectedAsset","checkOutSelectedAssetSaga","postQuarantineSelectedAsset","quarantineSelectedAssetSaga","assetSagas","call","put","takeLatest","all","REQUEST_SELECTED_ASSET","CHECK_IN_SELECTED_ASSET_START","CHECK_OUT_SELECTED_ASSET_START","QUARANTINE_SELECTED_ASSET_START","receiveSelectedAssetData","checkInSelectedAssetSuccess","checkOutSelectedAssetSuccess","quarantineSelectedAssetSuccess","fetchSelectedAssetData","checkInAsset","checkOutAsset","quarantineAsset","action","assetID","ownerID","assetData","console","log","userId","ownerId","assetName","assetSerial","assetModel","userID","comment"],"mappings":"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","sourcesContent":["import { call, put, takeLatest, all } from \"redux-saga/effects\";\r\n\r\nimport { \r\n    REQUEST_SELECTED_ASSET,\r\n    CHECK_IN_SELECTED_ASSET_START,\r\n    CHECK_OUT_SELECTED_ASSET_START,\r\n    QUARANTINE_SELECTED_ASSET_START,\r\n    receiveSelectedAssetData,\r\n    checkInSelectedAssetSuccess,\r\n    checkOutSelectedAssetSuccess, \r\n    quarantineSelectedAssetSuccess\r\n   } from \"../asset/asset.actions\";\r\n\r\nimport { \r\n  fetchSelectedAssetData,\r\n  checkInAsset,\r\n  checkOutAsset,\r\n  quarantineAsset\r\n } from \"../../services/api\";\r\n\r\n// worker Saga: will be fired on USER_FETCH_REQUESTED actions\r\nfunction* getRequestedSelectedAssetData(action) {\r\n  try {\r\n    // do api call\r\n    const assetData = yield call(fetchSelectedAssetData, action.assetID, action.ownerID);\r\n    yield put(receiveSelectedAssetData(assetData));\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport  function* requestSelectedAssetSaga() {\r\n  yield takeLatest(REQUEST_SELECTED_ASSET, getRequestedSelectedAssetData);\r\n};\r\n\r\nfunction* postCheckInSelectedAsset(action) {\r\n  try{\r\n    const assetData = yield call(checkInAsset, action.assetID, action.userId, action.ownerId, action.assetName, action.assetSerial, action.assetModel )\r\n    yield put(checkInSelectedAssetSuccess(assetData))\r\n  }  catch (error) {\r\n    console.log(error)\r\n  }\r\n};\r\n\r\nexport  function* checkInSelectedAssetSaga() {\r\n  yield takeLatest(CHECK_IN_SELECTED_ASSET_START, postCheckInSelectedAsset);\r\n};\r\n\r\nfunction* postCheckOutSelectedAsset(action) {\r\n  try{\r\n    const assetData = yield call(checkOutAsset, action.assetID, action.userID, action.ownerId, action.assetName, action.assetSerial, action.assetModel )\r\n    yield put(checkOutSelectedAssetSuccess(assetData))\r\n  }  catch (error) {\r\n    console.log(error)\r\n  }\r\n};\r\n\r\nexport  function* checkOutSelectedAssetSaga() {\r\n  yield takeLatest(CHECK_OUT_SELECTED_ASSET_START, postCheckOutSelectedAsset);\r\n};\r\n\r\nfunction* postQuarantineSelectedAsset(action) {\r\n  try{\r\n    const assetData = yield call(quarantineAsset, action.assetID, action.userID, action.ownerId, action.assetName, action.assetSerial, action.assetModel, action.comment )\r\n    yield put(quarantineSelectedAssetSuccess(assetData))\r\n  }  catch (error) {\r\n    console.log(error)\r\n  }\r\n};\r\n\r\nexport  function* quarantineSelectedAssetSaga() {\r\n  yield takeLatest(QUARANTINE_SELECTED_ASSET_START, postQuarantineSelectedAsset);\r\n};\r\n\r\n\r\nexport function* assetSagas() {\r\n    yield all([\r\n      call(requestSelectedAssetSaga), \r\n      call(checkInSelectedAssetSaga),\r\n      call(checkOutSelectedAssetSaga),\r\n      call(quarantineSelectedAssetSaga)\r\n    ])\r\n};"]},"metadata":{},"sourceType":"module"}