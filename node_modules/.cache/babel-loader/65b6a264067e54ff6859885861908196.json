{"ast":null,"code":"import { call, put, fork, take, takeLatest, all } from \"redux-saga/effects\";\nimport { REQUEST_SELECTED_ASSET, CHECK_IN_SELECTED_ASSET_START, receiveSelectedAssetData, checkInSelectedAssetSuccess } from \"../asset/asset.actions\";\nimport { fetchSelectedAssetData, checkInAsset } from \"../../services/api\"; //  function* takeFirst(pattern, saga, ...args) {\n//   const task = yield fork(function* () {\n//       while(true) {\n//         const action = yield take(pattern);\n//         yield call(saga, ...args.concat(action));\n//       }\n//     });\n//     return task;\n//   }\n// worker Saga: will be fired on USER_FETCH_REQUESTED actions\n\nfunction* getRequestedSelectedAssetData(action) {\n  try {\n    // do api call\n    const assetData = yield call(fetchSelectedAssetData, action.assetID);\n    yield put(receiveSelectedAssetData(assetData));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction* postCheckInSelectedAsset(action) {\n  try {\n    const assetData = yield call(checkInAsset, action.assetID);\n    yield put(checkInSelectedAssetSuccess(assetData));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport function* requestSelectedAssetSaga() {\n  yield takeLatest(REQUEST_SELECTED_ASSET, getRequestedSelectedAssetData);\n}\nexport function* checkInSelectedAssetSaga() {\n  console.log('STEP 4: checkInSelectedAssetSaga() takes first from action \"CHECK_IN_SELECTED_ASSET_START\" and runs postCheckInSelectedAsset() ');\n  yield takeLatest(CHECK_IN_SELECTED_ASSET_START, postCheckInSelectedAsset);\n}\nexport function* assetSagas() {\n  console.log('STEP 3: assetSagas function yields call to saga functions, [call (requestSelectedAssetSaga), call(checkInSelectedAssetSaga)]');\n  yield all([call(requestSelectedAssetSaga), call(checkInSelectedAssetSaga)]);\n}\n;","map":{"version":3,"sources":["C:/Users/bryan.alvarez/Documents/webdev/git/comp-overload/client/src/redux/asset/asset.sagas.js"],"names":["call","put","fork","take","takeLatest","all","REQUEST_SELECTED_ASSET","CHECK_IN_SELECTED_ASSET_START","receiveSelectedAssetData","checkInSelectedAssetSuccess","fetchSelectedAssetData","checkInAsset","getRequestedSelectedAssetData","action","assetData","assetID","error","console","log","postCheckInSelectedAsset","requestSelectedAssetSaga","checkInSelectedAssetSaga","assetSagas"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,IAApB,EAA0BC,IAA1B,EAAgCC,UAAhC,EAA4CC,GAA5C,QAAyD,oBAAzD;AAEA,SACIC,sBADJ,EAEIC,6BAFJ,EAGIC,wBAHJ,EAIIC,2BAJJ,QAKU,wBALV;AAOA,SACEC,sBADF,EAEEC,YAFF,QAGQ,oBAHR,C,CAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,UAAUC,6BAAV,CAAwCC,MAAxC,EAAgD;AAC9C,MAAI;AACF;AACA,UAAMC,SAAS,GAAG,MAAMd,IAAI,CAACU,sBAAD,EAAyBG,MAAM,CAACE,OAAhC,CAA5B;AACA,UAAMd,GAAG,CAACO,wBAAwB,CAACM,SAAD,CAAzB,CAAT;AACD,GAJD,CAIE,OAAOE,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF;;AAED,UAAUG,wBAAV,CAAmCN,MAAnC,EAA2C;AACzC,MAAG;AACD,UAAMC,SAAS,GAAG,MAAMd,IAAI,CAACW,YAAD,EAAeE,MAAM,CAACE,OAAtB,CAA5B;AACA,UAAMd,GAAG,CAACQ,2BAA2B,CAACK,SAAD,CAA5B,CAAT;AACD,GAHD,CAGG,OAAOE,KAAP,EAAc;AACfC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF;;AAGD,OAAQ,UAAUI,wBAAV,GAAqC;AAC3C,QAAMhB,UAAU,CAACE,sBAAD,EAAyBM,6BAAzB,CAAhB;AACD;AAGD,OAAQ,UAAUS,wBAAV,GAAqC;AAC3CJ,EAAAA,OAAO,CAACC,GAAR,CAAY,iIAAZ;AACA,QAAMd,UAAU,CAACG,6BAAD,EAAgCY,wBAAhC,CAAhB;AACD;AAGD,OAAO,UAAUG,UAAV,GAAuB;AAC1BL,EAAAA,OAAO,CAACC,GAAR,CAAY,8HAAZ;AACA,QAAMb,GAAG,CAAC,CACRL,IAAI,CAAEoB,wBAAF,CADI,EAERpB,IAAI,CAACqB,wBAAD,CAFI,CAAD,CAAT;AAIH;AAAA","sourcesContent":["import { call, put, fork, take, takeLatest, all,  } from \"redux-saga/effects\";\r\n\r\nimport { \r\n    REQUEST_SELECTED_ASSET,\r\n    CHECK_IN_SELECTED_ASSET_START,\r\n    receiveSelectedAssetData,\r\n    checkInSelectedAssetSuccess\r\n   } from \"../asset/asset.actions\";\r\n\r\nimport { \r\n  fetchSelectedAssetData,\r\n  checkInAsset\r\n } from \"../../services/api\";\r\n\r\n\r\n//  function* takeFirst(pattern, saga, ...args) {\r\n//   const task = yield fork(function* () {\r\n//       while(true) {\r\n//         const action = yield take(pattern);\r\n//         yield call(saga, ...args.concat(action));\r\n//       }\r\n//     });\r\n//     return task;\r\n//   }\r\n\r\n// worker Saga: will be fired on USER_FETCH_REQUESTED actions\r\nfunction* getRequestedSelectedAssetData(action) {\r\n  try {\r\n    // do api call\r\n    const assetData = yield call(fetchSelectedAssetData, action.assetID);\r\n    yield put(receiveSelectedAssetData(assetData));\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nfunction* postCheckInSelectedAsset(action) {\r\n  try{\r\n    const assetData = yield call(checkInAsset, action.assetID )\r\n    yield put(checkInSelectedAssetSuccess(assetData))\r\n  }  catch (error) {\r\n    console.log(error)\r\n  }\r\n}\r\n\r\n\r\nexport  function* requestSelectedAssetSaga() {\r\n  yield takeLatest(REQUEST_SELECTED_ASSET, getRequestedSelectedAssetData);\r\n}\r\n\r\n\r\nexport  function* checkInSelectedAssetSaga() {\r\n  console.log('STEP 4: checkInSelectedAssetSaga() takes first from action \"CHECK_IN_SELECTED_ASSET_START\" and runs postCheckInSelectedAsset() ')\r\n  yield takeLatest(CHECK_IN_SELECTED_ASSET_START, postCheckInSelectedAsset);\r\n}\r\n\r\n\r\nexport function* assetSagas() {\r\n    console.log('STEP 3: assetSagas function yields call to saga functions, [call (requestSelectedAssetSaga), call(checkInSelectedAssetSaga)]')\r\n    yield all([\r\n      call (requestSelectedAssetSaga), \r\n      call(checkInSelectedAssetSaga)\r\n    ])\r\n};"]},"metadata":{},"sourceType":"module"}