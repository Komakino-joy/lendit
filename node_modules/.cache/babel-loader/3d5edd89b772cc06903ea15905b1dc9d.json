{"ast":null,"code":"import { call, put, takeLatest, all } from \"redux-saga/effects\";\nimport { REQUEST_SELECTED_ASSET, CHECK_IN_SELECTED_ASSET_START, CHECK_OUT_SELECTED_ASSET_START, QUARANTINE_SELECTED_ASSET_START, receiveSelectedAssetData, checkInSelectedAssetSuccess, checkOutSelectedAssetSuccess, quarantineSelectedAssetSuccess } from \"../asset/asset.actions\";\nimport { fetchSelectedAssetData, checkInAsset, checkOutAsset, quarantineAsset } from \"../../services/api\"; // worker Saga: will be fired on USER_FETCH_REQUESTED actions\n\nfunction* getRequestedSelectedAssetData(action) {\n  try {\n    // do api call\n    console.log(`Sagas action ${action}`);\n    console.log(`Sagas owner Id ${action.ownerID}`);\n    const assetData = yield call(fetchSelectedAssetData, action.assetID, action.ownerID);\n    yield put(receiveSelectedAssetData(assetData));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n;\nexport function* requestSelectedAssetSaga() {\n  yield takeLatest(REQUEST_SELECTED_ASSET, getRequestedSelectedAssetData);\n}\n;\n\nfunction* postCheckInSelectedAsset(action) {\n  try {\n    const assetData = yield call(checkInAsset, action.assetID, action.ownerId, action.assetName, action.assetSerial, action.assetModel);\n    yield put(checkInSelectedAssetSuccess(assetData));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n;\nexport function* checkInSelectedAssetSaga() {\n  yield takeLatest(CHECK_IN_SELECTED_ASSET_START, postCheckInSelectedAsset);\n}\n;\n\nfunction* postCheckOutSelectedAsset(action) {\n  try {\n    const assetData = yield call(checkOutAsset, action.assetID, action.userID, action.ownerId, action.assetName, action.assetSerial, action.assetModel);\n    yield put(checkOutSelectedAssetSuccess(assetData));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n;\nexport function* checkOutSelectedAssetSaga() {\n  yield takeLatest(CHECK_OUT_SELECTED_ASSET_START, postCheckOutSelectedAsset);\n}\n;\n\nfunction* postQuarantineSelectedAsset(action) {\n  try {\n    const assetData = yield call(quarantineAsset, action.assetID, action.userID, action.ownerId, action.assetName, action.assetSerial, action.assetModel, action.comment);\n    yield put(quarantineSelectedAssetSuccess(assetData));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n;\nexport function* quarantineSelectedAssetSaga() {\n  yield takeLatest(QUARANTINE_SELECTED_ASSET_START, postQuarantineSelectedAsset);\n}\n;\nexport function* assetSagas() {\n  yield all([call(requestSelectedAssetSaga), call(checkInSelectedAssetSaga), call(checkOutSelectedAssetSaga), call(quarantineSelectedAssetSaga)]);\n}\n;","map":{"version":3,"sources":["C:/Users/bryan.alvarez/Documents/webdev/git/lendit/lendit/src/redux/asset/asset.sagas.js"],"names":["call","put","takeLatest","all","REQUEST_SELECTED_ASSET","CHECK_IN_SELECTED_ASSET_START","CHECK_OUT_SELECTED_ASSET_START","QUARANTINE_SELECTED_ASSET_START","receiveSelectedAssetData","checkInSelectedAssetSuccess","checkOutSelectedAssetSuccess","quarantineSelectedAssetSuccess","fetchSelectedAssetData","checkInAsset","checkOutAsset","quarantineAsset","getRequestedSelectedAssetData","action","console","log","ownerID","assetData","assetID","error","requestSelectedAssetSaga","postCheckInSelectedAsset","ownerId","assetName","assetSerial","assetModel","checkInSelectedAssetSaga","postCheckOutSelectedAsset","userID","checkOutSelectedAssetSaga","postQuarantineSelectedAsset","comment","quarantineSelectedAssetSaga","assetSagas"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,UAApB,EAAgCC,GAAhC,QAA2C,oBAA3C;AAEA,SACIC,sBADJ,EAEIC,6BAFJ,EAGIC,8BAHJ,EAIIC,+BAJJ,EAKIC,wBALJ,EAMIC,2BANJ,EAOIC,4BAPJ,EAQIC,8BARJ,QASU,wBATV;AAWA,SACEC,sBADF,EAEEC,YAFF,EAGEC,aAHF,EAIEC,eAJF,QAKQ,oBALR,C,CAOA;;AACA,UAAUC,6BAAV,CAAwCC,MAAxC,EAAgD;AAC9C,MAAI;AACF;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAa,gBAAeF,MAAO,EAAnC;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAa,kBAAiBF,MAAM,CAACG,OAAQ,EAA7C;AACA,UAAMC,SAAS,GAAG,MAAMrB,IAAI,CAACY,sBAAD,EAAyBK,MAAM,CAACK,OAAhC,EAAyCL,MAAM,CAACG,OAAhD,CAA5B;AACA,UAAMnB,GAAG,CAACO,wBAAwB,CAACa,SAAD,CAAzB,CAAT;AACD,GAND,CAME,OAAOE,KAAP,EAAc;AACdL,IAAAA,OAAO,CAACC,GAAR,CAAYI,KAAZ;AACD;AACF;;AAAA;AAED,OAAQ,UAAUC,wBAAV,GAAqC;AAC3C,QAAMtB,UAAU,CAACE,sBAAD,EAAyBY,6BAAzB,CAAhB;AACD;AAAA;;AAED,UAAUS,wBAAV,CAAmCR,MAAnC,EAA2C;AACzC,MAAG;AACD,UAAMI,SAAS,GAAG,MAAMrB,IAAI,CAACa,YAAD,EAAeI,MAAM,CAACK,OAAtB,EAA+BL,MAAM,CAACS,OAAtC,EAA+CT,MAAM,CAACU,SAAtD,EAAiEV,MAAM,CAACW,WAAxE,EAAqFX,MAAM,CAACY,UAA5F,CAA5B;AACA,UAAM5B,GAAG,CAACQ,2BAA2B,CAACY,SAAD,CAA5B,CAAT;AACD,GAHD,CAGG,OAAOE,KAAP,EAAc;AACfL,IAAAA,OAAO,CAACC,GAAR,CAAYI,KAAZ;AACD;AACF;;AAAA;AAED,OAAQ,UAAUO,wBAAV,GAAqC;AAC3C,QAAM5B,UAAU,CAACG,6BAAD,EAAgCoB,wBAAhC,CAAhB;AACD;AAAA;;AAED,UAAUM,yBAAV,CAAoCd,MAApC,EAA4C;AAC1C,MAAG;AACD,UAAMI,SAAS,GAAG,MAAMrB,IAAI,CAACc,aAAD,EAAgBG,MAAM,CAACK,OAAvB,EAAgCL,MAAM,CAACe,MAAvC,EAA+Cf,MAAM,CAACS,OAAtD,EAA+DT,MAAM,CAACU,SAAtE,EAAiFV,MAAM,CAACW,WAAxF,EAAqGX,MAAM,CAACY,UAA5G,CAA5B;AACA,UAAM5B,GAAG,CAACS,4BAA4B,CAACW,SAAD,CAA7B,CAAT;AACD,GAHD,CAGG,OAAOE,KAAP,EAAc;AACfL,IAAAA,OAAO,CAACC,GAAR,CAAYI,KAAZ;AACD;AACF;;AAAA;AAED,OAAQ,UAAUU,yBAAV,GAAsC;AAC5C,QAAM/B,UAAU,CAACI,8BAAD,EAAiCyB,yBAAjC,CAAhB;AACD;AAAA;;AAED,UAAUG,2BAAV,CAAsCjB,MAAtC,EAA8C;AAC5C,MAAG;AACD,UAAMI,SAAS,GAAG,MAAMrB,IAAI,CAACe,eAAD,EAAkBE,MAAM,CAACK,OAAzB,EAAkCL,MAAM,CAACe,MAAzC,EAAiDf,MAAM,CAACS,OAAxD,EAAiET,MAAM,CAACU,SAAxE,EAAmFV,MAAM,CAACW,WAA1F,EAAuGX,MAAM,CAACY,UAA9G,EAA0HZ,MAAM,CAACkB,OAAjI,CAA5B;AACA,UAAMlC,GAAG,CAACU,8BAA8B,CAACU,SAAD,CAA/B,CAAT;AACD,GAHD,CAGG,OAAOE,KAAP,EAAc;AACfL,IAAAA,OAAO,CAACC,GAAR,CAAYI,KAAZ;AACD;AACF;;AAAA;AAED,OAAQ,UAAUa,2BAAV,GAAwC;AAC9C,QAAMlC,UAAU,CAACK,+BAAD,EAAkC2B,2BAAlC,CAAhB;AACD;AAAA;AAGD,OAAO,UAAUG,UAAV,GAAuB;AAC1B,QAAMlC,GAAG,CAAC,CACRH,IAAI,CAACwB,wBAAD,CADI,EAERxB,IAAI,CAAC8B,wBAAD,CAFI,EAGR9B,IAAI,CAACiC,yBAAD,CAHI,EAIRjC,IAAI,CAACoC,2BAAD,CAJI,CAAD,CAAT;AAMH;AAAA","sourcesContent":["import { call, put, takeLatest, all } from \"redux-saga/effects\";\r\n\r\nimport { \r\n    REQUEST_SELECTED_ASSET,\r\n    CHECK_IN_SELECTED_ASSET_START,\r\n    CHECK_OUT_SELECTED_ASSET_START,\r\n    QUARANTINE_SELECTED_ASSET_START,\r\n    receiveSelectedAssetData,\r\n    checkInSelectedAssetSuccess,\r\n    checkOutSelectedAssetSuccess, \r\n    quarantineSelectedAssetSuccess\r\n   } from \"../asset/asset.actions\";\r\n\r\nimport { \r\n  fetchSelectedAssetData,\r\n  checkInAsset,\r\n  checkOutAsset,\r\n  quarantineAsset\r\n } from \"../../services/api\";\r\n\r\n// worker Saga: will be fired on USER_FETCH_REQUESTED actions\r\nfunction* getRequestedSelectedAssetData(action) {\r\n  try {\r\n    // do api call\r\n    console.log(`Sagas action ${action}`)\r\n    console.log(`Sagas owner Id ${action.ownerID}`)\r\n    const assetData = yield call(fetchSelectedAssetData, action.assetID, action.ownerID);\r\n    yield put(receiveSelectedAssetData(assetData));\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport  function* requestSelectedAssetSaga() {\r\n  yield takeLatest(REQUEST_SELECTED_ASSET, getRequestedSelectedAssetData);\r\n};\r\n\r\nfunction* postCheckInSelectedAsset(action) {\r\n  try{\r\n    const assetData = yield call(checkInAsset, action.assetID, action.ownerId, action.assetName, action.assetSerial, action.assetModel )\r\n    yield put(checkInSelectedAssetSuccess(assetData))\r\n  }  catch (error) {\r\n    console.log(error)\r\n  }\r\n};\r\n\r\nexport  function* checkInSelectedAssetSaga() {\r\n  yield takeLatest(CHECK_IN_SELECTED_ASSET_START, postCheckInSelectedAsset);\r\n};\r\n\r\nfunction* postCheckOutSelectedAsset(action) {\r\n  try{\r\n    const assetData = yield call(checkOutAsset, action.assetID, action.userID, action.ownerId, action.assetName, action.assetSerial, action.assetModel )\r\n    yield put(checkOutSelectedAssetSuccess(assetData))\r\n  }  catch (error) {\r\n    console.log(error)\r\n  }\r\n};\r\n\r\nexport  function* checkOutSelectedAssetSaga() {\r\n  yield takeLatest(CHECK_OUT_SELECTED_ASSET_START, postCheckOutSelectedAsset);\r\n};\r\n\r\nfunction* postQuarantineSelectedAsset(action) {\r\n  try{\r\n    const assetData = yield call(quarantineAsset, action.assetID, action.userID, action.ownerId, action.assetName, action.assetSerial, action.assetModel, action.comment )\r\n    yield put(quarantineSelectedAssetSuccess(assetData))\r\n  }  catch (error) {\r\n    console.log(error)\r\n  }\r\n};\r\n\r\nexport  function* quarantineSelectedAssetSaga() {\r\n  yield takeLatest(QUARANTINE_SELECTED_ASSET_START, postQuarantineSelectedAsset);\r\n};\r\n\r\n\r\nexport function* assetSagas() {\r\n    yield all([\r\n      call(requestSelectedAssetSaga), \r\n      call(checkInSelectedAssetSaga),\r\n      call(checkOutSelectedAssetSaga),\r\n      call(quarantineSelectedAssetSaga)\r\n    ])\r\n};"]},"metadata":{},"sourceType":"module"}