{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\bryan.alvarez\\\\Documents\\\\webdev\\\\git\\\\comp-overload\\\\client\\\\src\\\\components\\\\center\\\\center.component.jsx\";\n// import React, { useEffect, useState } from 'react'\nimport CustomButton from '../custom-button/custom-button.component';\nimport { connect } from \"react-redux\";\nimport { CurrentAssetStatus } from \"../../redux/asset/asset.selectors\";\nimport base64ArrayBuffer from '../../utils/base64';\nimport image404 from '../../images/404.png';\nimport { checkInSelectedAssetStart, requestNewAssetData, requestSelectedAssetData } from \"../../redux/asset/asset.actions\";\nimport './center.styles.scss';\n\nconst hello = () => {\n  console.log('hello');\n};\n\nconst world = () => {\n  console.log('world');\n};\n\nconst megaFunc = async (func1, func2) => {\n  func1();\n  func2();\n};\n\nconst Center = ({\n  assetID,\n  assetName,\n  assetSerial,\n  assetImage,\n  assetStatus,\n  checkInAsset,\n  getNewStatus\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"center-container\",\n    children: assetID ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center-inner-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: [/*#__PURE__*/_jsxDEV(\"header\", {\n          className: \"asset-name\",\n          children: assetName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"asset-serial\",\n          children: assetSerial\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"img-container\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"asset-image\",\n          src: `data:image/png;base64,${base64ArrayBuffer(assetImage.data)}`,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        // Ternary operator is being used to determine the font color for status, based on the String value\n        // <CurrentAssetStatus resulted from the CurrentAssetStatus Selector\n        className: ` ${assetStatus === 'Available' ? 'available' : assetStatus.slice(0, 10) === 'In Use By ' ? 'in-use' : 'quarantine'} asset-status`,\n        children: /*#__PURE__*/_jsxDEV(CurrentAssetStatus, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-container\",\n        children: [/*#__PURE__*/_jsxDEV(CustomButton, {\n          isCheckIn: true,\n          onClick: () => {\n            checkInAsset(assetID);\n            getNewStatus(assetID);\n          },\n          children: \"CHECK IN\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(CustomButton, {\n          isCheckOut: true,\n          onClick: () => {\n            megaFunc(hello, world);\n          },\n          children: \"CHECK OUT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"instructions\",\n          children: \"If there are issues with the asset, please fill out the form below and submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"reason-box\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(CustomButton, {\n          type: \"button\",\n          children: [' ', \"Submit\", ' ']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center-inner-container\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: image404,\n        width: \"450px\",\n        height: \"auto\",\n        alt: \"404 Error Message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 21\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Center;\n\nconst mapStateToProps = state => ({\n  state: state,\n  assetID: state.assetData.id,\n  assetName: state.assetData.name,\n  assetSerial: state.assetData.serial,\n  assetImage: state.assetData.image,\n  assetStatus: state.assetData.status\n});\n\nconst mapDispatchToProps = dispatch => ({\n  checkInAsset: assetID => {\n    dispatch(checkInSelectedAssetStart(assetID));\n  },\n  getNewStatus: assetID => {\n    dispatch(requestSelectedAssetData(assetID));\n  }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Center); //^ THE CODE BELOW IS USED TO LOAD FIRST ASSET WHEN RENDERING APP FOR FIRST TIME\n// const [asset, setAsset] = useState(null);\n// useEffect(() => {\n//     const fetchAsset = async() => {\n//         const response = await fetch(`http://localhost:3000/asset`)\n//         const asset = await response.json()\n//         setAsset(asset[0]);\n//     }\n//     fetchAsset();\n// }, []);\n//             \n// \n\nvar _c;\n\n$RefreshReg$(_c, \"Center\");","map":{"version":3,"sources":["C:/Users/bryan.alvarez/Documents/webdev/git/comp-overload/client/src/components/center/center.component.jsx"],"names":["CustomButton","connect","CurrentAssetStatus","base64ArrayBuffer","image404","checkInSelectedAssetStart","requestNewAssetData","requestSelectedAssetData","hello","console","log","world","megaFunc","func1","func2","Center","assetID","assetName","assetSerial","assetImage","assetStatus","checkInAsset","getNewStatus","data","slice","mapStateToProps","state","assetData","id","name","serial","image","status","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["// import React, { useEffect, useState } from 'react'\r\nimport CustomButton from '../custom-button/custom-button.component'\r\nimport { connect } from \"react-redux\";\r\nimport { CurrentAssetStatus} from \"../../redux/asset/asset.selectors\";\r\n\r\nimport base64ArrayBuffer from '../../utils/base64'\r\nimport image404 from '../../images/404.png'\r\n\r\nimport { checkInSelectedAssetStart, requestNewAssetData, requestSelectedAssetData } from \"../../redux/asset/asset.actions\";\r\n\r\nimport './center.styles.scss'\r\n\r\nconst hello = () => {\r\n    console.log('hello')\r\n}\r\nconst world = () => {\r\n    console.log('world')\r\n}\r\n\r\nconst megaFunc = async( func1, func2) => {\r\n    func1();\r\n    func2();\r\n}\r\n\r\n\r\nconst Center = ({ assetID, assetName, assetSerial, assetImage, assetStatus, checkInAsset, getNewStatus  }) => {\r\n    \r\n    return (\r\n        <div className='center-container'>\r\n        {assetID ? (\r\n                <div className='center-inner-container'>\r\n\r\n                    <div className='header'>\r\n                        <header className='asset-name'>{assetName}</header>\r\n                        <span className='asset-serial'>{assetSerial}</span>\r\n                    </div>\r\n                    \r\n                    <div className='img-container'>   \r\n                    {/* Here we are using our base64ArrayBuffer function to convert our image array into a viewable picture */}\r\n                        <img className='asset-image' src={`data:image/png;base64,${base64ArrayBuffer(assetImage.data)}`}  alt=''></img> \r\n                    </div>\r\n                    <p \r\n                    // Ternary operator is being used to determine the font color for status, based on the String value\r\n                    // <CurrentAssetStatus resulted from the CurrentAssetStatus Selector\r\n                        className={` ${assetStatus === 'Available' ? 'available' : assetStatus.slice(0,10) === 'In Use By ' ? 'in-use' : 'quarantine' } asset-status`}>\r\n                        <CurrentAssetStatus/>\r\n                    </p>\r\n\r\n                    <div className='button-container'>\r\n                        <CustomButton isCheckIn onClick={() => { checkInAsset(assetID); getNewStatus(assetID);}}>CHECK IN</CustomButton>\r\n                        <CustomButton isCheckOut onClick={() => {megaFunc(hello, world)}} >CHECK OUT</CustomButton>\r\n                    </div>\r\n\r\n                    <div className='footer'>\r\n                    \r\n                        <span className='instructions'>If there are issues with the asset, please fill out the form below and submit</span>\r\n                        <textarea className='reason-box'></textarea>\r\n                        <CustomButton type='button' >{' '}Submit{' '}</CustomButton>\r\n                    </div>\r\n\r\n                </div>\r\n                ):(  \r\n                    <div className='center-inner-container'>\r\n                        <img src={image404} width='450px' height='auto' alt='404 Error Message' ></img>\r\n                    </div>\r\n                )}\r\n                \r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    state: state,\r\n    assetID: state.assetData.id,\r\n    assetName: state.assetData.name,\r\n    assetSerial: state.assetData.serial,\r\n    assetImage: state.assetData.image,\r\n    assetStatus:state.assetData.status,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    checkInAsset: (assetID) => { dispatch(checkInSelectedAssetStart(assetID)) },\r\n    getNewStatus: (assetID) => { dispatch(requestSelectedAssetData(assetID)) }\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Center);\r\n\r\n//^ THE CODE BELOW IS USED TO LOAD FIRST ASSET WHEN RENDERING APP FOR FIRST TIME\r\n\r\n// const [asset, setAsset] = useState(null);\r\n    \r\n// useEffect(() => {\r\n//     const fetchAsset = async() => {\r\n//         const response = await fetch(`http://localhost:3000/asset`)\r\n//         const asset = await response.json()\r\n//         setAsset(asset[0]);\r\n//     }\r\n\r\n//     fetchAsset();\r\n// }, []);\r\n\r\n\r\n//             \r\n// \r\n"]},"metadata":{},"sourceType":"module"}