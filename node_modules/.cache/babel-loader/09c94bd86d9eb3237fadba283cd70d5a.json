{"ast":null,"code":"function timeout(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n; // Used to add a gap between updating the database and requesting the new asset details from the database\n\nexport const assetTransaction = async (transaction, fetchNew, assetID, userID = null) => {\n  if (transaction.name === 'checkOutAsset' && !userID) {\n    alert('User is required to check out a unit');\n  } else if (transaction.name === 'checkOutAsset' && assetID.status.slice(0, 10) === 'In Use By ') {\n    console.log('Asset is currently in use.');\n  } else {\n    try {\n      await transaction(assetID, userID);\n      await timeout(100);\n      await fetchNew(assetID);\n    } catch (e) {\n      console.log(e);\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/alvar/Documents/WebDev/comp-overload/client/src/components/center/center.utils.js"],"names":["timeout","ms","Promise","resolve","setTimeout","assetTransaction","transaction","fetchNew","assetID","userID","name","alert","status","slice","console","log","e"],"mappings":"AAGA,SAASA,OAAT,CAAiBC,EAAjB,EAAqB;AACjB,SAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAIC,UAAU,CAACD,OAAD,EAAUF,EAAV,CAAjC,CAAP;AACH;;AAAA,C,CACD;;AACA,OAAO,MAAMI,gBAAgB,GAAG,OAAOC,WAAP,EAAoBC,QAApB,EAA8BC,OAA9B,EAAuCC,MAAM,GAAC,IAA9C,KAAuD;AACnF,MAAIH,WAAW,CAACI,IAAZ,KAAqB,eAArB,IAAwC,CAACD,MAA7C,EAAqD;AACjDE,IAAAA,KAAK,CAAC,sCAAD,CAAL;AACH,GAFD,MAEO,IAAIL,WAAW,CAACI,IAAZ,KAAqB,eAArB,IAAwCF,OAAO,CAACI,MAAR,CAAeC,KAAf,CAAqB,CAArB,EAAwB,EAAxB,MAAgC,YAA5E,EAAyF;AAC5FC,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACH,GAFM,MAEA;AAEH,QAAG;AACC,YAAMT,WAAW,CAACE,OAAD,EAAUC,MAAV,CAAjB;AACA,YAAMT,OAAO,CAAC,GAAD,CAAb;AACA,YAAMO,QAAQ,CAACC,OAAD,CAAd;AACH,KAJD,CAIE,OAAMQ,CAAN,EAAS;AACPF,MAAAA,OAAO,CAACC,GAAR,CAAYC,CAAZ;AACH;AACJ;AACJ,CAfM","sourcesContent":["\r\n\r\n\r\nfunction timeout(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n};\r\n// Used to add a gap between updating the database and requesting the new asset details from the database\r\nexport const assetTransaction = async( transaction, fetchNew, assetID, userID=null) => {\r\n    if (transaction.name === 'checkOutAsset' && !userID) {\r\n        alert('User is required to check out a unit')\r\n    } else if (transaction.name === 'checkOutAsset' && assetID.status.slice(0, 10) === 'In Use By '){\r\n        console.log('Asset is currently in use.')\r\n    } else {\r\n\r\n        try{\r\n            await transaction(assetID, userID);\r\n            await timeout(100);\r\n            await fetchNew(assetID);\r\n        } catch(e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}