{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\bryan.alvarez\\\\Documents\\\\webdev\\\\git\\\\comp-overload\\\\client\\\\src\\\\components\\\\left\\\\left.component.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { createStructuredSelector } from 'reselect';\nimport { connect } from \"react-redux\";\nimport CustomDropDown from '../custom-drop-down/custom-drop-down.component';\nimport UserDropDown from \"../custom-drop-down/user-drop-down.component\";\nimport { LeftContainer, LeftInner, Tag } from \"./left.styles\";\nimport { currentMemberId } from \"../../redux/site-member/site-member.selectors\";\nimport { requestSelectedAssetData } from \"../../redux/asset/asset.actions\";\nimport { requestAssetDropDownOptions } from '../../redux/drop-downs/drop-down.actions';\nimport { selectAssets } from \"../../redux/drop-downs/drop-down.selectors\";\nimport { requestSelectedUserData } from \"../../redux/user/user.actions\";\nimport { requestUserDropDownOptions } from '../../redux/drop-downs/drop-down.actions';\nimport { selectUsers } from \"../../redux/drop-downs/drop-down.selectors\";\nimport selectedListItemID from \"../custom-drop-down/drop-down.utils\";\n\nconst ScanboxContainer = ({\n  getAssetDetails,\n  getAssetOptions,\n  getUserOptions,\n  getUserDetails,\n  assets,\n  users,\n  memberId\n}) => {\n  _s();\n\n  useEffect(() => {\n    // Get Data from /allunits.\n    getAssetOptions(memberId);\n  }, [getAssetOptions, memberId]); //\n\n  useEffect(() => {\n    // Get Data from /allusers when component mounts.\n    getUserOptions(memberId);\n  }, [getUserOptions, memberId]); // getUserOptions will not update, it was passed as a dependency to mute the console.warning. \n\n  return /*#__PURE__*/_jsxDEV(LeftContainer, {\n    children: /*#__PURE__*/_jsxDEV(LeftInner, {\n      children: [/*#__PURE__*/_jsxDEV(Tag, {\n        children: \"ASSET ID\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CustomDropDown, {\n        onChange: getAssetDetails,\n        id: \"asset-list\",\n        optionList: assets\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Tag, {\n        children: \"USER ID\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CustomDropDown, {\n        onChange: getUserDetails,\n        id: \"user-list\",\n        optionList: users\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ScanboxContainer, \"3ubReDTFssvu4DHeldAg55cW/CI=\");\n\n_c = ScanboxContainer;\nconst mapStateToProps = createStructuredSelector({\n  memberId: currentMemberId,\n  assets: selectAssets,\n  users: selectUsers\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getAssetDetails: () => {\n    dispatch(requestSelectedAssetData(selectedListItemID('asset-list')));\n  },\n  getAssetOptions: memberId => {\n    dispatch(requestAssetDropDownOptions(memberId));\n  },\n  getUserOptions: memberId => {\n    dispatch(requestUserDropDownOptions(memberId));\n  },\n  getUserDetails: () => {\n    dispatch(requestSelectedUserData(selectedListItemID('user-list')));\n  }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ScanboxContainer);\n\nvar _c;\n\n$RefreshReg$(_c, \"ScanboxContainer\");","map":{"version":3,"sources":["C:/Users/bryan.alvarez/Documents/webdev/git/comp-overload/client/src/components/left/left.component.jsx"],"names":["React","useEffect","createStructuredSelector","connect","CustomDropDown","UserDropDown","LeftContainer","LeftInner","Tag","currentMemberId","requestSelectedAssetData","requestAssetDropDownOptions","selectAssets","requestSelectedUserData","requestUserDropDownOptions","selectUsers","selectedListItemID","ScanboxContainer","getAssetDetails","getAssetOptions","getUserOptions","getUserDetails","assets","users","memberId","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {useEffect}  from 'react'\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { connect } from \"react-redux\";\r\n\r\nimport CustomDropDown from '../custom-drop-down/custom-drop-down.component';\r\nimport UserDropDown from \"../custom-drop-down/user-drop-down.component\";\r\n\r\nimport {LeftContainer, LeftInner, Tag } from \"./left.styles\";\r\n\r\nimport { currentMemberId } from \"../../redux/site-member/site-member.selectors\";\r\n\r\nimport { requestSelectedAssetData } from \"../../redux/asset/asset.actions\";\r\nimport { requestAssetDropDownOptions } from '../../redux/drop-downs/drop-down.actions'\r\nimport { selectAssets } from \"../../redux/drop-downs/drop-down.selectors\";\r\n\r\nimport { requestSelectedUserData } from \"../../redux/user/user.actions\";\r\nimport { requestUserDropDownOptions } from '../../redux/drop-downs/drop-down.actions'\r\nimport { selectUsers } from \"../../redux/drop-downs/drop-down.selectors\";\r\n\r\nimport  selectedListItemID  from \"../custom-drop-down/drop-down.utils\";\r\n\r\n\r\n\r\n\r\nconst ScanboxContainer = ({ getAssetDetails, getAssetOptions, getUserOptions, getUserDetails, assets, users, memberId }) => {\r\n    \r\n    useEffect(() => {\r\n        // Get Data from /allunits.\r\n        getAssetOptions(memberId)\r\n      }, [getAssetOptions, memberId]); //\r\n\r\n      useEffect(() => {\r\n        // Get Data from /allusers when component mounts.\r\n        getUserOptions(memberId)\r\n      }, [getUserOptions, memberId]); // getUserOptions will not update, it was passed as a dependency to mute the console.warning. \r\n    \r\n\r\n    return (\r\n        <LeftContainer>\r\n            \r\n            <LeftInner>\r\n                <Tag>ASSET ID</Tag>\r\n                <CustomDropDown onChange={getAssetDetails} id=\"asset-list\" optionList={assets}/> \r\n                <Tag>USER ID</Tag>\r\n                <CustomDropDown onChange={getUserDetails} id=\"user-list\" optionList={users}/> \r\n            </LeftInner>\r\n        </LeftContainer>\r\n    )}\r\n\r\n\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    memberId: currentMemberId,\r\n    assets: selectAssets,\r\n    users: selectUsers\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    getAssetDetails: () => { dispatch(requestSelectedAssetData(selectedListItemID('asset-list')))},\r\n    getAssetOptions: (memberId) => { dispatch(requestAssetDropDownOptions(memberId))},\r\n    getUserOptions: (memberId) => { dispatch( requestUserDropDownOptions(memberId)) },\r\n    getUserDetails: () => { dispatch( requestSelectedUserData ( selectedListItemID('user-list') ) )},\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ScanboxContainer);"]},"metadata":{},"sourceType":"module"}