{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\alvar\\\\Documents\\\\WebDev\\\\comp-overload\\\\client\\\\src\\\\components\\\\center\\\\center.component.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport CustomButton from '../custom-button/custom-button.component';\nimport { connect } from \"react-redux\";\nimport { useAlert } from 'react-alert';\nimport { confirmAlert } from 'react-confirm-alert';\nimport { assetTransaction } from \"./center.utils\";\nimport robot from '../../images/robot3.jpg';\nimport { checkInSelectedAssetStart, requestSelectedAssetData, checkOutSelectedAssetStart, quarantineSelectedAssetStart } from \"../../redux/asset/asset.actions\";\nimport { requestAssetDropDownOptions } from \"../../redux/drop-downs/drop-down.actions\";\nimport { removeAsset } from \"../../services/api\";\nimport { CenterPanelContainer, CenterPanelInnerContainer, Header, AssetName, AssetSerial, RemoveButton, ImageContainer, AssetImage, AssetStatus, ButtonContainer, Footer, Instructions, ReasonBox } from \"./center.styles.jsx\";\nimport 'react-confirm-alert/src/react-confirm-alert.css';\n\nconst Center = ({\n  assetID,\n  assetName,\n  assetSerial,\n  assetImage,\n  assetStatus,\n  checkInAsset,\n  getUpdatedStatus,\n  checkOutAsset,\n  quarantineAsset,\n  userID,\n  quarantineReason,\n  getAssetOptions\n}) => {\n  _s();\n\n  const alert = useAlert();\n\n  const preventDragHandler = event => {\n    event.preventDefault();\n  };\n\n  const onReasonChange = event => {\n    quarantineReason = event.target.value;\n  };\n\n  const handleCheckout = () => {\n    if (assetStatus.slice(0, 9) === 'In Use By') {\n      alert.show(`${assetName} is ${assetStatus}`, {\n        type: 'info'\n      });\n    } else if (!userID) {\n      alert.show(`Username is required for checkout`, {\n        type: 'info'\n      });\n      document.getElementById('user-list').focus();\n    } else {\n      assetTransaction(checkOutAsset, getUpdatedStatus, assetID, userID);\n      document.getElementById('asset-list').focus();\n    }\n  };\n\n  const handleQuarantine = () => {\n    if (assetStatus === 'Quarantine') {\n      alert.show(`${assetName} is already in quarantine.`, {\n        type: 'info'\n      });\n    } else if (!quarantineReason) {\n      alert.show(`Reason is required to check ${assetName} into quarantine.`, {\n        type: 'info'\n      });\n      document.getElementById(\"text-area\").focus();\n    } else {\n      assetTransaction(quarantineAsset, getUpdatedStatus, assetID, quarantineReason);\n      document.getElementById('text-area').value = '';\n    }\n  };\n\n  const handleRemoveAsset = () => {\n    confirmAlert({\n      title: 'Confirm Delete',\n      message: `Are you sure to delete ${assetName.toUpperCase()} ?`,\n      buttons: [{\n        label: 'Yes',\n        onClick: () => {\n          removeAsset(assetID);\n          alert.show(`${assetName} has been removed.`, {\n            type: 'success'\n          });\n          getAssetOptions(memberId);\n        }\n      }, {\n        label: 'No',\n        onClick: () => alert.show('Operation Cancelled')\n      }]\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(CenterPanelContainer, {\n    children: assetID ? /*#__PURE__*/_jsxDEV(CenterPanelInnerContainer, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        children: [/*#__PURE__*/_jsxDEV(AssetName, {\n          children: assetName.toUpperCase()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(AssetSerial, {\n          children: assetSerial.toUpperCase()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(ImageContainer, {\n        children: [/*#__PURE__*/_jsxDEV(RemoveButton, {\n          onClick: handleRemoveAsset,\n          children: \"REMOVE ASSET\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(AssetImage, {\n          src: assetImage,\n          alt: \"\",\n          onDragStart: preventDragHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(AssetStatus, { ...(assetStatus === 'Available' ? {\n          isAvailable: true\n        } : assetStatus.slice(0, 9) === 'In Use By' ? {\n          isInUse: true\n        } : {\n          isQurantined: true\n        }),\n        children: assetStatus.toUpperCase()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(ButtonContainer, {\n        children: [/*#__PURE__*/_jsxDEV(CustomButton, {\n          isCheckIn: true,\n          onClick: () => {\n            assetStatus !== 'Available' ? assetTransaction(checkInAsset, getUpdatedStatus, assetID) : alert.show(`${assetName} is already checked in.`, {\n              type: 'info'\n            });\n          },\n          children: \"CHECK IN\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(CustomButton, {\n          isCheckOut: true,\n          onClick: handleCheckout,\n          children: \"CHECK OUT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {\n        children: [/*#__PURE__*/_jsxDEV(Instructions, {\n          children: \"If there are issues with the asset, please fill out the form below and submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(ReasonBox, {\n          id: \"text-area\",\n          onChange: onReasonChange,\n          placeholder: quarantineReason\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(CustomButton, {\n          isSubmit: true,\n          onClick: handleQuarantine,\n          children: \"SUBMIT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(CenterPanelInnerContainer, {\n      children: [/*#__PURE__*/_jsxDEV(AssetImage, {\n        src: robot,\n        alt: \"\",\n        onDragStart: preventDragHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"PLEASE SELECT AN ASSET FROM THE LIST TO GET STARTED\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"IF THIS IS YOUR FIRST TIME, PLEASE ADD AN ASSET\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Center, \"/tbmWjntTVQXAO42KRyQZrplUA4=\", false, function () {\n  return [useAlert];\n});\n\n_c = Center;\n\nconst mapStateToProps = state => ({\n  assetID: state.assetData.id,\n  assetName: state.assetData.name,\n  assetSerial: state.assetData.serial,\n  assetImage: state.assetData.image,\n  assetStatus: state.assetData.status,\n  userID: state.userData.id,\n  quarantineReason: state.assetData.comments,\n  memberId: state.memberState.memberId\n});\n\nconst mapDispatchToProps = dispatch => ({\n  checkInAsset: assetID => {\n    dispatch(checkInSelectedAssetStart(assetID));\n  },\n  checkOutAsset: (assetID, userID) => {\n    dispatch(checkOutSelectedAssetStart(assetID, userID));\n  },\n  quarantineAsset: (assetID, quarantineReason) => {\n    dispatch(quarantineSelectedAssetStart(assetID, quarantineReason));\n  },\n  getUpdatedStatus: assetID => {\n    dispatch(requestSelectedAssetData(assetID));\n  },\n  getAssetOptions: memberId => {\n    dispatch(requestAssetDropDownOptions(memberId));\n  }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Center); //^ THE CODE BELOW IS USED TO LOAD FIRST ASSET WHEN RENDERING APP FOR FIRST TIME\n// const [asset, setAsset] = useState(null);\n// useEffect(() => {\n//     const fetchAsset = async() => {\n//         const response = await fetch(`http://localhost:3000/defaultunit`)\n//         const asset = await response.json()\n//         setAsset(asset[0]);\n//     }\n//     fetchAsset();\n// }, []);\n\nvar _c;\n\n$RefreshReg$(_c, \"Center\");","map":{"version":3,"sources":["C:/Users/alvar/Documents/WebDev/comp-overload/client/src/components/center/center.component.jsx"],"names":["React","CustomButton","connect","useAlert","confirmAlert","assetTransaction","robot","checkInSelectedAssetStart","requestSelectedAssetData","checkOutSelectedAssetStart","quarantineSelectedAssetStart","requestAssetDropDownOptions","removeAsset","CenterPanelContainer","CenterPanelInnerContainer","Header","AssetName","AssetSerial","RemoveButton","ImageContainer","AssetImage","AssetStatus","ButtonContainer","Footer","Instructions","ReasonBox","Center","assetID","assetName","assetSerial","assetImage","assetStatus","checkInAsset","getUpdatedStatus","checkOutAsset","quarantineAsset","userID","quarantineReason","getAssetOptions","alert","preventDragHandler","event","preventDefault","onReasonChange","target","value","handleCheckout","slice","show","type","document","getElementById","focus","handleQuarantine","handleRemoveAsset","title","message","toUpperCase","buttons","label","onClick","memberId","isAvailable","isInUse","isQurantined","mapStateToProps","state","assetData","id","name","serial","image","status","userData","comments","memberState","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport CustomButton from '../custom-button/custom-button.component';\r\nimport { connect } from \"react-redux\";\r\nimport { useAlert } from 'react-alert';\r\nimport { confirmAlert } from 'react-confirm-alert';\r\n\r\nimport { assetTransaction } from \"./center.utils\";\r\nimport robot from '../../images/robot3.jpg';\r\n\r\nimport {checkInSelectedAssetStart, requestSelectedAssetData, checkOutSelectedAssetStart, quarantineSelectedAssetStart} from \"../../redux/asset/asset.actions\";\r\nimport { requestAssetDropDownOptions } from \"../../redux/drop-downs/drop-down.actions\";\r\n\r\nimport { removeAsset } from \"../../services/api\";\r\n\r\nimport { CenterPanelContainer, CenterPanelInnerContainer, Header, AssetName, AssetSerial, RemoveButton, ImageContainer, AssetImage, \r\n    AssetStatus, ButtonContainer, Footer, Instructions, ReasonBox } from \"./center.styles.jsx\";    \r\nimport 'react-confirm-alert/src/react-confirm-alert.css'; \r\n\r\nconst Center = ({assetID, assetName, assetSerial,  assetImage, assetStatus, checkInAsset, getUpdatedStatus ,checkOutAsset, \r\n    quarantineAsset, userID, quarantineReason, getAssetOptions}) => {\r\n\r\n    const alert = useAlert();\r\n\r\n    const preventDragHandler = (event) => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    const onReasonChange = (event) => {\r\n        quarantineReason = event.target.value;\r\n    };\r\n\r\n    const handleCheckout= () => {\r\n        if ( assetStatus.slice(0,9) === 'In Use By' ){\r\n            alert.show(`${assetName} is ${assetStatus}`,{type: 'info'})\r\n        } else if (!userID){\r\n            alert.show(`Username is required for checkout`,{type: 'info'})\r\n            document.getElementById('user-list').focus() \r\n        } else {\r\n            assetTransaction(checkOutAsset, getUpdatedStatus, assetID, userID)\r\n            document.getElementById('asset-list').focus() \r\n        }\r\n    };\r\n\r\n    const handleQuarantine = () => {\r\n        if (assetStatus === 'Quarantine' ){\r\n            alert.show(`${assetName} is already in quarantine.`,{type: 'info'})\r\n        } else if (!quarantineReason){\r\n            alert.show(`Reason is required to check ${assetName} into quarantine.`,{type: 'info'})\r\n            document.getElementById(\"text-area\").focus()\r\n        } else {\r\n            assetTransaction(quarantineAsset, getUpdatedStatus, assetID, quarantineReason);\r\n            document.getElementById('text-area').value = '';\r\n        }\r\n    };\r\n\r\n    const handleRemoveAsset = () => {\r\n        confirmAlert({\r\n          title: 'Confirm Delete',\r\n          message: `Are you sure to delete ${assetName.toUpperCase()} ?`,\r\n          buttons: [\r\n            {\r\n              label: 'Yes',\r\n              onClick: () => {removeAsset(assetID); alert.show(`${assetName} has been removed.`,{type: 'success'}); getAssetOptions(memberId)}\r\n            },\r\n            {\r\n              label: 'No',\r\n              onClick: () => alert.show('Operation Cancelled')\r\n            }\r\n          ]\r\n        });\r\n      };\r\n\r\n    return (\r\n        <CenterPanelContainer>\r\n        {assetID ? (\r\n                <CenterPanelInnerContainer>\r\n\r\n                    <Header>\r\n                        <AssetName>{assetName.toUpperCase()}</AssetName>\r\n                        <AssetSerial>{assetSerial.toUpperCase()}</AssetSerial>\r\n                    </Header>\r\n\r\n                    <ImageContainer>   \r\n                        <RemoveButton onClick={handleRemoveAsset}>REMOVE ASSET</RemoveButton>\r\n                        <AssetImage src={assetImage}  alt='' onDragStart={preventDragHandler}/>\r\n                    </ImageContainer>\r\n                    \r\n                    <AssetStatus \r\n                        {...( assetStatus === 'Available' ? {isAvailable: true} \r\n                            : assetStatus.slice(0,9) === 'In Use By' ? {isInUse: true} \r\n                            : {isQurantined: true} )}\r\n                    >\r\n                        {assetStatus.toUpperCase()}\r\n                    </AssetStatus>\r\n\r\n                    <ButtonContainer>\r\n                        <CustomButton \r\n                            isCheckIn \r\n                            onClick={\r\n                                () => {assetStatus !== 'Available' \r\n                                ? assetTransaction(checkInAsset, getUpdatedStatus, assetID) \r\n                                : alert.show(`${assetName} is already checked in.`,{type: 'info'})}}>\r\n                            CHECK IN\r\n                        </CustomButton>\r\n                        <CustomButton isCheckOut onClick={handleCheckout}>CHECK OUT</CustomButton>\r\n                    </ButtonContainer>\r\n\r\n                    <Footer>\r\n                        <Instructions>If there are issues with the asset, please fill out the form below and submit</Instructions>\r\n                        <ReasonBox id=\"text-area\" onChange={onReasonChange} placeholder={quarantineReason}/>\r\n                        <CustomButton isSubmit onClick={handleQuarantine}>SUBMIT</CustomButton>\r\n                    </Footer>\r\n\r\n                </CenterPanelInnerContainer>\r\n\r\n                ):(  \r\n\r\n                <CenterPanelInnerContainer>\r\n                <AssetImage src={robot}  alt='' onDragStart={preventDragHandler}/>\r\n                    <h2>PLEASE SELECT AN ASSET FROM THE LIST TO GET STARTED</h2>\r\n                    <h3>IF THIS IS YOUR FIRST TIME, PLEASE ADD AN ASSET</h3>\r\n                </CenterPanelInnerContainer>\r\n                )}\r\n        </CenterPanelContainer>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    assetID: state.assetData.id,\r\n    assetName: state.assetData.name,\r\n    assetSerial: state.assetData.serial,\r\n    assetImage: state.assetData.image,\r\n    assetStatus:state.assetData.status,\r\n    userID: state.userData.id,\r\n    quarantineReason: state.assetData.comments,\r\n    memberId: state.memberState.memberId\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    checkInAsset:       (assetID)                   => { dispatch(checkInSelectedAssetStart(assetID)) },\r\n    checkOutAsset:      (assetID, userID)           => { dispatch(checkOutSelectedAssetStart(assetID, userID)) },\r\n    quarantineAsset:    (assetID, quarantineReason) => { dispatch(quarantineSelectedAssetStart(assetID, quarantineReason)) },\r\n    getUpdatedStatus:   (assetID)                   => { dispatch(requestSelectedAssetData(assetID)) },\r\n    getAssetOptions: (memberId) => { dispatch(requestAssetDropDownOptions(memberId))}\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Center);\r\n\r\n//^ THE CODE BELOW IS USED TO LOAD FIRST ASSET WHEN RENDERING APP FOR FIRST TIME\r\n\r\n// const [asset, setAsset] = useState(null);\r\n    \r\n// useEffect(() => {\r\n//     const fetchAsset = async() => {\r\n//         const response = await fetch(`http://localhost:3000/defaultunit`)\r\n//         const asset = await response.json()\r\n//         setAsset(asset[0]);\r\n//     }\r\n\r\n//     fetchAsset();\r\n// }, []);\r\n"]},"metadata":{},"sourceType":"module"}