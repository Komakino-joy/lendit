{"ast":null,"code":"import { all, call, takeLatest, put } from 'redux-saga/effects';\nimport { httpRegisterUser, httpSignInUser } from '../../services/api';\nimport SiteMemberActionTypes from './site-member.types';\nimport { registrationFailure, registrationSuccess, signInFailure, signInSuccess // signInStart,\n} from './site-member.actions';\nexport function* signIn({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    yield httpSignInUser(email, password);\n    yield put(signInSuccess({\n      email,\n      password\n    }));\n  } catch (error) {\n    yield call(alert, 'Invalid Credentials', error);\n    yield put(signInFailure(error));\n  }\n\n  ;\n}\n;\nexport function* register({\n  payload: {\n    fname,\n    lname,\n    email,\n    password\n  }\n}) {\n  try {\n    yield httpRegisterUser(fname, lname, email, password);\n    yield put(registrationSuccess({\n      email,\n      password\n    }));\n  } catch (error) {\n    yield put(registrationFailure(error));\n  }\n}\n;\nexport function* onSignInStart() {\n  yield takeLatest(SiteMemberActionTypes.SIGN_IN_START, signIn);\n}\n;\nexport function* onRegistrationStart() {\n  yield takeLatest(SiteMemberActionTypes.REGISTER_START, register);\n}\n; // export function* signInAfterRegistration({payload: email, password}){\n//     yield put(signInStart(email, password));\n// };  \n// export function* onRegistrationSuccess() {\n//     yield takeLatest(SiteMemberActionTypes.REGISTER_SUCCESS, signInAfterRegistration);\n// };\n\nexport function* siteMemberSagas() {\n  yield all([call(onRegistrationStart), call(onSignInStart) // call(onRegistrationSuccess),\n  ]);\n}\n;","map":{"version":3,"sources":["C:/Users/alvar/Documents/WebDev/lendit/lendit/src/redux/site-member/site-member.sagas.js"],"names":["all","call","takeLatest","put","httpRegisterUser","httpSignInUser","SiteMemberActionTypes","registrationFailure","registrationSuccess","signInFailure","signInSuccess","signIn","payload","email","password","error","alert","register","fname","lname","onSignInStart","SIGN_IN_START","onRegistrationStart","REGISTER_START","siteMemberSagas"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,QAA4C,oBAA5C;AAEA,SACIC,gBADJ,EAEIC,cAFJ,QAGO,oBAHP;AAKA,OAAOC,qBAAP,MAAkC,qBAAlC;AAEA,SACIC,mBADJ,EAEIC,mBAFJ,EAGIC,aAHJ,EAIIC,aAJJ,CAKI;AALJ,OAMO,uBANP;AASA,OAAO,UAAUC,MAAV,CAAiB;AAACC,EAAAA,OAAO,EAAE;AAACC,IAAAA,KAAD;AAAQC,IAAAA;AAAR;AAAV,CAAjB,EAA+C;AAClD,MAAG;AACC,UAAMT,cAAc,CAACQ,KAAD,EAAQC,QAAR,CAApB;AACA,UAAMX,GAAG,CAACO,aAAa,CAAC;AAACG,MAAAA,KAAD;AAAQC,MAAAA;AAAR,KAAD,CAAd,CAAT;AACH,GAHD,CAGC,OAAMC,KAAN,EAAY;AACT,UAAMd,IAAI,CAACe,KAAD,EAAQ,qBAAR,EAA+BD,KAA/B,CAAV;AACA,UAAMZ,GAAG,CAACM,aAAa,CAACM,KAAD,CAAd,CAAT;AACH;;AAAA;AACJ;AAAA;AAED,OAAO,UAAUE,QAAV,CAAmB;AAACL,EAAAA,OAAO,EAAE;AAAEM,IAAAA,KAAF;AAASC,IAAAA,KAAT;AAAgBN,IAAAA,KAAhB;AAAuBC,IAAAA;AAAvB;AAAV,CAAnB,EAAiE;AACpE,MAAG;AACC,UAAMV,gBAAgB,CAACc,KAAD,EAAQC,KAAR,EAAeN,KAAf,EAAsBC,QAAtB,CAAtB;AACA,UAAMX,GAAG,CAACK,mBAAmB,CAAC;AAACK,MAAAA,KAAD;AAAQC,MAAAA;AAAR,KAAD,CAApB,CAAT;AACH,GAHD,CAGC,OAAMC,KAAN,EAAY;AACT,UAAMZ,GAAG,CAACI,mBAAmB,CAACQ,KAAD,CAApB,CAAT;AACH;AACJ;AAAA;AAED,OAAO,UAAUK,aAAV,GAA0B;AAC7B,QAAMlB,UAAU,CAACI,qBAAqB,CAACe,aAAvB,EAAsCV,MAAtC,CAAhB;AACH;AAAA;AAED,OAAO,UAAUW,mBAAV,GAAgC;AACnC,QAAMpB,UAAU,CAACI,qBAAqB,CAACiB,cAAvB,EAAuCN,QAAvC,CAAhB;AACH;AAAA,C,CAED;AACA;AACA;AAGA;AACA;AACA;;AAEA,OAAO,UAAUO,eAAV,GAA4B;AAC/B,QAAMxB,GAAG,CAAC,CACNC,IAAI,CAACqB,mBAAD,CADE,EAENrB,IAAI,CAACmB,aAAD,CAFE,CAGN;AAHM,GAAD,CAAT;AAKH;AAAA","sourcesContent":["import { all, call, takeLatest, put  } from 'redux-saga/effects';\r\n\r\nimport { \r\n    httpRegisterUser, \r\n    httpSignInUser \r\n} from '../../services/api';\r\n\r\nimport SiteMemberActionTypes from './site-member.types';\r\n\r\nimport {\r\n    registrationFailure,\r\n    registrationSuccess,\r\n    signInFailure,\r\n    signInSuccess, \r\n    // signInStart,\r\n} from './site-member.actions'\r\n\r\n\r\nexport function* signIn({payload: {email, password}}) {\r\n    try{\r\n        yield httpSignInUser(email, password);\r\n        yield put(signInSuccess({email, password}));\r\n    }catch(error){\r\n        yield call(alert, 'Invalid Credentials', error );\r\n        yield put(signInFailure(error));\r\n    };\r\n};\r\n\r\nexport function* register({payload: { fname, lname, email, password }}) {\r\n    try{\r\n        yield httpRegisterUser(fname, lname, email, password);\r\n        yield put(registrationSuccess({email, password})); \r\n    }catch(error){\r\n        yield put(registrationFailure(error));\r\n    } \r\n};\r\n\r\nexport function* onSignInStart() {\r\n    yield takeLatest(SiteMemberActionTypes.SIGN_IN_START, signIn)\r\n};\r\n\r\nexport function* onRegistrationStart() {\r\n    yield takeLatest(SiteMemberActionTypes.REGISTER_START, register)\r\n};\r\n\r\n// export function* signInAfterRegistration({payload: email, password}){\r\n//     yield put(signInStart(email, password));\r\n// };  \r\n\r\n\r\n// export function* onRegistrationSuccess() {\r\n//     yield takeLatest(SiteMemberActionTypes.REGISTER_SUCCESS, signInAfterRegistration);\r\n// };\r\n\r\nexport function* siteMemberSagas() {\r\n    yield all([\r\n        call(onRegistrationStart),\r\n        call(onSignInStart),\r\n        // call(onRegistrationSuccess),\r\n    ]);\r\n};"]},"metadata":{},"sourceType":"module"}